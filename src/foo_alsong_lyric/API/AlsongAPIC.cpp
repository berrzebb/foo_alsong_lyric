/* AlsongAPIC.cpp
   Generated by gSOAP 2.8.21 from alsongapi.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "AlsongAPIH.h"

SOAP_SOURCE_STAMP("@(#) AlsongAPIC.cpp ver 2.8.21 2014-12-22 05:15:20 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_in_short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_in_xsd__unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT:
		return soap_in_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, NULL, NULL, "ns1:ST_LYRIC_DELETE_RESULT");
	case SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT:
		return soap_in_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, NULL, NULL, "ns1:ArrayOfST_LYRIC_DELETE_RESULT");
	case SOAP_TYPE_ns1__ArrayOfInt:
		return soap_in_ns1__ArrayOfInt(soap, NULL, NULL, "ns1:ArrayOfInt");
	case SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREFORMONITOR:
		return soap_in_ns1__ST_USCORELYRIC_USCOREFORMONITOR(soap, NULL, NULL, "ns1:ST_LYRIC_FORMONITOR");
	case SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR:
		return soap_in_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(soap, NULL, NULL, "ns1:ArrayOfST_LYRIC_FORMONITOR");
	case SOAP_TYPE_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN:
		return soap_in_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(soap, NULL, NULL, "ns1:ArrayOfST_RIGHTSINFO_JPN");
	case SOAP_TYPE_ns1__ST_USCORERIGHTSINFO_USCOREJPN:
		return soap_in_ns1__ST_USCORERIGHTSINFO_USCOREJPN(soap, NULL, NULL, "ns1:ST_RIGHTSINFO_JPN");
	case SOAP_TYPE_ns1__ST_USCORELYRICINFO:
		return soap_in_ns1__ST_USCORELYRICINFO(soap, NULL, NULL, "ns1:ST_LYRICINFO");
	case SOAP_TYPE_ns1__ST_USCORESEARCHLYRIC_USCORELIST:
		return soap_in_ns1__ST_USCORESEARCHLYRIC_USCORELIST(soap, NULL, NULL, "ns1:ST_SEARCHLYRIC_LIST");
	case SOAP_TYPE_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST:
		return soap_in_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(soap, NULL, NULL, "ns1:ArrayOfST_SEARCHLYRIC_LIST");
	case SOAP_TYPE_ns1__UploadForeignLyricInfo:
		return soap_in_ns1__UploadForeignLyricInfo(soap, NULL, NULL, "ns1:UploadForeignLyricInfo");
	case SOAP_TYPE_ns1__GetBroadcastingListReturn:
		return soap_in_ns1__GetBroadcastingListReturn(soap, NULL, NULL, "ns1:GetBroadcastingListReturn");
	case SOAP_TYPE_ns1__ArrayOfGetBroadcastingListReturn:
		return soap_in_ns1__ArrayOfGetBroadcastingListReturn(soap, NULL, NULL, "ns1:ArrayOfGetBroadcastingListReturn");
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN:
		return soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, NULL, NULL, "ns1:ST_CAST_GET_EX_METADATA_LIST3_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN:
		return soap_in_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST3_RETURN");
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN:
		return soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, NULL, NULL, "ns1:ST_CAST_GET_EX_METADATA_LIST2_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN:
		return soap_in_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST2_RETURN");
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN:
		return soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ST_CAST_GET_EX_METADATA_LIST_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN:
		return soap_in_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST_RETURN");
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN:
		return soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(soap, NULL, NULL, "ns1:ST_CAST_GET_EX_METADATA_RETURN");
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY:
		return soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, NULL, NULL, "ns1:ST_CAST_GET_EX_METADATA_QUERY");
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY:
		return soap_in_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, NULL, NULL, "ns1:ST_CAST_REMOVE_EX_METADATA_QUERY");
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY:
		return soap_in_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(soap, NULL, NULL, "ns1:ST_CAST_UPLOAD_EX_METADATA3_QUERY");
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY:
		return soap_in_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(soap, NULL, NULL, "ns1:ST_CAST_UPLOAD_EX_METADATA2_QUERY");
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY:
		return soap_in_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, NULL, NULL, "ns1:ST_CAST_UPLOAD_EX_METADATA_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN:
		return soap_in_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_ALBA_STATISTIC_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN:
		return soap_in_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_GET_ALBA_STATISTIC_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY:
		return soap_in_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_ALBA_STATISTIC_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN:
		return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_COUNT_REPORT_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY:
		return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_COUNT_REPORT_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN:
		return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_COUNT_MODIFY_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY:
		return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_COUNT_MODIFY_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN:
		return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_COUNT_LYRIC_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN:
		return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_COUNT_CHECKSUM_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN:
		return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_COUNT_IN_REGISTER_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY:
		return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_COUNT_IN_REGISTER_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY:
		return soap_in_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(soap, NULL, NULL, "ns1:ST_REPORT_BLACKLIST_REPORT_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY:
		return soap_in_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(soap, NULL, NULL, "ns1:ST_ADMIT_MODIFY_LYRIC_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY:
		return soap_in_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(soap, NULL, NULL, "ns1:ST_DELETE_RECORD_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN:
		return soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_MEMBER_LICENSE_LIST_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN:
		return soap_in_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_GET_MEMBER_LICENSE_LIST_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY:
		return soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_MEMBER_LICENSE_LIST_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN:
		return soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_MEMBER_LIST_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN:
		return soap_in_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_GET_MEMBER_LIST_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY:
		return soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_MEMBER_LIST_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY:
		return soap_in_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(soap, NULL, NULL, "ns1:ST_MODIFY_MEMBER_LICENSE_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY:
		return soap_in_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(soap, NULL, NULL, "ns1:ST_APPLY_REGISTRATION_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY:
		return soap_in_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(soap, NULL, NULL, "ns1:ST_MEMBER_LOGOUT_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY:
		return soap_in_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(soap, NULL, NULL, "ns1:ST_MEMBER_LOGIN_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY:
		return soap_in_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(soap, NULL, NULL, "ns1:ST_MEMBER_REMOVEMEMBER_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY:
		return soap_in_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(soap, NULL, NULL, "ns1:ST_MEMBER_MODIFYMEMBER_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY:
		return soap_in_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(soap, NULL, NULL, "ns1:ST_MEMBER_ADDMEMBER_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN:
		return soap_in_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_REGISTER_LIST_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN:
		return soap_in_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_GET_REGISTER_LIST_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY:
		return soap_in_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_REGISTER_LIST_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN:
		return soap_in_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_MODIFY_LIST_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN:
		return soap_in_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_GET_MODIFY_LIST_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY:
		return soap_in_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_MODIFY_LIST_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN:
		return soap_in_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_REPORTFAULT_LIST_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN:
		return soap_in_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_GET_REPORTFAULT_LIST_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN:
		return soap_in_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_LYRIC_LIST_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN:
		return soap_in_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_GET_LYRIC_LIST_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY:
		return soap_in_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_LYRIC_LIST_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY:
		return soap_in_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_LYRIC5_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN:
		return soap_in_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_LYRIC4_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY:
		return soap_in_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_LYRIC4_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN:
		return soap_in_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_LYRIC3_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY:
		return soap_in_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_LYRIC3_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY:
		return soap_in_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(soap, NULL, NULL, "ns1:ST_IS_REPORTED_FAULT_LYRIC_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY:
		return soap_in_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, NULL, NULL, "ns1:ST_IS_REPORTED_RECOMMENDATION_LYRIC_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY:
		return soap_in_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, NULL, NULL, "ns1:ST_REPORT_RECOMMENDATION_LYRIC_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY:
		return soap_in_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(soap, NULL, NULL, "ns1:ST_REPORT_FAULT_LYRIC2_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY:
		return soap_in_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(soap, NULL, NULL, "ns1:ST_REPORT_FAULT_LYRIC_WITH_COMMENT_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY:
		return soap_in_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(soap, NULL, NULL, "ns1:ST_UPLOAD_LYRIC_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN:
		return soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_RESEMBLELYRIC2_COUNT_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY:
		return soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_RESEMBLELYRIC2_COUNT_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN:
		return soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_RESEMBLELYRIC2_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN:
		return soap_in_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_GET_RESEMBLELYRIC2_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY:
		return soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_RESEMBLELYRIC2_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN:
		return soap_in_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_LYRIC5_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREMUREKAINFO_USCORESERVICE:
		return soap_in_ns1__ST_USCOREMUREKAINFO_USCORESERVICE(soap, NULL, NULL, "ns1:ST_MUREKAINFO_SERVICE");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTo_ns1__AdminGetLatestLyricID:
		return soap_in_PointerTo_ns1__AdminGetLatestLyricID(soap, NULL, NULL, "ns1:AdminGetLatestLyricID");
	case SOAP_TYPE_PointerTo_ns1__AdminDeleteLyrics:
		return soap_in_PointerTo_ns1__AdminDeleteLyrics(soap, NULL, NULL, "ns1:AdminDeleteLyrics");
	case SOAP_TYPE_PointerTo_ns1__AdminGetLyrics:
		return soap_in_PointerTo_ns1__AdminGetLyrics(soap, NULL, NULL, "ns1:AdminGetLyrics");
	case SOAP_TYPE_PointerTo_ns1__AdminLoginLyricMonitor:
		return soap_in_PointerTo_ns1__AdminLoginLyricMonitor(soap, NULL, NULL, "ns1:AdminLoginLyricMonitor");
	case SOAP_TYPE_PointerTo_ns1__GetSearchLyricCount:
		return soap_in_PointerTo_ns1__GetSearchLyricCount(soap, NULL, NULL, "ns1:GetSearchLyricCount");
	case SOAP_TYPE_PointerTo_ns1__AdminLoginRightsJPN:
		return soap_in_PointerTo_ns1__AdminLoginRightsJPN(soap, NULL, NULL, "ns1:AdminLoginRightsJPN");
	case SOAP_TYPE_PointerTo_ns1__AdminJPNSearchRightsInfoList:
		return soap_in_PointerTo_ns1__AdminJPNSearchRightsInfoList(soap, NULL, NULL, "ns1:AdminJPNSearchRightsInfoList");
	case SOAP_TYPE_PointerTo_ns1__AdminJPNSetRightsInfo:
		return soap_in_PointerTo_ns1__AdminJPNSetRightsInfo(soap, NULL, NULL, "ns1:AdminJPNSetRightsInfo");
	case SOAP_TYPE_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID:
		return soap_in_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID(soap, NULL, NULL, "ns1:AdminJPNGetRightsInfoByLyricID");
	case SOAP_TYPE_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID:
		return soap_in_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID(soap, NULL, NULL, "ns1:AdminJPNGetRightsInfoByModifyID");
	case SOAP_TYPE_PointerTo_ns1__GetLyricByID2:
		return soap_in_PointerTo_ns1__GetLyricByID2(soap, NULL, NULL, "ns1:GetLyricByID2");
	case SOAP_TYPE_PointerTo_ns1__GetLyricByID:
		return soap_in_PointerTo_ns1__GetLyricByID(soap, NULL, NULL, "ns1:GetLyricByID");
	case SOAP_TYPE_PointerTo_ns1__GetResembleLyricList2:
		return soap_in_PointerTo_ns1__GetResembleLyricList2(soap, NULL, NULL, "ns1:GetResembleLyricList2");
	case SOAP_TYPE_PointerTo_ns1__GetResembleLyricList:
		return soap_in_PointerTo_ns1__GetResembleLyricList(soap, NULL, NULL, "ns1:GetResembleLyricList");
	case SOAP_TYPE_PointerTo_ns1__UploadForeignLyric:
		return soap_in_PointerTo_ns1__UploadForeignLyric(soap, NULL, NULL, "ns1:UploadForeignLyric");
	case SOAP_TYPE_PointerTo_ns1__GetBroadcastingList2:
		return soap_in_PointerTo_ns1__GetBroadcastingList2(soap, NULL, NULL, "ns1:GetBroadcastingList2");
	case SOAP_TYPE_PointerTo_ns1__GetBroadcastingList:
		return soap_in_PointerTo_ns1__GetBroadcastingList(soap, NULL, NULL, "ns1:GetBroadcastingList");
	case SOAP_TYPE_PointerTo_ns1__CastGetExMetaDataList3:
		return soap_in_PointerTo_ns1__CastGetExMetaDataList3(soap, NULL, NULL, "ns1:CastGetExMetaDataList3");
	case SOAP_TYPE_PointerTo_ns1__CastGetExMetaDataList2:
		return soap_in_PointerTo_ns1__CastGetExMetaDataList2(soap, NULL, NULL, "ns1:CastGetExMetaDataList2");
	case SOAP_TYPE_PointerTo_ns1__CastGetExMetaDataList:
		return soap_in_PointerTo_ns1__CastGetExMetaDataList(soap, NULL, NULL, "ns1:CastGetExMetaDataList");
	case SOAP_TYPE_PointerTo_ns1__CastGetExMetaData:
		return soap_in_PointerTo_ns1__CastGetExMetaData(soap, NULL, NULL, "ns1:CastGetExMetaData");
	case SOAP_TYPE_PointerTo_ns1__CastRemoveExMetaData:
		return soap_in_PointerTo_ns1__CastRemoveExMetaData(soap, NULL, NULL, "ns1:CastRemoveExMetaData");
	case SOAP_TYPE_PointerTo_ns1__CastUploadExMetaData3:
		return soap_in_PointerTo_ns1__CastUploadExMetaData3(soap, NULL, NULL, "ns1:CastUploadExMetaData3");
	case SOAP_TYPE_PointerTo_ns1__CastUploadExMetaData2:
		return soap_in_PointerTo_ns1__CastUploadExMetaData2(soap, NULL, NULL, "ns1:CastUploadExMetaData2");
	case SOAP_TYPE_PointerTo_ns1__CastUploadExMetaData:
		return soap_in_PointerTo_ns1__CastUploadExMetaData(soap, NULL, NULL, "ns1:CastUploadExMetaData");
	case SOAP_TYPE_PointerTo_ns1__AdminGetAlbaStatistic:
		return soap_in_PointerTo_ns1__AdminGetAlbaStatistic(soap, NULL, NULL, "ns1:AdminGetAlbaStatistic");
	case SOAP_TYPE_PointerTo_ns1__AdminGetCountReport:
		return soap_in_PointerTo_ns1__AdminGetCountReport(soap, NULL, NULL, "ns1:AdminGetCountReport");
	case SOAP_TYPE_PointerTo_ns1__AdminGetCountModify:
		return soap_in_PointerTo_ns1__AdminGetCountModify(soap, NULL, NULL, "ns1:AdminGetCountModify");
	case SOAP_TYPE_PointerTo_ns1__AdminGetCountLyric:
		return soap_in_PointerTo_ns1__AdminGetCountLyric(soap, NULL, NULL, "ns1:AdminGetCountLyric");
	case SOAP_TYPE_PointerTo_ns1__AdminGetCountChecksum:
		return soap_in_PointerTo_ns1__AdminGetCountChecksum(soap, NULL, NULL, "ns1:AdminGetCountChecksum");
	case SOAP_TYPE_PointerTo_ns1__AdminGetCountInRegister:
		return soap_in_PointerTo_ns1__AdminGetCountInRegister(soap, NULL, NULL, "ns1:AdminGetCountInRegister");
	case SOAP_TYPE_PointerTo_ns1__AdminReportBlackList:
		return soap_in_PointerTo_ns1__AdminReportBlackList(soap, NULL, NULL, "ns1:AdminReportBlackList");
	case SOAP_TYPE_PointerTo_ns1__AdminAdmitModifyLyric:
		return soap_in_PointerTo_ns1__AdminAdmitModifyLyric(soap, NULL, NULL, "ns1:AdminAdmitModifyLyric");
	case SOAP_TYPE_PointerTo_ns1__AdminDeleteRecord:
		return soap_in_PointerTo_ns1__AdminDeleteRecord(soap, NULL, NULL, "ns1:AdminDeleteRecord");
	case SOAP_TYPE_PointerTo_ns1__MemberGetMemberLicenseList:
		return soap_in_PointerTo_ns1__MemberGetMemberLicenseList(soap, NULL, NULL, "ns1:MemberGetMemberLicenseList");
	case SOAP_TYPE_PointerTo_ns1__MemberGetMemberList:
		return soap_in_PointerTo_ns1__MemberGetMemberList(soap, NULL, NULL, "ns1:MemberGetMemberList");
	case SOAP_TYPE_PointerTo_ns1__MemberModifyMemberLicense:
		return soap_in_PointerTo_ns1__MemberModifyMemberLicense(soap, NULL, NULL, "ns1:MemberModifyMemberLicense");
	case SOAP_TYPE_PointerTo_ns1__MemberApplyRegistration:
		return soap_in_PointerTo_ns1__MemberApplyRegistration(soap, NULL, NULL, "ns1:MemberApplyRegistration");
	case SOAP_TYPE_PointerTo_ns1__MemberLogout:
		return soap_in_PointerTo_ns1__MemberLogout(soap, NULL, NULL, "ns1:MemberLogout");
	case SOAP_TYPE_PointerTo_ns1__MemberLogin:
		return soap_in_PointerTo_ns1__MemberLogin(soap, NULL, NULL, "ns1:MemberLogin");
	case SOAP_TYPE_PointerTo_ns1__MemberRemoveMember:
		return soap_in_PointerTo_ns1__MemberRemoveMember(soap, NULL, NULL, "ns1:MemberRemoveMember");
	case SOAP_TYPE_PointerTo_ns1__MemberModifyMember:
		return soap_in_PointerTo_ns1__MemberModifyMember(soap, NULL, NULL, "ns1:MemberModifyMember");
	case SOAP_TYPE_PointerTo_ns1__MemberAddMember:
		return soap_in_PointerTo_ns1__MemberAddMember(soap, NULL, NULL, "ns1:MemberAddMember");
	case SOAP_TYPE_PointerTo_ns1__AdminGetRegisterList:
		return soap_in_PointerTo_ns1__AdminGetRegisterList(soap, NULL, NULL, "ns1:AdminGetRegisterList");
	case SOAP_TYPE_PointerTo_ns1__AdminGetModifyList:
		return soap_in_PointerTo_ns1__AdminGetModifyList(soap, NULL, NULL, "ns1:AdminGetModifyList");
	case SOAP_TYPE_PointerTo_ns1__AdminGetReportFaultList:
		return soap_in_PointerTo_ns1__AdminGetReportFaultList(soap, NULL, NULL, "ns1:AdminGetReportFaultList");
	case SOAP_TYPE_PointerTo_ns1__AdminGetLyricListByID:
		return soap_in_PointerTo_ns1__AdminGetLyricListByID(soap, NULL, NULL, "ns1:AdminGetLyricListByID");
	case SOAP_TYPE_PointerTo_ns1__AdminGetLyricList:
		return soap_in_PointerTo_ns1__AdminGetLyricList(soap, NULL, NULL, "ns1:AdminGetLyricList");
	case SOAP_TYPE_PointerTo_ns1__GetSongID:
		return soap_in_PointerTo_ns1__GetSongID(soap, NULL, NULL, "ns1:GetSongID");
	case SOAP_TYPE_PointerTo_ns1__GetLyric8:
		return soap_in_PointerTo_ns1__GetLyric8(soap, NULL, NULL, "ns1:GetLyric8");
	case SOAP_TYPE_PointerTo_ns1__GetLyric7:
		return soap_in_PointerTo_ns1__GetLyric7(soap, NULL, NULL, "ns1:GetLyric7");
	case SOAP_TYPE_PointerTo_ns1__GetLyric6:
		return soap_in_PointerTo_ns1__GetLyric6(soap, NULL, NULL, "ns1:GetLyric6");
	case SOAP_TYPE_PointerTo_ns1__GetLyric5:
		return soap_in_PointerTo_ns1__GetLyric5(soap, NULL, NULL, "ns1:GetLyric5");
	case SOAP_TYPE_PointerTo_ns1__GetLyric4:
		return soap_in_PointerTo_ns1__GetLyric4(soap, NULL, NULL, "ns1:GetLyric4");
	case SOAP_TYPE_PointerTo_ns1__GetLyric3:
		return soap_in_PointerTo_ns1__GetLyric3(soap, NULL, NULL, "ns1:GetLyric3");
	case SOAP_TYPE_PointerTo_ns1__IsReportedFaultLyric:
		return soap_in_PointerTo_ns1__IsReportedFaultLyric(soap, NULL, NULL, "ns1:IsReportedFaultLyric");
	case SOAP_TYPE_PointerTo_ns1__IsReportedRecommendationLyric:
		return soap_in_PointerTo_ns1__IsReportedRecommendationLyric(soap, NULL, NULL, "ns1:IsReportedRecommendationLyric");
	case SOAP_TYPE_PointerTo_ns1__ReportRecommendationLyric:
		return soap_in_PointerTo_ns1__ReportRecommendationLyric(soap, NULL, NULL, "ns1:ReportRecommendationLyric");
	case SOAP_TYPE_PointerTo_ns1__ReportFaultLyric2:
		return soap_in_PointerTo_ns1__ReportFaultLyric2(soap, NULL, NULL, "ns1:ReportFaultLyric2");
	case SOAP_TYPE_PointerTo_ns1__ReportFaultLyricWithComment:
		return soap_in_PointerTo_ns1__ReportFaultLyricWithComment(soap, NULL, NULL, "ns1:ReportFaultLyricWithComment");
	case SOAP_TYPE_PointerTo_ns1__UploadLyric:
		return soap_in_PointerTo_ns1__UploadLyric(soap, NULL, NULL, "ns1:UploadLyric");
	case SOAP_TYPE_PointerTo_ns1__GetResembleLyric2CountTest:
		return soap_in_PointerTo_ns1__GetResembleLyric2CountTest(soap, NULL, NULL, "ns1:GetResembleLyric2CountTest");
	case SOAP_TYPE_PointerTo_ns1__GetResembleLyric2Count:
		return soap_in_PointerTo_ns1__GetResembleLyric2Count(soap, NULL, NULL, "ns1:GetResembleLyric2Count");
	case SOAP_TYPE_PointerTo_ns1__GetResembleLyric3:
		return soap_in_PointerTo_ns1__GetResembleLyric3(soap, NULL, NULL, "ns1:GetResembleLyric3");
	case SOAP_TYPE_PointerTo_ns1__GetResembleLyric2:
		return soap_in_PointerTo_ns1__GetResembleLyric2(soap, NULL, NULL, "ns1:GetResembleLyric2");
	case SOAP_TYPE_PointerTo_ns1__SetLinkLyric:
		return soap_in_PointerTo_ns1__SetLinkLyric(soap, NULL, NULL, "ns1:SetLinkLyric");
	case SOAP_TYPE_PointerTo_ns1__GetSyncLyricBySearch:
		return soap_in_PointerTo_ns1__GetSyncLyricBySearch(soap, NULL, NULL, "ns1:GetSyncLyricBySearch");
	case SOAP_TYPE_PointerTo_ns1__GetMurekaInfo:
		return soap_in_PointerTo_ns1__GetMurekaInfo(soap, NULL, NULL, "ns1:GetMurekaInfo");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT:
		return soap_in_PointerTons1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, NULL, NULL, "ns1:ArrayOfST_LYRIC_DELETE_RESULT");
	case SOAP_TYPE_PointerTons1__ArrayOfInt:
		return soap_in_PointerTons1__ArrayOfInt(soap, NULL, NULL, "ns1:ArrayOfInt");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR:
		return soap_in_PointerTons1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(soap, NULL, NULL, "ns1:ArrayOfST_LYRIC_FORMONITOR");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_in_PointerToxsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN:
		return soap_in_PointerTons1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(soap, NULL, NULL, "ns1:ArrayOfST_RIGHTSINFO_JPN");
	case SOAP_TYPE_PointerTons1__ST_USCORELYRICINFO:
		return soap_in_PointerTons1__ST_USCORELYRICINFO(soap, NULL, NULL, "ns1:ST_LYRICINFO");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST:
		return soap_in_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(soap, NULL, NULL, "ns1:ArrayOfST_SEARCHLYRIC_LIST");
	case SOAP_TYPE_PointerTons1__UploadForeignLyricInfo:
		return soap_in_PointerTons1__UploadForeignLyricInfo(soap, NULL, NULL, "ns1:UploadForeignLyricInfo");
	case SOAP_TYPE_PointerTons1__ArrayOfGetBroadcastingListReturn:
		return soap_in_PointerTons1__ArrayOfGetBroadcastingListReturn(soap, NULL, NULL, "ns1:ArrayOfGetBroadcastingListReturn");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN:
		return soap_in_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST3_RETURN");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN:
		return soap_in_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST2_RETURN");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN:
		return soap_in_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN:
		return soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(soap, NULL, NULL, "ns1:ST_CAST_GET_EX_METADATA_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, NULL, NULL, "ns1:ST_CAST_GET_EX_METADATA_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, NULL, NULL, "ns1:ST_CAST_REMOVE_EX_METADATA_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(soap, NULL, NULL, "ns1:ST_CAST_UPLOAD_EX_METADATA3_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(soap, NULL, NULL, "ns1:ST_CAST_UPLOAD_EX_METADATA2_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, NULL, NULL, "ns1:ST_CAST_UPLOAD_EX_METADATA_QUERY");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN:
		return soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_GET_ALBA_STATISTIC_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_ALBA_STATISTIC_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN:
		return soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_COUNT_REPORT_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_COUNT_REPORT_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN:
		return soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_COUNT_MODIFY_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_COUNT_MODIFY_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN:
		return soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_COUNT_LYRIC_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN:
		return soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_COUNT_CHECKSUM_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN:
		return soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_COUNT_IN_REGISTER_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_COUNT_IN_REGISTER_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(soap, NULL, NULL, "ns1:ST_REPORT_BLACKLIST_REPORT_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(soap, NULL, NULL, "ns1:ST_ADMIT_MODIFY_LYRIC_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(soap, NULL, NULL, "ns1:ST_DELETE_RECORD_QUERY");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN:
		return soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_GET_MEMBER_LICENSE_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_MEMBER_LICENSE_LIST_QUERY");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN:
		return soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_GET_MEMBER_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_MEMBER_LIST_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(soap, NULL, NULL, "ns1:ST_MODIFY_MEMBER_LICENSE_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(soap, NULL, NULL, "ns1:ST_APPLY_REGISTRATION_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(soap, NULL, NULL, "ns1:ST_MEMBER_LOGOUT_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(soap, NULL, NULL, "ns1:ST_MEMBER_LOGIN_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(soap, NULL, NULL, "ns1:ST_MEMBER_REMOVEMEMBER_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(soap, NULL, NULL, "ns1:ST_MEMBER_MODIFYMEMBER_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(soap, NULL, NULL, "ns1:ST_MEMBER_ADDMEMBER_QUERY");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN:
		return soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_GET_REGISTER_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_REGISTER_LIST_QUERY");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN:
		return soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_GET_MODIFY_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_MODIFY_LIST_QUERY");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN:
		return soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_GET_REPORTFAULT_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN:
		return soap_in_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_GET_LYRIC_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_LYRIC_LIST_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_LYRIC5_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCORERETURN:
		return soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_LYRIC4_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_LYRIC4_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCORERETURN:
		return soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_LYRIC3_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_LYRIC3_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(soap, NULL, NULL, "ns1:ST_IS_REPORTED_FAULT_LYRIC_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, NULL, NULL, "ns1:ST_IS_REPORTED_RECOMMENDATION_LYRIC_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, NULL, NULL, "ns1:ST_REPORT_RECOMMENDATION_LYRIC_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(soap, NULL, NULL, "ns1:ST_REPORT_FAULT_LYRIC2_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(soap, NULL, NULL, "ns1:ST_REPORT_FAULT_LYRIC_WITH_COMMENT_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(soap, NULL, NULL, "ns1:ST_UPLOAD_LYRIC_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN:
		return soap_in_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_RESEMBLELYRIC2_COUNT_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_RESEMBLELYRIC2_COUNT_QUERY");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN:
		return soap_in_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, NULL, NULL, "ns1:ArrayOfST_GET_RESEMBLELYRIC2_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY:
		return soap_in_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(soap, NULL, NULL, "ns1:ST_GET_RESEMBLELYRIC2_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN:
		return soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_LYRIC5_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREMUREKAINFO_USCORESERVICE:
		return soap_in_PointerTons1__ST_USCOREMUREKAINFO_USCORESERVICE(soap, NULL, NULL, "ns1:ST_MUREKAINFO_SERVICE");
	case SOAP_TYPE_PointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT:
		return soap_in_PointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, NULL, NULL, "ns1:ST_LYRIC_DELETE_RESULT");
	case SOAP_TYPE_PointerTons1__ST_USCORELYRIC_USCOREFORMONITOR:
		return soap_in_PointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(soap, NULL, NULL, "ns1:ST_LYRIC_FORMONITOR");
	case SOAP_TYPE_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN:
		return soap_in_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, NULL, NULL, "ns1:ST_RIGHTSINFO_JPN");
	case SOAP_TYPE_PointerTons1__ST_USCORESEARCHLYRIC_USCORELIST:
		return soap_in_PointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(soap, NULL, NULL, "ns1:ST_SEARCHLYRIC_LIST");
	case SOAP_TYPE_PointerTons1__GetBroadcastingListReturn:
		return soap_in_PointerTons1__GetBroadcastingListReturn(soap, NULL, NULL, "ns1:GetBroadcastingListReturn");
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN:
		return soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, NULL, NULL, "ns1:ST_CAST_GET_EX_METADATA_LIST3_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN:
		return soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, NULL, NULL, "ns1:ST_CAST_GET_EX_METADATA_LIST2_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN:
		return soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ST_CAST_GET_EX_METADATA_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN:
		return soap_in_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_ALBA_STATISTIC_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN:
		return soap_in_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_MEMBER_LICENSE_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN:
		return soap_in_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_MEMBER_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN:
		return soap_in_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_REGISTER_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN:
		return soap_in_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_MODIFY_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN:
		return soap_in_PointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_REPORTFAULT_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN:
		return soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_LYRIC_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN:
		return soap_in_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, NULL, NULL, "ns1:ST_GET_RESEMBLELYRIC2_RETURN");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_LYRIC_DELETE_RESULT"))
		{	*type = SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT;
			return soap_in_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfST_LYRIC_DELETE_RESULT"))
		{	*type = SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT;
			return soap_in_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfInt"))
		{	*type = SOAP_TYPE_ns1__ArrayOfInt;
			return soap_in_ns1__ArrayOfInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_LYRIC_FORMONITOR"))
		{	*type = SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREFORMONITOR;
			return soap_in_ns1__ST_USCORELYRIC_USCOREFORMONITOR(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfST_LYRIC_FORMONITOR"))
		{	*type = SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR;
			return soap_in_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfST_RIGHTSINFO_JPN"))
		{	*type = SOAP_TYPE_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN;
			return soap_in_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_RIGHTSINFO_JPN"))
		{	*type = SOAP_TYPE_ns1__ST_USCORERIGHTSINFO_USCOREJPN;
			return soap_in_ns1__ST_USCORERIGHTSINFO_USCOREJPN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_LYRICINFO"))
		{	*type = SOAP_TYPE_ns1__ST_USCORELYRICINFO;
			return soap_in_ns1__ST_USCORELYRICINFO(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_SEARCHLYRIC_LIST"))
		{	*type = SOAP_TYPE_ns1__ST_USCORESEARCHLYRIC_USCORELIST;
			return soap_in_ns1__ST_USCORESEARCHLYRIC_USCORELIST(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfST_SEARCHLYRIC_LIST"))
		{	*type = SOAP_TYPE_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST;
			return soap_in_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:UploadForeignLyricInfo"))
		{	*type = SOAP_TYPE_ns1__UploadForeignLyricInfo;
			return soap_in_ns1__UploadForeignLyricInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetBroadcastingListReturn"))
		{	*type = SOAP_TYPE_ns1__GetBroadcastingListReturn;
			return soap_in_ns1__GetBroadcastingListReturn(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfGetBroadcastingListReturn"))
		{	*type = SOAP_TYPE_ns1__ArrayOfGetBroadcastingListReturn;
			return soap_in_ns1__ArrayOfGetBroadcastingListReturn(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_CAST_GET_EX_METADATA_LIST3_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN;
			return soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST3_RETURN"))
		{	*type = SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN;
			return soap_in_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_CAST_GET_EX_METADATA_LIST2_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN;
			return soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST2_RETURN"))
		{	*type = SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN;
			return soap_in_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_CAST_GET_EX_METADATA_LIST_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN;
			return soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST_RETURN"))
		{	*type = SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN;
			return soap_in_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_CAST_GET_EX_METADATA_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN;
			return soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_CAST_GET_EX_METADATA_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY;
			return soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_CAST_REMOVE_EX_METADATA_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY;
			return soap_in_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_CAST_UPLOAD_EX_METADATA3_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY;
			return soap_in_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_CAST_UPLOAD_EX_METADATA2_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY;
			return soap_in_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_CAST_UPLOAD_EX_METADATA_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY;
			return soap_in_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_ALBA_STATISTIC_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN;
			return soap_in_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfST_GET_ALBA_STATISTIC_RETURN"))
		{	*type = SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN;
			return soap_in_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_ALBA_STATISTIC_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY;
			return soap_in_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_COUNT_REPORT_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN;
			return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_COUNT_REPORT_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY;
			return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_COUNT_MODIFY_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN;
			return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_COUNT_MODIFY_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY;
			return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_COUNT_LYRIC_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN;
			return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_COUNT_CHECKSUM_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN;
			return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_COUNT_IN_REGISTER_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN;
			return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_COUNT_IN_REGISTER_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY;
			return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_REPORT_BLACKLIST_REPORT_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY;
			return soap_in_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_ADMIT_MODIFY_LYRIC_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY;
			return soap_in_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_DELETE_RECORD_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY;
			return soap_in_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_MEMBER_LICENSE_LIST_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN;
			return soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfST_GET_MEMBER_LICENSE_LIST_RETURN"))
		{	*type = SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN;
			return soap_in_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_MEMBER_LICENSE_LIST_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY;
			return soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_MEMBER_LIST_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN;
			return soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfST_GET_MEMBER_LIST_RETURN"))
		{	*type = SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN;
			return soap_in_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_MEMBER_LIST_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY;
			return soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_MODIFY_MEMBER_LICENSE_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY;
			return soap_in_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_APPLY_REGISTRATION_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY;
			return soap_in_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_MEMBER_LOGOUT_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY;
			return soap_in_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_MEMBER_LOGIN_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY;
			return soap_in_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_MEMBER_REMOVEMEMBER_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY;
			return soap_in_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_MEMBER_MODIFYMEMBER_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY;
			return soap_in_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_MEMBER_ADDMEMBER_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY;
			return soap_in_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_REGISTER_LIST_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN;
			return soap_in_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfST_GET_REGISTER_LIST_RETURN"))
		{	*type = SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN;
			return soap_in_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_REGISTER_LIST_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY;
			return soap_in_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_MODIFY_LIST_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN;
			return soap_in_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfST_GET_MODIFY_LIST_RETURN"))
		{	*type = SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN;
			return soap_in_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_MODIFY_LIST_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY;
			return soap_in_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_REPORTFAULT_LIST_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN;
			return soap_in_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfST_GET_REPORTFAULT_LIST_RETURN"))
		{	*type = SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN;
			return soap_in_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_LYRIC_LIST_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN;
			return soap_in_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfST_GET_LYRIC_LIST_RETURN"))
		{	*type = SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN;
			return soap_in_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_LYRIC_LIST_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY;
			return soap_in_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_LYRIC5_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY;
			return soap_in_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_LYRIC4_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN;
			return soap_in_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_LYRIC4_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY;
			return soap_in_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_LYRIC3_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN;
			return soap_in_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_LYRIC3_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY;
			return soap_in_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_IS_REPORTED_FAULT_LYRIC_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY;
			return soap_in_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_IS_REPORTED_RECOMMENDATION_LYRIC_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY;
			return soap_in_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_REPORT_RECOMMENDATION_LYRIC_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY;
			return soap_in_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_REPORT_FAULT_LYRIC2_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY;
			return soap_in_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_REPORT_FAULT_LYRIC_WITH_COMMENT_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY;
			return soap_in_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_UPLOAD_LYRIC_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY;
			return soap_in_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_RESEMBLELYRIC2_COUNT_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN;
			return soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_RESEMBLELYRIC2_COUNT_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY;
			return soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_RESEMBLELYRIC2_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN;
			return soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfST_GET_RESEMBLELYRIC2_RETURN"))
		{	*type = SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN;
			return soap_in_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_RESEMBLELYRIC2_QUERY"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY;
			return soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_GET_LYRIC5_RETURN"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN;
			return soap_in_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ST_MUREKAINFO_SERVICE"))
		{	*type = SOAP_TYPE_ns1__ST_USCOREMUREKAINFO_USCORESERVICE;
			return soap_in_ns1__ST_USCOREMUREKAINFO_USCORESERVICE(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_short;
			return soap_in_short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_xsd__unsignedByte;
			return soap_in_xsd__unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:AdminGetLatestLyricIDResponse"))
		{	*type = SOAP_TYPE__ns1__AdminGetLatestLyricIDResponse;
			return soap_in__ns1__AdminGetLatestLyricIDResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetLatestLyricID"))
		{	*type = SOAP_TYPE__ns1__AdminGetLatestLyricID;
			return soap_in__ns1__AdminGetLatestLyricID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminDeleteLyricsResponse"))
		{	*type = SOAP_TYPE__ns1__AdminDeleteLyricsResponse;
			return soap_in__ns1__AdminDeleteLyricsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminDeleteLyrics"))
		{	*type = SOAP_TYPE__ns1__AdminDeleteLyrics;
			return soap_in__ns1__AdminDeleteLyrics(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetLyricsResponse"))
		{	*type = SOAP_TYPE__ns1__AdminGetLyricsResponse;
			return soap_in__ns1__AdminGetLyricsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetLyrics"))
		{	*type = SOAP_TYPE__ns1__AdminGetLyrics;
			return soap_in__ns1__AdminGetLyrics(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminLoginLyricMonitorResponse"))
		{	*type = SOAP_TYPE__ns1__AdminLoginLyricMonitorResponse;
			return soap_in__ns1__AdminLoginLyricMonitorResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminLoginLyricMonitor"))
		{	*type = SOAP_TYPE__ns1__AdminLoginLyricMonitor;
			return soap_in__ns1__AdminLoginLyricMonitor(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetSearchLyricCountResponse"))
		{	*type = SOAP_TYPE__ns1__GetSearchLyricCountResponse;
			return soap_in__ns1__GetSearchLyricCountResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetSearchLyricCount"))
		{	*type = SOAP_TYPE__ns1__GetSearchLyricCount;
			return soap_in__ns1__GetSearchLyricCount(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminLoginRightsJPNResponse"))
		{	*type = SOAP_TYPE__ns1__AdminLoginRightsJPNResponse;
			return soap_in__ns1__AdminLoginRightsJPNResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminLoginRightsJPN"))
		{	*type = SOAP_TYPE__ns1__AdminLoginRightsJPN;
			return soap_in__ns1__AdminLoginRightsJPN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminJPNSearchRightsInfoListResponse"))
		{	*type = SOAP_TYPE__ns1__AdminJPNSearchRightsInfoListResponse;
			return soap_in__ns1__AdminJPNSearchRightsInfoListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminJPNSearchRightsInfoList"))
		{	*type = SOAP_TYPE__ns1__AdminJPNSearchRightsInfoList;
			return soap_in__ns1__AdminJPNSearchRightsInfoList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminJPNSetRightsInfoResponse"))
		{	*type = SOAP_TYPE__ns1__AdminJPNSetRightsInfoResponse;
			return soap_in__ns1__AdminJPNSetRightsInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminJPNSetRightsInfo"))
		{	*type = SOAP_TYPE__ns1__AdminJPNSetRightsInfo;
			return soap_in__ns1__AdminJPNSetRightsInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminJPNGetRightsInfoByLyricIDResponse"))
		{	*type = SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricIDResponse;
			return soap_in__ns1__AdminJPNGetRightsInfoByLyricIDResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminJPNGetRightsInfoByLyricID"))
		{	*type = SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricID;
			return soap_in__ns1__AdminJPNGetRightsInfoByLyricID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminJPNGetRightsInfoByModifyIDResponse"))
		{	*type = SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyIDResponse;
			return soap_in__ns1__AdminJPNGetRightsInfoByModifyIDResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminJPNGetRightsInfoByModifyID"))
		{	*type = SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyID;
			return soap_in__ns1__AdminJPNGetRightsInfoByModifyID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLyricByID2Response"))
		{	*type = SOAP_TYPE__ns1__GetLyricByID2Response;
			return soap_in__ns1__GetLyricByID2Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLyricByID2"))
		{	*type = SOAP_TYPE__ns1__GetLyricByID2;
			return soap_in__ns1__GetLyricByID2(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLyricByIDResponse"))
		{	*type = SOAP_TYPE__ns1__GetLyricByIDResponse;
			return soap_in__ns1__GetLyricByIDResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLyricByID"))
		{	*type = SOAP_TYPE__ns1__GetLyricByID;
			return soap_in__ns1__GetLyricByID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetResembleLyricList2Response"))
		{	*type = SOAP_TYPE__ns1__GetResembleLyricList2Response;
			return soap_in__ns1__GetResembleLyricList2Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetResembleLyricList2"))
		{	*type = SOAP_TYPE__ns1__GetResembleLyricList2;
			return soap_in__ns1__GetResembleLyricList2(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetResembleLyricListResponse"))
		{	*type = SOAP_TYPE__ns1__GetResembleLyricListResponse;
			return soap_in__ns1__GetResembleLyricListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetResembleLyricList"))
		{	*type = SOAP_TYPE__ns1__GetResembleLyricList;
			return soap_in__ns1__GetResembleLyricList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:UploadForeignLyricResponse"))
		{	*type = SOAP_TYPE__ns1__UploadForeignLyricResponse;
			return soap_in__ns1__UploadForeignLyricResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:UploadForeignLyric"))
		{	*type = SOAP_TYPE__ns1__UploadForeignLyric;
			return soap_in__ns1__UploadForeignLyric(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetBroadcastingList2Response"))
		{	*type = SOAP_TYPE__ns1__GetBroadcastingList2Response;
			return soap_in__ns1__GetBroadcastingList2Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetBroadcastingList2"))
		{	*type = SOAP_TYPE__ns1__GetBroadcastingList2;
			return soap_in__ns1__GetBroadcastingList2(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetBroadcastingListResponse"))
		{	*type = SOAP_TYPE__ns1__GetBroadcastingListResponse;
			return soap_in__ns1__GetBroadcastingListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetBroadcastingList"))
		{	*type = SOAP_TYPE__ns1__GetBroadcastingList;
			return soap_in__ns1__GetBroadcastingList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CastGetExMetaDataList3Response"))
		{	*type = SOAP_TYPE__ns1__CastGetExMetaDataList3Response;
			return soap_in__ns1__CastGetExMetaDataList3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CastGetExMetaDataList3"))
		{	*type = SOAP_TYPE__ns1__CastGetExMetaDataList3;
			return soap_in__ns1__CastGetExMetaDataList3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CastGetExMetaDataList2Response"))
		{	*type = SOAP_TYPE__ns1__CastGetExMetaDataList2Response;
			return soap_in__ns1__CastGetExMetaDataList2Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CastGetExMetaDataList2"))
		{	*type = SOAP_TYPE__ns1__CastGetExMetaDataList2;
			return soap_in__ns1__CastGetExMetaDataList2(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CastGetExMetaDataListResponse"))
		{	*type = SOAP_TYPE__ns1__CastGetExMetaDataListResponse;
			return soap_in__ns1__CastGetExMetaDataListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CastGetExMetaDataList"))
		{	*type = SOAP_TYPE__ns1__CastGetExMetaDataList;
			return soap_in__ns1__CastGetExMetaDataList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CastGetExMetaDataResponse"))
		{	*type = SOAP_TYPE__ns1__CastGetExMetaDataResponse;
			return soap_in__ns1__CastGetExMetaDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CastGetExMetaData"))
		{	*type = SOAP_TYPE__ns1__CastGetExMetaData;
			return soap_in__ns1__CastGetExMetaData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CastRemoveExMetaDataResponse"))
		{	*type = SOAP_TYPE__ns1__CastRemoveExMetaDataResponse;
			return soap_in__ns1__CastRemoveExMetaDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CastRemoveExMetaData"))
		{	*type = SOAP_TYPE__ns1__CastRemoveExMetaData;
			return soap_in__ns1__CastRemoveExMetaData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CastUploadExMetaData3Response"))
		{	*type = SOAP_TYPE__ns1__CastUploadExMetaData3Response;
			return soap_in__ns1__CastUploadExMetaData3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CastUploadExMetaData3"))
		{	*type = SOAP_TYPE__ns1__CastUploadExMetaData3;
			return soap_in__ns1__CastUploadExMetaData3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CastUploadExMetaData2Response"))
		{	*type = SOAP_TYPE__ns1__CastUploadExMetaData2Response;
			return soap_in__ns1__CastUploadExMetaData2Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CastUploadExMetaData2"))
		{	*type = SOAP_TYPE__ns1__CastUploadExMetaData2;
			return soap_in__ns1__CastUploadExMetaData2(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CastUploadExMetaDataResponse"))
		{	*type = SOAP_TYPE__ns1__CastUploadExMetaDataResponse;
			return soap_in__ns1__CastUploadExMetaDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CastUploadExMetaData"))
		{	*type = SOAP_TYPE__ns1__CastUploadExMetaData;
			return soap_in__ns1__CastUploadExMetaData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetAlbaStatisticResponse"))
		{	*type = SOAP_TYPE__ns1__AdminGetAlbaStatisticResponse;
			return soap_in__ns1__AdminGetAlbaStatisticResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetAlbaStatistic"))
		{	*type = SOAP_TYPE__ns1__AdminGetAlbaStatistic;
			return soap_in__ns1__AdminGetAlbaStatistic(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetCountReportResponse"))
		{	*type = SOAP_TYPE__ns1__AdminGetCountReportResponse;
			return soap_in__ns1__AdminGetCountReportResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetCountReport"))
		{	*type = SOAP_TYPE__ns1__AdminGetCountReport;
			return soap_in__ns1__AdminGetCountReport(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetCountModifyResponse"))
		{	*type = SOAP_TYPE__ns1__AdminGetCountModifyResponse;
			return soap_in__ns1__AdminGetCountModifyResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetCountModify"))
		{	*type = SOAP_TYPE__ns1__AdminGetCountModify;
			return soap_in__ns1__AdminGetCountModify(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetCountLyricResponse"))
		{	*type = SOAP_TYPE__ns1__AdminGetCountLyricResponse;
			return soap_in__ns1__AdminGetCountLyricResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetCountLyric"))
		{	*type = SOAP_TYPE__ns1__AdminGetCountLyric;
			return soap_in__ns1__AdminGetCountLyric(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetCountChecksumResponse"))
		{	*type = SOAP_TYPE__ns1__AdminGetCountChecksumResponse;
			return soap_in__ns1__AdminGetCountChecksumResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetCountChecksum"))
		{	*type = SOAP_TYPE__ns1__AdminGetCountChecksum;
			return soap_in__ns1__AdminGetCountChecksum(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetCountInRegisterResponse"))
		{	*type = SOAP_TYPE__ns1__AdminGetCountInRegisterResponse;
			return soap_in__ns1__AdminGetCountInRegisterResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetCountInRegister"))
		{	*type = SOAP_TYPE__ns1__AdminGetCountInRegister;
			return soap_in__ns1__AdminGetCountInRegister(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminReportBlackListResponse"))
		{	*type = SOAP_TYPE__ns1__AdminReportBlackListResponse;
			return soap_in__ns1__AdminReportBlackListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminReportBlackList"))
		{	*type = SOAP_TYPE__ns1__AdminReportBlackList;
			return soap_in__ns1__AdminReportBlackList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminAdmitModifyLyricResponse"))
		{	*type = SOAP_TYPE__ns1__AdminAdmitModifyLyricResponse;
			return soap_in__ns1__AdminAdmitModifyLyricResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminAdmitModifyLyric"))
		{	*type = SOAP_TYPE__ns1__AdminAdmitModifyLyric;
			return soap_in__ns1__AdminAdmitModifyLyric(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminDeleteRecordResponse"))
		{	*type = SOAP_TYPE__ns1__AdminDeleteRecordResponse;
			return soap_in__ns1__AdminDeleteRecordResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminDeleteRecord"))
		{	*type = SOAP_TYPE__ns1__AdminDeleteRecord;
			return soap_in__ns1__AdminDeleteRecord(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MemberGetMemberLicenseListResponse"))
		{	*type = SOAP_TYPE__ns1__MemberGetMemberLicenseListResponse;
			return soap_in__ns1__MemberGetMemberLicenseListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MemberGetMemberLicenseList"))
		{	*type = SOAP_TYPE__ns1__MemberGetMemberLicenseList;
			return soap_in__ns1__MemberGetMemberLicenseList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MemberGetMemberListResponse"))
		{	*type = SOAP_TYPE__ns1__MemberGetMemberListResponse;
			return soap_in__ns1__MemberGetMemberListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MemberGetMemberList"))
		{	*type = SOAP_TYPE__ns1__MemberGetMemberList;
			return soap_in__ns1__MemberGetMemberList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MemberModifyMemberLicenseResponse"))
		{	*type = SOAP_TYPE__ns1__MemberModifyMemberLicenseResponse;
			return soap_in__ns1__MemberModifyMemberLicenseResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MemberModifyMemberLicense"))
		{	*type = SOAP_TYPE__ns1__MemberModifyMemberLicense;
			return soap_in__ns1__MemberModifyMemberLicense(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MemberApplyRegistrationResponse"))
		{	*type = SOAP_TYPE__ns1__MemberApplyRegistrationResponse;
			return soap_in__ns1__MemberApplyRegistrationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MemberApplyRegistration"))
		{	*type = SOAP_TYPE__ns1__MemberApplyRegistration;
			return soap_in__ns1__MemberApplyRegistration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MemberLogoutResponse"))
		{	*type = SOAP_TYPE__ns1__MemberLogoutResponse;
			return soap_in__ns1__MemberLogoutResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MemberLogout"))
		{	*type = SOAP_TYPE__ns1__MemberLogout;
			return soap_in__ns1__MemberLogout(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MemberLoginResponse"))
		{	*type = SOAP_TYPE__ns1__MemberLoginResponse;
			return soap_in__ns1__MemberLoginResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MemberLogin"))
		{	*type = SOAP_TYPE__ns1__MemberLogin;
			return soap_in__ns1__MemberLogin(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MemberRemoveMemberResponse"))
		{	*type = SOAP_TYPE__ns1__MemberRemoveMemberResponse;
			return soap_in__ns1__MemberRemoveMemberResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MemberRemoveMember"))
		{	*type = SOAP_TYPE__ns1__MemberRemoveMember;
			return soap_in__ns1__MemberRemoveMember(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MemberModifyMemberResponse"))
		{	*type = SOAP_TYPE__ns1__MemberModifyMemberResponse;
			return soap_in__ns1__MemberModifyMemberResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MemberModifyMember"))
		{	*type = SOAP_TYPE__ns1__MemberModifyMember;
			return soap_in__ns1__MemberModifyMember(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MemberAddMemberResponse"))
		{	*type = SOAP_TYPE__ns1__MemberAddMemberResponse;
			return soap_in__ns1__MemberAddMemberResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MemberAddMember"))
		{	*type = SOAP_TYPE__ns1__MemberAddMember;
			return soap_in__ns1__MemberAddMember(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetRegisterListResponse"))
		{	*type = SOAP_TYPE__ns1__AdminGetRegisterListResponse;
			return soap_in__ns1__AdminGetRegisterListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetRegisterList"))
		{	*type = SOAP_TYPE__ns1__AdminGetRegisterList;
			return soap_in__ns1__AdminGetRegisterList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetModifyListResponse"))
		{	*type = SOAP_TYPE__ns1__AdminGetModifyListResponse;
			return soap_in__ns1__AdminGetModifyListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetModifyList"))
		{	*type = SOAP_TYPE__ns1__AdminGetModifyList;
			return soap_in__ns1__AdminGetModifyList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetReportFaultListResponse"))
		{	*type = SOAP_TYPE__ns1__AdminGetReportFaultListResponse;
			return soap_in__ns1__AdminGetReportFaultListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetReportFaultList"))
		{	*type = SOAP_TYPE__ns1__AdminGetReportFaultList;
			return soap_in__ns1__AdminGetReportFaultList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetLyricListByIDResponse"))
		{	*type = SOAP_TYPE__ns1__AdminGetLyricListByIDResponse;
			return soap_in__ns1__AdminGetLyricListByIDResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetLyricListByID"))
		{	*type = SOAP_TYPE__ns1__AdminGetLyricListByID;
			return soap_in__ns1__AdminGetLyricListByID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetLyricListResponse"))
		{	*type = SOAP_TYPE__ns1__AdminGetLyricListResponse;
			return soap_in__ns1__AdminGetLyricListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AdminGetLyricList"))
		{	*type = SOAP_TYPE__ns1__AdminGetLyricList;
			return soap_in__ns1__AdminGetLyricList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetSongIDResponse"))
		{	*type = SOAP_TYPE__ns1__GetSongIDResponse;
			return soap_in__ns1__GetSongIDResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetSongID"))
		{	*type = SOAP_TYPE__ns1__GetSongID;
			return soap_in__ns1__GetSongID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLyric8Response"))
		{	*type = SOAP_TYPE__ns1__GetLyric8Response;
			return soap_in__ns1__GetLyric8Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLyric8"))
		{	*type = SOAP_TYPE__ns1__GetLyric8;
			return soap_in__ns1__GetLyric8(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLyric7Response"))
		{	*type = SOAP_TYPE__ns1__GetLyric7Response;
			return soap_in__ns1__GetLyric7Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLyric7"))
		{	*type = SOAP_TYPE__ns1__GetLyric7;
			return soap_in__ns1__GetLyric7(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLyric6Response"))
		{	*type = SOAP_TYPE__ns1__GetLyric6Response;
			return soap_in__ns1__GetLyric6Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLyric6"))
		{	*type = SOAP_TYPE__ns1__GetLyric6;
			return soap_in__ns1__GetLyric6(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLyric5Response"))
		{	*type = SOAP_TYPE__ns1__GetLyric5Response;
			return soap_in__ns1__GetLyric5Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLyric5"))
		{	*type = SOAP_TYPE__ns1__GetLyric5;
			return soap_in__ns1__GetLyric5(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLyric4Response"))
		{	*type = SOAP_TYPE__ns1__GetLyric4Response;
			return soap_in__ns1__GetLyric4Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLyric4"))
		{	*type = SOAP_TYPE__ns1__GetLyric4;
			return soap_in__ns1__GetLyric4(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLyric3Response"))
		{	*type = SOAP_TYPE__ns1__GetLyric3Response;
			return soap_in__ns1__GetLyric3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLyric3"))
		{	*type = SOAP_TYPE__ns1__GetLyric3;
			return soap_in__ns1__GetLyric3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:IsReportedFaultLyricResponse"))
		{	*type = SOAP_TYPE__ns1__IsReportedFaultLyricResponse;
			return soap_in__ns1__IsReportedFaultLyricResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:IsReportedFaultLyric"))
		{	*type = SOAP_TYPE__ns1__IsReportedFaultLyric;
			return soap_in__ns1__IsReportedFaultLyric(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:IsReportedRecommendationLyricResponse"))
		{	*type = SOAP_TYPE__ns1__IsReportedRecommendationLyricResponse;
			return soap_in__ns1__IsReportedRecommendationLyricResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:IsReportedRecommendationLyric"))
		{	*type = SOAP_TYPE__ns1__IsReportedRecommendationLyric;
			return soap_in__ns1__IsReportedRecommendationLyric(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ReportRecommendationLyricResponse"))
		{	*type = SOAP_TYPE__ns1__ReportRecommendationLyricResponse;
			return soap_in__ns1__ReportRecommendationLyricResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ReportRecommendationLyric"))
		{	*type = SOAP_TYPE__ns1__ReportRecommendationLyric;
			return soap_in__ns1__ReportRecommendationLyric(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ReportFaultLyric2Response"))
		{	*type = SOAP_TYPE__ns1__ReportFaultLyric2Response;
			return soap_in__ns1__ReportFaultLyric2Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ReportFaultLyric2"))
		{	*type = SOAP_TYPE__ns1__ReportFaultLyric2;
			return soap_in__ns1__ReportFaultLyric2(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ReportFaultLyricWithCommentResponse"))
		{	*type = SOAP_TYPE__ns1__ReportFaultLyricWithCommentResponse;
			return soap_in__ns1__ReportFaultLyricWithCommentResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ReportFaultLyricWithComment"))
		{	*type = SOAP_TYPE__ns1__ReportFaultLyricWithComment;
			return soap_in__ns1__ReportFaultLyricWithComment(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:UploadLyricResponse"))
		{	*type = SOAP_TYPE__ns1__UploadLyricResponse;
			return soap_in__ns1__UploadLyricResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:UploadLyric"))
		{	*type = SOAP_TYPE__ns1__UploadLyric;
			return soap_in__ns1__UploadLyric(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetResembleLyric2CountTestResponse"))
		{	*type = SOAP_TYPE__ns1__GetResembleLyric2CountTestResponse;
			return soap_in__ns1__GetResembleLyric2CountTestResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetResembleLyric2CountTest"))
		{	*type = SOAP_TYPE__ns1__GetResembleLyric2CountTest;
			return soap_in__ns1__GetResembleLyric2CountTest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetResembleLyric2CountResponse"))
		{	*type = SOAP_TYPE__ns1__GetResembleLyric2CountResponse;
			return soap_in__ns1__GetResembleLyric2CountResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetResembleLyric2Count"))
		{	*type = SOAP_TYPE__ns1__GetResembleLyric2Count;
			return soap_in__ns1__GetResembleLyric2Count(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetResembleLyric3Response"))
		{	*type = SOAP_TYPE__ns1__GetResembleLyric3Response;
			return soap_in__ns1__GetResembleLyric3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetResembleLyric3"))
		{	*type = SOAP_TYPE__ns1__GetResembleLyric3;
			return soap_in__ns1__GetResembleLyric3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetResembleLyric2Response"))
		{	*type = SOAP_TYPE__ns1__GetResembleLyric2Response;
			return soap_in__ns1__GetResembleLyric2Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetResembleLyric2"))
		{	*type = SOAP_TYPE__ns1__GetResembleLyric2;
			return soap_in__ns1__GetResembleLyric2(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetLinkLyricResponse"))
		{	*type = SOAP_TYPE__ns1__SetLinkLyricResponse;
			return soap_in__ns1__SetLinkLyricResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetLinkLyric"))
		{	*type = SOAP_TYPE__ns1__SetLinkLyric;
			return soap_in__ns1__SetLinkLyric(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetSyncLyricBySearchResponse"))
		{	*type = SOAP_TYPE__ns1__GetSyncLyricBySearchResponse;
			return soap_in__ns1__GetSyncLyricBySearchResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetSyncLyricBySearch"))
		{	*type = SOAP_TYPE__ns1__GetSyncLyricBySearch;
			return soap_in__ns1__GetSyncLyricBySearch(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetMurekaInfoResponse"))
		{	*type = SOAP_TYPE__ns1__GetMurekaInfoResponse;
			return soap_in__ns1__GetMurekaInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetMurekaInfo"))
		{	*type = SOAP_TYPE__ns1__GetMurekaInfo;
			return soap_in__ns1__GetMurekaInfo(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_out_short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_out_xsd__unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__ns1__AdminGetLatestLyricIDResponse:
		return ((_ns1__AdminGetLatestLyricIDResponse *)ptr)->soap_out(soap, "ns1:AdminGetLatestLyricIDResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminGetLatestLyricID:
		return ((_ns1__AdminGetLatestLyricID *)ptr)->soap_out(soap, "ns1:AdminGetLatestLyricID", id, NULL);
	case SOAP_TYPE__ns1__AdminDeleteLyricsResponse:
		return ((_ns1__AdminDeleteLyricsResponse *)ptr)->soap_out(soap, "ns1:AdminDeleteLyricsResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminDeleteLyrics:
		return ((_ns1__AdminDeleteLyrics *)ptr)->soap_out(soap, "ns1:AdminDeleteLyrics", id, NULL);
	case SOAP_TYPE__ns1__AdminGetLyricsResponse:
		return ((_ns1__AdminGetLyricsResponse *)ptr)->soap_out(soap, "ns1:AdminGetLyricsResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminGetLyrics:
		return ((_ns1__AdminGetLyrics *)ptr)->soap_out(soap, "ns1:AdminGetLyrics", id, NULL);
	case SOAP_TYPE__ns1__AdminLoginLyricMonitorResponse:
		return ((_ns1__AdminLoginLyricMonitorResponse *)ptr)->soap_out(soap, "ns1:AdminLoginLyricMonitorResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminLoginLyricMonitor:
		return ((_ns1__AdminLoginLyricMonitor *)ptr)->soap_out(soap, "ns1:AdminLoginLyricMonitor", id, NULL);
	case SOAP_TYPE__ns1__GetSearchLyricCountResponse:
		return ((_ns1__GetSearchLyricCountResponse *)ptr)->soap_out(soap, "ns1:GetSearchLyricCountResponse", id, NULL);
	case SOAP_TYPE__ns1__GetSearchLyricCount:
		return ((_ns1__GetSearchLyricCount *)ptr)->soap_out(soap, "ns1:GetSearchLyricCount", id, NULL);
	case SOAP_TYPE__ns1__AdminLoginRightsJPNResponse:
		return ((_ns1__AdminLoginRightsJPNResponse *)ptr)->soap_out(soap, "ns1:AdminLoginRightsJPNResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminLoginRightsJPN:
		return ((_ns1__AdminLoginRightsJPN *)ptr)->soap_out(soap, "ns1:AdminLoginRightsJPN", id, NULL);
	case SOAP_TYPE__ns1__AdminJPNSearchRightsInfoListResponse:
		return ((_ns1__AdminJPNSearchRightsInfoListResponse *)ptr)->soap_out(soap, "ns1:AdminJPNSearchRightsInfoListResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminJPNSearchRightsInfoList:
		return ((_ns1__AdminJPNSearchRightsInfoList *)ptr)->soap_out(soap, "ns1:AdminJPNSearchRightsInfoList", id, NULL);
	case SOAP_TYPE__ns1__AdminJPNSetRightsInfoResponse:
		return ((_ns1__AdminJPNSetRightsInfoResponse *)ptr)->soap_out(soap, "ns1:AdminJPNSetRightsInfoResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminJPNSetRightsInfo:
		return ((_ns1__AdminJPNSetRightsInfo *)ptr)->soap_out(soap, "ns1:AdminJPNSetRightsInfo", id, NULL);
	case SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricIDResponse:
		return ((_ns1__AdminJPNGetRightsInfoByLyricIDResponse *)ptr)->soap_out(soap, "ns1:AdminJPNGetRightsInfoByLyricIDResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricID:
		return ((_ns1__AdminJPNGetRightsInfoByLyricID *)ptr)->soap_out(soap, "ns1:AdminJPNGetRightsInfoByLyricID", id, NULL);
	case SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyIDResponse:
		return ((_ns1__AdminJPNGetRightsInfoByModifyIDResponse *)ptr)->soap_out(soap, "ns1:AdminJPNGetRightsInfoByModifyIDResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyID:
		return ((_ns1__AdminJPNGetRightsInfoByModifyID *)ptr)->soap_out(soap, "ns1:AdminJPNGetRightsInfoByModifyID", id, NULL);
	case SOAP_TYPE__ns1__GetLyricByID2Response:
		return ((_ns1__GetLyricByID2Response *)ptr)->soap_out(soap, "ns1:GetLyricByID2Response", id, NULL);
	case SOAP_TYPE__ns1__GetLyricByID2:
		return ((_ns1__GetLyricByID2 *)ptr)->soap_out(soap, "ns1:GetLyricByID2", id, NULL);
	case SOAP_TYPE__ns1__GetLyricByIDResponse:
		return ((_ns1__GetLyricByIDResponse *)ptr)->soap_out(soap, "ns1:GetLyricByIDResponse", id, NULL);
	case SOAP_TYPE__ns1__GetLyricByID:
		return ((_ns1__GetLyricByID *)ptr)->soap_out(soap, "ns1:GetLyricByID", id, NULL);
	case SOAP_TYPE__ns1__GetResembleLyricList2Response:
		return ((_ns1__GetResembleLyricList2Response *)ptr)->soap_out(soap, "ns1:GetResembleLyricList2Response", id, NULL);
	case SOAP_TYPE__ns1__GetResembleLyricList2:
		return ((_ns1__GetResembleLyricList2 *)ptr)->soap_out(soap, "ns1:GetResembleLyricList2", id, NULL);
	case SOAP_TYPE__ns1__GetResembleLyricListResponse:
		return ((_ns1__GetResembleLyricListResponse *)ptr)->soap_out(soap, "ns1:GetResembleLyricListResponse", id, NULL);
	case SOAP_TYPE__ns1__GetResembleLyricList:
		return ((_ns1__GetResembleLyricList *)ptr)->soap_out(soap, "ns1:GetResembleLyricList", id, NULL);
	case SOAP_TYPE__ns1__UploadForeignLyricResponse:
		return ((_ns1__UploadForeignLyricResponse *)ptr)->soap_out(soap, "ns1:UploadForeignLyricResponse", id, NULL);
	case SOAP_TYPE__ns1__UploadForeignLyric:
		return ((_ns1__UploadForeignLyric *)ptr)->soap_out(soap, "ns1:UploadForeignLyric", id, NULL);
	case SOAP_TYPE__ns1__GetBroadcastingList2Response:
		return ((_ns1__GetBroadcastingList2Response *)ptr)->soap_out(soap, "ns1:GetBroadcastingList2Response", id, NULL);
	case SOAP_TYPE__ns1__GetBroadcastingList2:
		return ((_ns1__GetBroadcastingList2 *)ptr)->soap_out(soap, "ns1:GetBroadcastingList2", id, NULL);
	case SOAP_TYPE__ns1__GetBroadcastingListResponse:
		return ((_ns1__GetBroadcastingListResponse *)ptr)->soap_out(soap, "ns1:GetBroadcastingListResponse", id, NULL);
	case SOAP_TYPE__ns1__GetBroadcastingList:
		return ((_ns1__GetBroadcastingList *)ptr)->soap_out(soap, "ns1:GetBroadcastingList", id, NULL);
	case SOAP_TYPE__ns1__CastGetExMetaDataList3Response:
		return ((_ns1__CastGetExMetaDataList3Response *)ptr)->soap_out(soap, "ns1:CastGetExMetaDataList3Response", id, NULL);
	case SOAP_TYPE__ns1__CastGetExMetaDataList3:
		return ((_ns1__CastGetExMetaDataList3 *)ptr)->soap_out(soap, "ns1:CastGetExMetaDataList3", id, NULL);
	case SOAP_TYPE__ns1__CastGetExMetaDataList2Response:
		return ((_ns1__CastGetExMetaDataList2Response *)ptr)->soap_out(soap, "ns1:CastGetExMetaDataList2Response", id, NULL);
	case SOAP_TYPE__ns1__CastGetExMetaDataList2:
		return ((_ns1__CastGetExMetaDataList2 *)ptr)->soap_out(soap, "ns1:CastGetExMetaDataList2", id, NULL);
	case SOAP_TYPE__ns1__CastGetExMetaDataListResponse:
		return ((_ns1__CastGetExMetaDataListResponse *)ptr)->soap_out(soap, "ns1:CastGetExMetaDataListResponse", id, NULL);
	case SOAP_TYPE__ns1__CastGetExMetaDataList:
		return ((_ns1__CastGetExMetaDataList *)ptr)->soap_out(soap, "ns1:CastGetExMetaDataList", id, NULL);
	case SOAP_TYPE__ns1__CastGetExMetaDataResponse:
		return ((_ns1__CastGetExMetaDataResponse *)ptr)->soap_out(soap, "ns1:CastGetExMetaDataResponse", id, NULL);
	case SOAP_TYPE__ns1__CastGetExMetaData:
		return ((_ns1__CastGetExMetaData *)ptr)->soap_out(soap, "ns1:CastGetExMetaData", id, NULL);
	case SOAP_TYPE__ns1__CastRemoveExMetaDataResponse:
		return ((_ns1__CastRemoveExMetaDataResponse *)ptr)->soap_out(soap, "ns1:CastRemoveExMetaDataResponse", id, NULL);
	case SOAP_TYPE__ns1__CastRemoveExMetaData:
		return ((_ns1__CastRemoveExMetaData *)ptr)->soap_out(soap, "ns1:CastRemoveExMetaData", id, NULL);
	case SOAP_TYPE__ns1__CastUploadExMetaData3Response:
		return ((_ns1__CastUploadExMetaData3Response *)ptr)->soap_out(soap, "ns1:CastUploadExMetaData3Response", id, NULL);
	case SOAP_TYPE__ns1__CastUploadExMetaData3:
		return ((_ns1__CastUploadExMetaData3 *)ptr)->soap_out(soap, "ns1:CastUploadExMetaData3", id, NULL);
	case SOAP_TYPE__ns1__CastUploadExMetaData2Response:
		return ((_ns1__CastUploadExMetaData2Response *)ptr)->soap_out(soap, "ns1:CastUploadExMetaData2Response", id, NULL);
	case SOAP_TYPE__ns1__CastUploadExMetaData2:
		return ((_ns1__CastUploadExMetaData2 *)ptr)->soap_out(soap, "ns1:CastUploadExMetaData2", id, NULL);
	case SOAP_TYPE__ns1__CastUploadExMetaDataResponse:
		return ((_ns1__CastUploadExMetaDataResponse *)ptr)->soap_out(soap, "ns1:CastUploadExMetaDataResponse", id, NULL);
	case SOAP_TYPE__ns1__CastUploadExMetaData:
		return ((_ns1__CastUploadExMetaData *)ptr)->soap_out(soap, "ns1:CastUploadExMetaData", id, NULL);
	case SOAP_TYPE__ns1__AdminGetAlbaStatisticResponse:
		return ((_ns1__AdminGetAlbaStatisticResponse *)ptr)->soap_out(soap, "ns1:AdminGetAlbaStatisticResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminGetAlbaStatistic:
		return ((_ns1__AdminGetAlbaStatistic *)ptr)->soap_out(soap, "ns1:AdminGetAlbaStatistic", id, NULL);
	case SOAP_TYPE__ns1__AdminGetCountReportResponse:
		return ((_ns1__AdminGetCountReportResponse *)ptr)->soap_out(soap, "ns1:AdminGetCountReportResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminGetCountReport:
		return ((_ns1__AdminGetCountReport *)ptr)->soap_out(soap, "ns1:AdminGetCountReport", id, NULL);
	case SOAP_TYPE__ns1__AdminGetCountModifyResponse:
		return ((_ns1__AdminGetCountModifyResponse *)ptr)->soap_out(soap, "ns1:AdminGetCountModifyResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminGetCountModify:
		return ((_ns1__AdminGetCountModify *)ptr)->soap_out(soap, "ns1:AdminGetCountModify", id, NULL);
	case SOAP_TYPE__ns1__AdminGetCountLyricResponse:
		return ((_ns1__AdminGetCountLyricResponse *)ptr)->soap_out(soap, "ns1:AdminGetCountLyricResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminGetCountLyric:
		return ((_ns1__AdminGetCountLyric *)ptr)->soap_out(soap, "ns1:AdminGetCountLyric", id, NULL);
	case SOAP_TYPE__ns1__AdminGetCountChecksumResponse:
		return ((_ns1__AdminGetCountChecksumResponse *)ptr)->soap_out(soap, "ns1:AdminGetCountChecksumResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminGetCountChecksum:
		return ((_ns1__AdminGetCountChecksum *)ptr)->soap_out(soap, "ns1:AdminGetCountChecksum", id, NULL);
	case SOAP_TYPE__ns1__AdminGetCountInRegisterResponse:
		return ((_ns1__AdminGetCountInRegisterResponse *)ptr)->soap_out(soap, "ns1:AdminGetCountInRegisterResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminGetCountInRegister:
		return ((_ns1__AdminGetCountInRegister *)ptr)->soap_out(soap, "ns1:AdminGetCountInRegister", id, NULL);
	case SOAP_TYPE__ns1__AdminReportBlackListResponse:
		return ((_ns1__AdminReportBlackListResponse *)ptr)->soap_out(soap, "ns1:AdminReportBlackListResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminReportBlackList:
		return ((_ns1__AdminReportBlackList *)ptr)->soap_out(soap, "ns1:AdminReportBlackList", id, NULL);
	case SOAP_TYPE__ns1__AdminAdmitModifyLyricResponse:
		return ((_ns1__AdminAdmitModifyLyricResponse *)ptr)->soap_out(soap, "ns1:AdminAdmitModifyLyricResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminAdmitModifyLyric:
		return ((_ns1__AdminAdmitModifyLyric *)ptr)->soap_out(soap, "ns1:AdminAdmitModifyLyric", id, NULL);
	case SOAP_TYPE__ns1__AdminDeleteRecordResponse:
		return ((_ns1__AdminDeleteRecordResponse *)ptr)->soap_out(soap, "ns1:AdminDeleteRecordResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminDeleteRecord:
		return ((_ns1__AdminDeleteRecord *)ptr)->soap_out(soap, "ns1:AdminDeleteRecord", id, NULL);
	case SOAP_TYPE__ns1__MemberGetMemberLicenseListResponse:
		return ((_ns1__MemberGetMemberLicenseListResponse *)ptr)->soap_out(soap, "ns1:MemberGetMemberLicenseListResponse", id, NULL);
	case SOAP_TYPE__ns1__MemberGetMemberLicenseList:
		return ((_ns1__MemberGetMemberLicenseList *)ptr)->soap_out(soap, "ns1:MemberGetMemberLicenseList", id, NULL);
	case SOAP_TYPE__ns1__MemberGetMemberListResponse:
		return ((_ns1__MemberGetMemberListResponse *)ptr)->soap_out(soap, "ns1:MemberGetMemberListResponse", id, NULL);
	case SOAP_TYPE__ns1__MemberGetMemberList:
		return ((_ns1__MemberGetMemberList *)ptr)->soap_out(soap, "ns1:MemberGetMemberList", id, NULL);
	case SOAP_TYPE__ns1__MemberModifyMemberLicenseResponse:
		return ((_ns1__MemberModifyMemberLicenseResponse *)ptr)->soap_out(soap, "ns1:MemberModifyMemberLicenseResponse", id, NULL);
	case SOAP_TYPE__ns1__MemberModifyMemberLicense:
		return ((_ns1__MemberModifyMemberLicense *)ptr)->soap_out(soap, "ns1:MemberModifyMemberLicense", id, NULL);
	case SOAP_TYPE__ns1__MemberApplyRegistrationResponse:
		return ((_ns1__MemberApplyRegistrationResponse *)ptr)->soap_out(soap, "ns1:MemberApplyRegistrationResponse", id, NULL);
	case SOAP_TYPE__ns1__MemberApplyRegistration:
		return ((_ns1__MemberApplyRegistration *)ptr)->soap_out(soap, "ns1:MemberApplyRegistration", id, NULL);
	case SOAP_TYPE__ns1__MemberLogoutResponse:
		return ((_ns1__MemberLogoutResponse *)ptr)->soap_out(soap, "ns1:MemberLogoutResponse", id, NULL);
	case SOAP_TYPE__ns1__MemberLogout:
		return ((_ns1__MemberLogout *)ptr)->soap_out(soap, "ns1:MemberLogout", id, NULL);
	case SOAP_TYPE__ns1__MemberLoginResponse:
		return ((_ns1__MemberLoginResponse *)ptr)->soap_out(soap, "ns1:MemberLoginResponse", id, NULL);
	case SOAP_TYPE__ns1__MemberLogin:
		return ((_ns1__MemberLogin *)ptr)->soap_out(soap, "ns1:MemberLogin", id, NULL);
	case SOAP_TYPE__ns1__MemberRemoveMemberResponse:
		return ((_ns1__MemberRemoveMemberResponse *)ptr)->soap_out(soap, "ns1:MemberRemoveMemberResponse", id, NULL);
	case SOAP_TYPE__ns1__MemberRemoveMember:
		return ((_ns1__MemberRemoveMember *)ptr)->soap_out(soap, "ns1:MemberRemoveMember", id, NULL);
	case SOAP_TYPE__ns1__MemberModifyMemberResponse:
		return ((_ns1__MemberModifyMemberResponse *)ptr)->soap_out(soap, "ns1:MemberModifyMemberResponse", id, NULL);
	case SOAP_TYPE__ns1__MemberModifyMember:
		return ((_ns1__MemberModifyMember *)ptr)->soap_out(soap, "ns1:MemberModifyMember", id, NULL);
	case SOAP_TYPE__ns1__MemberAddMemberResponse:
		return ((_ns1__MemberAddMemberResponse *)ptr)->soap_out(soap, "ns1:MemberAddMemberResponse", id, NULL);
	case SOAP_TYPE__ns1__MemberAddMember:
		return ((_ns1__MemberAddMember *)ptr)->soap_out(soap, "ns1:MemberAddMember", id, NULL);
	case SOAP_TYPE__ns1__AdminGetRegisterListResponse:
		return ((_ns1__AdminGetRegisterListResponse *)ptr)->soap_out(soap, "ns1:AdminGetRegisterListResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminGetRegisterList:
		return ((_ns1__AdminGetRegisterList *)ptr)->soap_out(soap, "ns1:AdminGetRegisterList", id, NULL);
	case SOAP_TYPE__ns1__AdminGetModifyListResponse:
		return ((_ns1__AdminGetModifyListResponse *)ptr)->soap_out(soap, "ns1:AdminGetModifyListResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminGetModifyList:
		return ((_ns1__AdminGetModifyList *)ptr)->soap_out(soap, "ns1:AdminGetModifyList", id, NULL);
	case SOAP_TYPE__ns1__AdminGetReportFaultListResponse:
		return ((_ns1__AdminGetReportFaultListResponse *)ptr)->soap_out(soap, "ns1:AdminGetReportFaultListResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminGetReportFaultList:
		return ((_ns1__AdminGetReportFaultList *)ptr)->soap_out(soap, "ns1:AdminGetReportFaultList", id, NULL);
	case SOAP_TYPE__ns1__AdminGetLyricListByIDResponse:
		return ((_ns1__AdminGetLyricListByIDResponse *)ptr)->soap_out(soap, "ns1:AdminGetLyricListByIDResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminGetLyricListByID:
		return ((_ns1__AdminGetLyricListByID *)ptr)->soap_out(soap, "ns1:AdminGetLyricListByID", id, NULL);
	case SOAP_TYPE__ns1__AdminGetLyricListResponse:
		return ((_ns1__AdminGetLyricListResponse *)ptr)->soap_out(soap, "ns1:AdminGetLyricListResponse", id, NULL);
	case SOAP_TYPE__ns1__AdminGetLyricList:
		return ((_ns1__AdminGetLyricList *)ptr)->soap_out(soap, "ns1:AdminGetLyricList", id, NULL);
	case SOAP_TYPE__ns1__GetSongIDResponse:
		return ((_ns1__GetSongIDResponse *)ptr)->soap_out(soap, "ns1:GetSongIDResponse", id, NULL);
	case SOAP_TYPE__ns1__GetSongID:
		return ((_ns1__GetSongID *)ptr)->soap_out(soap, "ns1:GetSongID", id, NULL);
	case SOAP_TYPE__ns1__GetLyric8Response:
		return ((_ns1__GetLyric8Response *)ptr)->soap_out(soap, "ns1:GetLyric8Response", id, NULL);
	case SOAP_TYPE__ns1__GetLyric8:
		return ((_ns1__GetLyric8 *)ptr)->soap_out(soap, "ns1:GetLyric8", id, NULL);
	case SOAP_TYPE__ns1__GetLyric7Response:
		return ((_ns1__GetLyric7Response *)ptr)->soap_out(soap, "ns1:GetLyric7Response", id, NULL);
	case SOAP_TYPE__ns1__GetLyric7:
		return ((_ns1__GetLyric7 *)ptr)->soap_out(soap, "ns1:GetLyric7", id, NULL);
	case SOAP_TYPE__ns1__GetLyric6Response:
		return ((_ns1__GetLyric6Response *)ptr)->soap_out(soap, "ns1:GetLyric6Response", id, NULL);
	case SOAP_TYPE__ns1__GetLyric6:
		return ((_ns1__GetLyric6 *)ptr)->soap_out(soap, "ns1:GetLyric6", id, NULL);
	case SOAP_TYPE__ns1__GetLyric5Response:
		return ((_ns1__GetLyric5Response *)ptr)->soap_out(soap, "ns1:GetLyric5Response", id, NULL);
	case SOAP_TYPE__ns1__GetLyric5:
		return ((_ns1__GetLyric5 *)ptr)->soap_out(soap, "ns1:GetLyric5", id, NULL);
	case SOAP_TYPE__ns1__GetLyric4Response:
		return ((_ns1__GetLyric4Response *)ptr)->soap_out(soap, "ns1:GetLyric4Response", id, NULL);
	case SOAP_TYPE__ns1__GetLyric4:
		return ((_ns1__GetLyric4 *)ptr)->soap_out(soap, "ns1:GetLyric4", id, NULL);
	case SOAP_TYPE__ns1__GetLyric3Response:
		return ((_ns1__GetLyric3Response *)ptr)->soap_out(soap, "ns1:GetLyric3Response", id, NULL);
	case SOAP_TYPE__ns1__GetLyric3:
		return ((_ns1__GetLyric3 *)ptr)->soap_out(soap, "ns1:GetLyric3", id, NULL);
	case SOAP_TYPE__ns1__IsReportedFaultLyricResponse:
		return ((_ns1__IsReportedFaultLyricResponse *)ptr)->soap_out(soap, "ns1:IsReportedFaultLyricResponse", id, NULL);
	case SOAP_TYPE__ns1__IsReportedFaultLyric:
		return ((_ns1__IsReportedFaultLyric *)ptr)->soap_out(soap, "ns1:IsReportedFaultLyric", id, NULL);
	case SOAP_TYPE__ns1__IsReportedRecommendationLyricResponse:
		return ((_ns1__IsReportedRecommendationLyricResponse *)ptr)->soap_out(soap, "ns1:IsReportedRecommendationLyricResponse", id, NULL);
	case SOAP_TYPE__ns1__IsReportedRecommendationLyric:
		return ((_ns1__IsReportedRecommendationLyric *)ptr)->soap_out(soap, "ns1:IsReportedRecommendationLyric", id, NULL);
	case SOAP_TYPE__ns1__ReportRecommendationLyricResponse:
		return ((_ns1__ReportRecommendationLyricResponse *)ptr)->soap_out(soap, "ns1:ReportRecommendationLyricResponse", id, NULL);
	case SOAP_TYPE__ns1__ReportRecommendationLyric:
		return ((_ns1__ReportRecommendationLyric *)ptr)->soap_out(soap, "ns1:ReportRecommendationLyric", id, NULL);
	case SOAP_TYPE__ns1__ReportFaultLyric2Response:
		return ((_ns1__ReportFaultLyric2Response *)ptr)->soap_out(soap, "ns1:ReportFaultLyric2Response", id, NULL);
	case SOAP_TYPE__ns1__ReportFaultLyric2:
		return ((_ns1__ReportFaultLyric2 *)ptr)->soap_out(soap, "ns1:ReportFaultLyric2", id, NULL);
	case SOAP_TYPE__ns1__ReportFaultLyricWithCommentResponse:
		return ((_ns1__ReportFaultLyricWithCommentResponse *)ptr)->soap_out(soap, "ns1:ReportFaultLyricWithCommentResponse", id, NULL);
	case SOAP_TYPE__ns1__ReportFaultLyricWithComment:
		return ((_ns1__ReportFaultLyricWithComment *)ptr)->soap_out(soap, "ns1:ReportFaultLyricWithComment", id, NULL);
	case SOAP_TYPE__ns1__UploadLyricResponse:
		return ((_ns1__UploadLyricResponse *)ptr)->soap_out(soap, "ns1:UploadLyricResponse", id, NULL);
	case SOAP_TYPE__ns1__UploadLyric:
		return ((_ns1__UploadLyric *)ptr)->soap_out(soap, "ns1:UploadLyric", id, NULL);
	case SOAP_TYPE__ns1__GetResembleLyric2CountTestResponse:
		return ((_ns1__GetResembleLyric2CountTestResponse *)ptr)->soap_out(soap, "ns1:GetResembleLyric2CountTestResponse", id, NULL);
	case SOAP_TYPE__ns1__GetResembleLyric2CountTest:
		return ((_ns1__GetResembleLyric2CountTest *)ptr)->soap_out(soap, "ns1:GetResembleLyric2CountTest", id, NULL);
	case SOAP_TYPE__ns1__GetResembleLyric2CountResponse:
		return ((_ns1__GetResembleLyric2CountResponse *)ptr)->soap_out(soap, "ns1:GetResembleLyric2CountResponse", id, NULL);
	case SOAP_TYPE__ns1__GetResembleLyric2Count:
		return ((_ns1__GetResembleLyric2Count *)ptr)->soap_out(soap, "ns1:GetResembleLyric2Count", id, NULL);
	case SOAP_TYPE__ns1__GetResembleLyric3Response:
		return ((_ns1__GetResembleLyric3Response *)ptr)->soap_out(soap, "ns1:GetResembleLyric3Response", id, NULL);
	case SOAP_TYPE__ns1__GetResembleLyric3:
		return ((_ns1__GetResembleLyric3 *)ptr)->soap_out(soap, "ns1:GetResembleLyric3", id, NULL);
	case SOAP_TYPE__ns1__GetResembleLyric2Response:
		return ((_ns1__GetResembleLyric2Response *)ptr)->soap_out(soap, "ns1:GetResembleLyric2Response", id, NULL);
	case SOAP_TYPE__ns1__GetResembleLyric2:
		return ((_ns1__GetResembleLyric2 *)ptr)->soap_out(soap, "ns1:GetResembleLyric2", id, NULL);
	case SOAP_TYPE__ns1__SetLinkLyricResponse:
		return ((_ns1__SetLinkLyricResponse *)ptr)->soap_out(soap, "ns1:SetLinkLyricResponse", id, NULL);
	case SOAP_TYPE__ns1__SetLinkLyric:
		return ((_ns1__SetLinkLyric *)ptr)->soap_out(soap, "ns1:SetLinkLyric", id, NULL);
	case SOAP_TYPE__ns1__GetSyncLyricBySearchResponse:
		return ((_ns1__GetSyncLyricBySearchResponse *)ptr)->soap_out(soap, "ns1:GetSyncLyricBySearchResponse", id, NULL);
	case SOAP_TYPE__ns1__GetSyncLyricBySearch:
		return ((_ns1__GetSyncLyricBySearch *)ptr)->soap_out(soap, "ns1:GetSyncLyricBySearch", id, NULL);
	case SOAP_TYPE__ns1__GetMurekaInfoResponse:
		return ((_ns1__GetMurekaInfoResponse *)ptr)->soap_out(soap, "ns1:GetMurekaInfoResponse", id, NULL);
	case SOAP_TYPE__ns1__GetMurekaInfo:
		return ((_ns1__GetMurekaInfo *)ptr)->soap_out(soap, "ns1:GetMurekaInfo", id, NULL);
	case SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT:
		return ((ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT *)ptr)->soap_out(soap, tag, id, "ns1:ST_LYRIC_DELETE_RESULT");
	case SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT:
		return ((ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfST_LYRIC_DELETE_RESULT");
	case SOAP_TYPE_ns1__ArrayOfInt:
		return ((ns1__ArrayOfInt *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfInt");
	case SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREFORMONITOR:
		return ((ns1__ST_USCORELYRIC_USCOREFORMONITOR *)ptr)->soap_out(soap, tag, id, "ns1:ST_LYRIC_FORMONITOR");
	case SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR:
		return ((ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfST_LYRIC_FORMONITOR");
	case SOAP_TYPE_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN:
		return ((ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfST_RIGHTSINFO_JPN");
	case SOAP_TYPE_ns1__ST_USCORERIGHTSINFO_USCOREJPN:
		return ((ns1__ST_USCORERIGHTSINFO_USCOREJPN *)ptr)->soap_out(soap, tag, id, "ns1:ST_RIGHTSINFO_JPN");
	case SOAP_TYPE_ns1__ST_USCORELYRICINFO:
		return ((ns1__ST_USCORELYRICINFO *)ptr)->soap_out(soap, tag, id, "ns1:ST_LYRICINFO");
	case SOAP_TYPE_ns1__ST_USCORESEARCHLYRIC_USCORELIST:
		return ((ns1__ST_USCORESEARCHLYRIC_USCORELIST *)ptr)->soap_out(soap, tag, id, "ns1:ST_SEARCHLYRIC_LIST");
	case SOAP_TYPE_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST:
		return ((ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfST_SEARCHLYRIC_LIST");
	case SOAP_TYPE_ns1__UploadForeignLyricInfo:
		return ((ns1__UploadForeignLyricInfo *)ptr)->soap_out(soap, tag, id, "ns1:UploadForeignLyricInfo");
	case SOAP_TYPE_ns1__GetBroadcastingListReturn:
		return ((ns1__GetBroadcastingListReturn *)ptr)->soap_out(soap, tag, id, "ns1:GetBroadcastingListReturn");
	case SOAP_TYPE_ns1__ArrayOfGetBroadcastingListReturn:
		return ((ns1__ArrayOfGetBroadcastingListReturn *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfGetBroadcastingListReturn");
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN:
		return ((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_CAST_GET_EX_METADATA_LIST3_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN:
		return ((ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST3_RETURN");
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN:
		return ((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_CAST_GET_EX_METADATA_LIST2_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN:
		return ((ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST2_RETURN");
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN:
		return ((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_CAST_GET_EX_METADATA_LIST_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN:
		return ((ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST_RETURN");
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN:
		return ((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_CAST_GET_EX_METADATA_RETURN");
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY:
		return ((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_CAST_GET_EX_METADATA_QUERY");
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY:
		return ((ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_CAST_REMOVE_EX_METADATA_QUERY");
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY:
		return ((ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_CAST_UPLOAD_EX_METADATA3_QUERY");
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY:
		return ((ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_CAST_UPLOAD_EX_METADATA2_QUERY");
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY:
		return ((ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_CAST_UPLOAD_EX_METADATA_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN:
		return ((ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_ALBA_STATISTIC_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN:
		return ((ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfST_GET_ALBA_STATISTIC_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY:
		return ((ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_ALBA_STATISTIC_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN:
		return ((ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_COUNT_REPORT_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY:
		return ((ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_COUNT_REPORT_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN:
		return ((ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_COUNT_MODIFY_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY:
		return ((ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_COUNT_MODIFY_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN:
		return ((ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_COUNT_LYRIC_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN:
		return ((ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_COUNT_CHECKSUM_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN:
		return ((ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_COUNT_IN_REGISTER_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY:
		return ((ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_COUNT_IN_REGISTER_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY:
		return ((ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_REPORT_BLACKLIST_REPORT_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY:
		return ((ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_ADMIT_MODIFY_LYRIC_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY:
		return ((ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_DELETE_RECORD_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN:
		return ((ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_MEMBER_LICENSE_LIST_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN:
		return ((ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfST_GET_MEMBER_LICENSE_LIST_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY:
		return ((ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_MEMBER_LICENSE_LIST_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN:
		return ((ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_MEMBER_LIST_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN:
		return ((ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfST_GET_MEMBER_LIST_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY:
		return ((ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_MEMBER_LIST_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY:
		return ((ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_MODIFY_MEMBER_LICENSE_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY:
		return ((ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_APPLY_REGISTRATION_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY:
		return ((ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_MEMBER_LOGOUT_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY:
		return ((ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_MEMBER_LOGIN_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY:
		return ((ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_MEMBER_REMOVEMEMBER_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY:
		return ((ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_MEMBER_MODIFYMEMBER_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY:
		return ((ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_MEMBER_ADDMEMBER_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN:
		return ((ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_REGISTER_LIST_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN:
		return ((ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfST_GET_REGISTER_LIST_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY:
		return ((ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_REGISTER_LIST_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN:
		return ((ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_MODIFY_LIST_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN:
		return ((ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfST_GET_MODIFY_LIST_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY:
		return ((ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_MODIFY_LIST_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN:
		return ((ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_REPORTFAULT_LIST_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN:
		return ((ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfST_GET_REPORTFAULT_LIST_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN:
		return ((ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_LYRIC_LIST_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN:
		return ((ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfST_GET_LYRIC_LIST_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY:
		return ((ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_LYRIC_LIST_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY:
		return ((ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_LYRIC5_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN:
		return ((ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_LYRIC4_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY:
		return ((ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_LYRIC4_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN:
		return ((ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_LYRIC3_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY:
		return ((ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_LYRIC3_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY:
		return ((ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_IS_REPORTED_FAULT_LYRIC_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY:
		return ((ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_IS_REPORTED_RECOMMENDATION_LYRIC_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY:
		return ((ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_REPORT_RECOMMENDATION_LYRIC_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY:
		return ((ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_REPORT_FAULT_LYRIC2_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY:
		return ((ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_REPORT_FAULT_LYRIC_WITH_COMMENT_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY:
		return ((ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_UPLOAD_LYRIC_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN:
		return ((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_RESEMBLELYRIC2_COUNT_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY:
		return ((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_RESEMBLELYRIC2_COUNT_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN:
		return ((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_RESEMBLELYRIC2_RETURN");
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN:
		return ((ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfST_GET_RESEMBLELYRIC2_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY:
		return ((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_RESEMBLELYRIC2_QUERY");
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN:
		return ((ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN *)ptr)->soap_out(soap, tag, id, "ns1:ST_GET_LYRIC5_RETURN");
	case SOAP_TYPE_ns1__ST_USCOREMUREKAINFO_USCORESERVICE:
		return ((ns1__ST_USCOREMUREKAINFO_USCORESERVICE *)ptr)->soap_out(soap, tag, id, "ns1:ST_MUREKAINFO_SERVICE");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_PointerTo_ns1__AdminGetLatestLyricID:
		return soap_out_PointerTo_ns1__AdminGetLatestLyricID(soap, tag, id, (_ns1__AdminGetLatestLyricID *const*)ptr, "ns1:AdminGetLatestLyricID");
	case SOAP_TYPE_PointerTo_ns1__AdminDeleteLyrics:
		return soap_out_PointerTo_ns1__AdminDeleteLyrics(soap, tag, id, (_ns1__AdminDeleteLyrics *const*)ptr, "ns1:AdminDeleteLyrics");
	case SOAP_TYPE_PointerTo_ns1__AdminGetLyrics:
		return soap_out_PointerTo_ns1__AdminGetLyrics(soap, tag, id, (_ns1__AdminGetLyrics *const*)ptr, "ns1:AdminGetLyrics");
	case SOAP_TYPE_PointerTo_ns1__AdminLoginLyricMonitor:
		return soap_out_PointerTo_ns1__AdminLoginLyricMonitor(soap, tag, id, (_ns1__AdminLoginLyricMonitor *const*)ptr, "ns1:AdminLoginLyricMonitor");
	case SOAP_TYPE_PointerTo_ns1__GetSearchLyricCount:
		return soap_out_PointerTo_ns1__GetSearchLyricCount(soap, tag, id, (_ns1__GetSearchLyricCount *const*)ptr, "ns1:GetSearchLyricCount");
	case SOAP_TYPE_PointerTo_ns1__AdminLoginRightsJPN:
		return soap_out_PointerTo_ns1__AdminLoginRightsJPN(soap, tag, id, (_ns1__AdminLoginRightsJPN *const*)ptr, "ns1:AdminLoginRightsJPN");
	case SOAP_TYPE_PointerTo_ns1__AdminJPNSearchRightsInfoList:
		return soap_out_PointerTo_ns1__AdminJPNSearchRightsInfoList(soap, tag, id, (_ns1__AdminJPNSearchRightsInfoList *const*)ptr, "ns1:AdminJPNSearchRightsInfoList");
	case SOAP_TYPE_PointerTo_ns1__AdminJPNSetRightsInfo:
		return soap_out_PointerTo_ns1__AdminJPNSetRightsInfo(soap, tag, id, (_ns1__AdminJPNSetRightsInfo *const*)ptr, "ns1:AdminJPNSetRightsInfo");
	case SOAP_TYPE_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID:
		return soap_out_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID(soap, tag, id, (_ns1__AdminJPNGetRightsInfoByLyricID *const*)ptr, "ns1:AdminJPNGetRightsInfoByLyricID");
	case SOAP_TYPE_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID:
		return soap_out_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID(soap, tag, id, (_ns1__AdminJPNGetRightsInfoByModifyID *const*)ptr, "ns1:AdminJPNGetRightsInfoByModifyID");
	case SOAP_TYPE_PointerTo_ns1__GetLyricByID2:
		return soap_out_PointerTo_ns1__GetLyricByID2(soap, tag, id, (_ns1__GetLyricByID2 *const*)ptr, "ns1:GetLyricByID2");
	case SOAP_TYPE_PointerTo_ns1__GetLyricByID:
		return soap_out_PointerTo_ns1__GetLyricByID(soap, tag, id, (_ns1__GetLyricByID *const*)ptr, "ns1:GetLyricByID");
	case SOAP_TYPE_PointerTo_ns1__GetResembleLyricList2:
		return soap_out_PointerTo_ns1__GetResembleLyricList2(soap, tag, id, (_ns1__GetResembleLyricList2 *const*)ptr, "ns1:GetResembleLyricList2");
	case SOAP_TYPE_PointerTo_ns1__GetResembleLyricList:
		return soap_out_PointerTo_ns1__GetResembleLyricList(soap, tag, id, (_ns1__GetResembleLyricList *const*)ptr, "ns1:GetResembleLyricList");
	case SOAP_TYPE_PointerTo_ns1__UploadForeignLyric:
		return soap_out_PointerTo_ns1__UploadForeignLyric(soap, tag, id, (_ns1__UploadForeignLyric *const*)ptr, "ns1:UploadForeignLyric");
	case SOAP_TYPE_PointerTo_ns1__GetBroadcastingList2:
		return soap_out_PointerTo_ns1__GetBroadcastingList2(soap, tag, id, (_ns1__GetBroadcastingList2 *const*)ptr, "ns1:GetBroadcastingList2");
	case SOAP_TYPE_PointerTo_ns1__GetBroadcastingList:
		return soap_out_PointerTo_ns1__GetBroadcastingList(soap, tag, id, (_ns1__GetBroadcastingList *const*)ptr, "ns1:GetBroadcastingList");
	case SOAP_TYPE_PointerTo_ns1__CastGetExMetaDataList3:
		return soap_out_PointerTo_ns1__CastGetExMetaDataList3(soap, tag, id, (_ns1__CastGetExMetaDataList3 *const*)ptr, "ns1:CastGetExMetaDataList3");
	case SOAP_TYPE_PointerTo_ns1__CastGetExMetaDataList2:
		return soap_out_PointerTo_ns1__CastGetExMetaDataList2(soap, tag, id, (_ns1__CastGetExMetaDataList2 *const*)ptr, "ns1:CastGetExMetaDataList2");
	case SOAP_TYPE_PointerTo_ns1__CastGetExMetaDataList:
		return soap_out_PointerTo_ns1__CastGetExMetaDataList(soap, tag, id, (_ns1__CastGetExMetaDataList *const*)ptr, "ns1:CastGetExMetaDataList");
	case SOAP_TYPE_PointerTo_ns1__CastGetExMetaData:
		return soap_out_PointerTo_ns1__CastGetExMetaData(soap, tag, id, (_ns1__CastGetExMetaData *const*)ptr, "ns1:CastGetExMetaData");
	case SOAP_TYPE_PointerTo_ns1__CastRemoveExMetaData:
		return soap_out_PointerTo_ns1__CastRemoveExMetaData(soap, tag, id, (_ns1__CastRemoveExMetaData *const*)ptr, "ns1:CastRemoveExMetaData");
	case SOAP_TYPE_PointerTo_ns1__CastUploadExMetaData3:
		return soap_out_PointerTo_ns1__CastUploadExMetaData3(soap, tag, id, (_ns1__CastUploadExMetaData3 *const*)ptr, "ns1:CastUploadExMetaData3");
	case SOAP_TYPE_PointerTo_ns1__CastUploadExMetaData2:
		return soap_out_PointerTo_ns1__CastUploadExMetaData2(soap, tag, id, (_ns1__CastUploadExMetaData2 *const*)ptr, "ns1:CastUploadExMetaData2");
	case SOAP_TYPE_PointerTo_ns1__CastUploadExMetaData:
		return soap_out_PointerTo_ns1__CastUploadExMetaData(soap, tag, id, (_ns1__CastUploadExMetaData *const*)ptr, "ns1:CastUploadExMetaData");
	case SOAP_TYPE_PointerTo_ns1__AdminGetAlbaStatistic:
		return soap_out_PointerTo_ns1__AdminGetAlbaStatistic(soap, tag, id, (_ns1__AdminGetAlbaStatistic *const*)ptr, "ns1:AdminGetAlbaStatistic");
	case SOAP_TYPE_PointerTo_ns1__AdminGetCountReport:
		return soap_out_PointerTo_ns1__AdminGetCountReport(soap, tag, id, (_ns1__AdminGetCountReport *const*)ptr, "ns1:AdminGetCountReport");
	case SOAP_TYPE_PointerTo_ns1__AdminGetCountModify:
		return soap_out_PointerTo_ns1__AdminGetCountModify(soap, tag, id, (_ns1__AdminGetCountModify *const*)ptr, "ns1:AdminGetCountModify");
	case SOAP_TYPE_PointerTo_ns1__AdminGetCountLyric:
		return soap_out_PointerTo_ns1__AdminGetCountLyric(soap, tag, id, (_ns1__AdminGetCountLyric *const*)ptr, "ns1:AdminGetCountLyric");
	case SOAP_TYPE_PointerTo_ns1__AdminGetCountChecksum:
		return soap_out_PointerTo_ns1__AdminGetCountChecksum(soap, tag, id, (_ns1__AdminGetCountChecksum *const*)ptr, "ns1:AdminGetCountChecksum");
	case SOAP_TYPE_PointerTo_ns1__AdminGetCountInRegister:
		return soap_out_PointerTo_ns1__AdminGetCountInRegister(soap, tag, id, (_ns1__AdminGetCountInRegister *const*)ptr, "ns1:AdminGetCountInRegister");
	case SOAP_TYPE_PointerTo_ns1__AdminReportBlackList:
		return soap_out_PointerTo_ns1__AdminReportBlackList(soap, tag, id, (_ns1__AdminReportBlackList *const*)ptr, "ns1:AdminReportBlackList");
	case SOAP_TYPE_PointerTo_ns1__AdminAdmitModifyLyric:
		return soap_out_PointerTo_ns1__AdminAdmitModifyLyric(soap, tag, id, (_ns1__AdminAdmitModifyLyric *const*)ptr, "ns1:AdminAdmitModifyLyric");
	case SOAP_TYPE_PointerTo_ns1__AdminDeleteRecord:
		return soap_out_PointerTo_ns1__AdminDeleteRecord(soap, tag, id, (_ns1__AdminDeleteRecord *const*)ptr, "ns1:AdminDeleteRecord");
	case SOAP_TYPE_PointerTo_ns1__MemberGetMemberLicenseList:
		return soap_out_PointerTo_ns1__MemberGetMemberLicenseList(soap, tag, id, (_ns1__MemberGetMemberLicenseList *const*)ptr, "ns1:MemberGetMemberLicenseList");
	case SOAP_TYPE_PointerTo_ns1__MemberGetMemberList:
		return soap_out_PointerTo_ns1__MemberGetMemberList(soap, tag, id, (_ns1__MemberGetMemberList *const*)ptr, "ns1:MemberGetMemberList");
	case SOAP_TYPE_PointerTo_ns1__MemberModifyMemberLicense:
		return soap_out_PointerTo_ns1__MemberModifyMemberLicense(soap, tag, id, (_ns1__MemberModifyMemberLicense *const*)ptr, "ns1:MemberModifyMemberLicense");
	case SOAP_TYPE_PointerTo_ns1__MemberApplyRegistration:
		return soap_out_PointerTo_ns1__MemberApplyRegistration(soap, tag, id, (_ns1__MemberApplyRegistration *const*)ptr, "ns1:MemberApplyRegistration");
	case SOAP_TYPE_PointerTo_ns1__MemberLogout:
		return soap_out_PointerTo_ns1__MemberLogout(soap, tag, id, (_ns1__MemberLogout *const*)ptr, "ns1:MemberLogout");
	case SOAP_TYPE_PointerTo_ns1__MemberLogin:
		return soap_out_PointerTo_ns1__MemberLogin(soap, tag, id, (_ns1__MemberLogin *const*)ptr, "ns1:MemberLogin");
	case SOAP_TYPE_PointerTo_ns1__MemberRemoveMember:
		return soap_out_PointerTo_ns1__MemberRemoveMember(soap, tag, id, (_ns1__MemberRemoveMember *const*)ptr, "ns1:MemberRemoveMember");
	case SOAP_TYPE_PointerTo_ns1__MemberModifyMember:
		return soap_out_PointerTo_ns1__MemberModifyMember(soap, tag, id, (_ns1__MemberModifyMember *const*)ptr, "ns1:MemberModifyMember");
	case SOAP_TYPE_PointerTo_ns1__MemberAddMember:
		return soap_out_PointerTo_ns1__MemberAddMember(soap, tag, id, (_ns1__MemberAddMember *const*)ptr, "ns1:MemberAddMember");
	case SOAP_TYPE_PointerTo_ns1__AdminGetRegisterList:
		return soap_out_PointerTo_ns1__AdminGetRegisterList(soap, tag, id, (_ns1__AdminGetRegisterList *const*)ptr, "ns1:AdminGetRegisterList");
	case SOAP_TYPE_PointerTo_ns1__AdminGetModifyList:
		return soap_out_PointerTo_ns1__AdminGetModifyList(soap, tag, id, (_ns1__AdminGetModifyList *const*)ptr, "ns1:AdminGetModifyList");
	case SOAP_TYPE_PointerTo_ns1__AdminGetReportFaultList:
		return soap_out_PointerTo_ns1__AdminGetReportFaultList(soap, tag, id, (_ns1__AdminGetReportFaultList *const*)ptr, "ns1:AdminGetReportFaultList");
	case SOAP_TYPE_PointerTo_ns1__AdminGetLyricListByID:
		return soap_out_PointerTo_ns1__AdminGetLyricListByID(soap, tag, id, (_ns1__AdminGetLyricListByID *const*)ptr, "ns1:AdminGetLyricListByID");
	case SOAP_TYPE_PointerTo_ns1__AdminGetLyricList:
		return soap_out_PointerTo_ns1__AdminGetLyricList(soap, tag, id, (_ns1__AdminGetLyricList *const*)ptr, "ns1:AdminGetLyricList");
	case SOAP_TYPE_PointerTo_ns1__GetSongID:
		return soap_out_PointerTo_ns1__GetSongID(soap, tag, id, (_ns1__GetSongID *const*)ptr, "ns1:GetSongID");
	case SOAP_TYPE_PointerTo_ns1__GetLyric8:
		return soap_out_PointerTo_ns1__GetLyric8(soap, tag, id, (_ns1__GetLyric8 *const*)ptr, "ns1:GetLyric8");
	case SOAP_TYPE_PointerTo_ns1__GetLyric7:
		return soap_out_PointerTo_ns1__GetLyric7(soap, tag, id, (_ns1__GetLyric7 *const*)ptr, "ns1:GetLyric7");
	case SOAP_TYPE_PointerTo_ns1__GetLyric6:
		return soap_out_PointerTo_ns1__GetLyric6(soap, tag, id, (_ns1__GetLyric6 *const*)ptr, "ns1:GetLyric6");
	case SOAP_TYPE_PointerTo_ns1__GetLyric5:
		return soap_out_PointerTo_ns1__GetLyric5(soap, tag, id, (_ns1__GetLyric5 *const*)ptr, "ns1:GetLyric5");
	case SOAP_TYPE_PointerTo_ns1__GetLyric4:
		return soap_out_PointerTo_ns1__GetLyric4(soap, tag, id, (_ns1__GetLyric4 *const*)ptr, "ns1:GetLyric4");
	case SOAP_TYPE_PointerTo_ns1__GetLyric3:
		return soap_out_PointerTo_ns1__GetLyric3(soap, tag, id, (_ns1__GetLyric3 *const*)ptr, "ns1:GetLyric3");
	case SOAP_TYPE_PointerTo_ns1__IsReportedFaultLyric:
		return soap_out_PointerTo_ns1__IsReportedFaultLyric(soap, tag, id, (_ns1__IsReportedFaultLyric *const*)ptr, "ns1:IsReportedFaultLyric");
	case SOAP_TYPE_PointerTo_ns1__IsReportedRecommendationLyric:
		return soap_out_PointerTo_ns1__IsReportedRecommendationLyric(soap, tag, id, (_ns1__IsReportedRecommendationLyric *const*)ptr, "ns1:IsReportedRecommendationLyric");
	case SOAP_TYPE_PointerTo_ns1__ReportRecommendationLyric:
		return soap_out_PointerTo_ns1__ReportRecommendationLyric(soap, tag, id, (_ns1__ReportRecommendationLyric *const*)ptr, "ns1:ReportRecommendationLyric");
	case SOAP_TYPE_PointerTo_ns1__ReportFaultLyric2:
		return soap_out_PointerTo_ns1__ReportFaultLyric2(soap, tag, id, (_ns1__ReportFaultLyric2 *const*)ptr, "ns1:ReportFaultLyric2");
	case SOAP_TYPE_PointerTo_ns1__ReportFaultLyricWithComment:
		return soap_out_PointerTo_ns1__ReportFaultLyricWithComment(soap, tag, id, (_ns1__ReportFaultLyricWithComment *const*)ptr, "ns1:ReportFaultLyricWithComment");
	case SOAP_TYPE_PointerTo_ns1__UploadLyric:
		return soap_out_PointerTo_ns1__UploadLyric(soap, tag, id, (_ns1__UploadLyric *const*)ptr, "ns1:UploadLyric");
	case SOAP_TYPE_PointerTo_ns1__GetResembleLyric2CountTest:
		return soap_out_PointerTo_ns1__GetResembleLyric2CountTest(soap, tag, id, (_ns1__GetResembleLyric2CountTest *const*)ptr, "ns1:GetResembleLyric2CountTest");
	case SOAP_TYPE_PointerTo_ns1__GetResembleLyric2Count:
		return soap_out_PointerTo_ns1__GetResembleLyric2Count(soap, tag, id, (_ns1__GetResembleLyric2Count *const*)ptr, "ns1:GetResembleLyric2Count");
	case SOAP_TYPE_PointerTo_ns1__GetResembleLyric3:
		return soap_out_PointerTo_ns1__GetResembleLyric3(soap, tag, id, (_ns1__GetResembleLyric3 *const*)ptr, "ns1:GetResembleLyric3");
	case SOAP_TYPE_PointerTo_ns1__GetResembleLyric2:
		return soap_out_PointerTo_ns1__GetResembleLyric2(soap, tag, id, (_ns1__GetResembleLyric2 *const*)ptr, "ns1:GetResembleLyric2");
	case SOAP_TYPE_PointerTo_ns1__SetLinkLyric:
		return soap_out_PointerTo_ns1__SetLinkLyric(soap, tag, id, (_ns1__SetLinkLyric *const*)ptr, "ns1:SetLinkLyric");
	case SOAP_TYPE_PointerTo_ns1__GetSyncLyricBySearch:
		return soap_out_PointerTo_ns1__GetSyncLyricBySearch(soap, tag, id, (_ns1__GetSyncLyricBySearch *const*)ptr, "ns1:GetSyncLyricBySearch");
	case SOAP_TYPE_PointerTo_ns1__GetMurekaInfo:
		return soap_out_PointerTo_ns1__GetMurekaInfo(soap, tag, id, (_ns1__GetMurekaInfo *const*)ptr, "ns1:GetMurekaInfo");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT:
		return soap_out_PointerTons1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, tag, id, (ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT *const*)ptr, "ns1:ArrayOfST_LYRIC_DELETE_RESULT");
	case SOAP_TYPE_PointerTons1__ArrayOfInt:
		return soap_out_PointerTons1__ArrayOfInt(soap, tag, id, (ns1__ArrayOfInt *const*)ptr, "ns1:ArrayOfInt");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR:
		return soap_out_PointerTons1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(soap, tag, id, (ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR *const*)ptr, "ns1:ArrayOfST_LYRIC_FORMONITOR");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_out_PointerToxsd__base64Binary(soap, tag, id, (xsd__base64Binary *const*)ptr, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN:
		return soap_out_PointerTons1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(soap, tag, id, (ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN *const*)ptr, "ns1:ArrayOfST_RIGHTSINFO_JPN");
	case SOAP_TYPE_PointerTons1__ST_USCORELYRICINFO:
		return soap_out_PointerTons1__ST_USCORELYRICINFO(soap, tag, id, (ns1__ST_USCORELYRICINFO *const*)ptr, "ns1:ST_LYRICINFO");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST:
		return soap_out_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(soap, tag, id, (ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST *const*)ptr, "ns1:ArrayOfST_SEARCHLYRIC_LIST");
	case SOAP_TYPE_PointerTons1__UploadForeignLyricInfo:
		return soap_out_PointerTons1__UploadForeignLyricInfo(soap, tag, id, (ns1__UploadForeignLyricInfo *const*)ptr, "ns1:UploadForeignLyricInfo");
	case SOAP_TYPE_PointerTons1__ArrayOfGetBroadcastingListReturn:
		return soap_out_PointerTons1__ArrayOfGetBroadcastingListReturn(soap, tag, id, (ns1__ArrayOfGetBroadcastingListReturn *const*)ptr, "ns1:ArrayOfGetBroadcastingListReturn");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN:
		return soap_out_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, tag, id, (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *const*)ptr, "ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST3_RETURN");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN:
		return soap_out_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, tag, id, (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *const*)ptr, "ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST2_RETURN");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN:
		return soap_out_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, tag, id, (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *const*)ptr, "ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN:
		return soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(soap, tag, id, (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN *const*)ptr, "ns1:ST_CAST_GET_EX_METADATA_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, tag, id, (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY *const*)ptr, "ns1:ST_CAST_GET_EX_METADATA_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, tag, id, (ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY *const*)ptr, "ns1:ST_CAST_REMOVE_EX_METADATA_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(soap, tag, id, (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY *const*)ptr, "ns1:ST_CAST_UPLOAD_EX_METADATA3_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(soap, tag, id, (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY *const*)ptr, "ns1:ST_CAST_UPLOAD_EX_METADATA2_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, tag, id, (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY *const*)ptr, "ns1:ST_CAST_UPLOAD_EX_METADATA_QUERY");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN:
		return soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, tag, id, (ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *const*)ptr, "ns1:ArrayOfST_GET_ALBA_STATISTIC_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY *const*)ptr, "ns1:ST_GET_ALBA_STATISTIC_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN:
		return soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(soap, tag, id, (ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN *const*)ptr, "ns1:ST_GET_COUNT_REPORT_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY *const*)ptr, "ns1:ST_GET_COUNT_REPORT_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN:
		return soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(soap, tag, id, (ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN *const*)ptr, "ns1:ST_GET_COUNT_MODIFY_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY *const*)ptr, "ns1:ST_GET_COUNT_MODIFY_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN:
		return soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(soap, tag, id, (ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN *const*)ptr, "ns1:ST_GET_COUNT_LYRIC_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN:
		return soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(soap, tag, id, (ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN *const*)ptr, "ns1:ST_GET_COUNT_CHECKSUM_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN:
		return soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(soap, tag, id, (ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN *const*)ptr, "ns1:ST_GET_COUNT_IN_REGISTER_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY *const*)ptr, "ns1:ST_GET_COUNT_IN_REGISTER_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY *const*)ptr, "ns1:ST_REPORT_BLACKLIST_REPORT_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY *const*)ptr, "ns1:ST_ADMIT_MODIFY_LYRIC_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY *const*)ptr, "ns1:ST_DELETE_RECORD_QUERY");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN:
		return soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, tag, id, (ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *const*)ptr, "ns1:ArrayOfST_GET_MEMBER_LICENSE_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY *const*)ptr, "ns1:ST_GET_MEMBER_LICENSE_LIST_QUERY");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN:
		return soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, tag, id, (ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *const*)ptr, "ns1:ArrayOfST_GET_MEMBER_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY *const*)ptr, "ns1:ST_GET_MEMBER_LIST_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY *const*)ptr, "ns1:ST_MODIFY_MEMBER_LICENSE_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY *const*)ptr, "ns1:ST_APPLY_REGISTRATION_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY *const*)ptr, "ns1:ST_MEMBER_LOGOUT_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY *const*)ptr, "ns1:ST_MEMBER_LOGIN_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY *const*)ptr, "ns1:ST_MEMBER_REMOVEMEMBER_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY *const*)ptr, "ns1:ST_MEMBER_MODIFYMEMBER_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY *const*)ptr, "ns1:ST_MEMBER_ADDMEMBER_QUERY");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN:
		return soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, tag, id, (ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *const*)ptr, "ns1:ArrayOfST_GET_REGISTER_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY *const*)ptr, "ns1:ST_GET_REGISTER_LIST_QUERY");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN:
		return soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, tag, id, (ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *const*)ptr, "ns1:ArrayOfST_GET_MODIFY_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY *const*)ptr, "ns1:ST_GET_MODIFY_LIST_QUERY");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN:
		return soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, tag, id, (ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *const*)ptr, "ns1:ArrayOfST_GET_REPORTFAULT_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN:
		return soap_out_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, tag, id, (ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *const*)ptr, "ns1:ArrayOfST_GET_LYRIC_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY *const*)ptr, "ns1:ST_GET_LYRIC_LIST_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY *const*)ptr, "ns1:ST_GET_LYRIC5_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCORERETURN:
		return soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(soap, tag, id, (ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN *const*)ptr, "ns1:ST_GET_LYRIC4_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY *const*)ptr, "ns1:ST_GET_LYRIC4_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCORERETURN:
		return soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(soap, tag, id, (ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN *const*)ptr, "ns1:ST_GET_LYRIC3_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY *const*)ptr, "ns1:ST_GET_LYRIC3_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY *const*)ptr, "ns1:ST_IS_REPORTED_FAULT_LYRIC_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *const*)ptr, "ns1:ST_IS_REPORTED_RECOMMENDATION_LYRIC_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *const*)ptr, "ns1:ST_REPORT_RECOMMENDATION_LYRIC_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY *const*)ptr, "ns1:ST_REPORT_FAULT_LYRIC2_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY *const*)ptr, "ns1:ST_REPORT_FAULT_LYRIC_WITH_COMMENT_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY *const*)ptr, "ns1:ST_UPLOAD_LYRIC_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN:
		return soap_out_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(soap, tag, id, (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN *const*)ptr, "ns1:ST_GET_RESEMBLELYRIC2_COUNT_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY *const*)ptr, "ns1:ST_GET_RESEMBLELYRIC2_COUNT_QUERY");
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN:
		return soap_out_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, tag, id, (ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *const*)ptr, "ns1:ArrayOfST_GET_RESEMBLELYRIC2_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY:
		return soap_out_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(soap, tag, id, (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY *const*)ptr, "ns1:ST_GET_RESEMBLELYRIC2_QUERY");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN:
		return soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, tag, id, (ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN *const*)ptr, "ns1:ST_GET_LYRIC5_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREMUREKAINFO_USCORESERVICE:
		return soap_out_PointerTons1__ST_USCOREMUREKAINFO_USCORESERVICE(soap, tag, id, (ns1__ST_USCOREMUREKAINFO_USCORESERVICE *const*)ptr, "ns1:ST_MUREKAINFO_SERVICE");
	case SOAP_TYPE_PointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT:
		return soap_out_PointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, tag, id, (ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT *const*)ptr, "ns1:ST_LYRIC_DELETE_RESULT");
	case SOAP_TYPE_PointerTons1__ST_USCORELYRIC_USCOREFORMONITOR:
		return soap_out_PointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(soap, tag, id, (ns1__ST_USCORELYRIC_USCOREFORMONITOR *const*)ptr, "ns1:ST_LYRIC_FORMONITOR");
	case SOAP_TYPE_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN:
		return soap_out_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, tag, id, (ns1__ST_USCORERIGHTSINFO_USCOREJPN *const*)ptr, "ns1:ST_RIGHTSINFO_JPN");
	case SOAP_TYPE_PointerTons1__ST_USCORESEARCHLYRIC_USCORELIST:
		return soap_out_PointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(soap, tag, id, (ns1__ST_USCORESEARCHLYRIC_USCORELIST *const*)ptr, "ns1:ST_SEARCHLYRIC_LIST");
	case SOAP_TYPE_PointerTons1__GetBroadcastingListReturn:
		return soap_out_PointerTons1__GetBroadcastingListReturn(soap, tag, id, (ns1__GetBroadcastingListReturn *const*)ptr, "ns1:GetBroadcastingListReturn");
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN:
		return soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, tag, id, (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *const*)ptr, "ns1:ST_CAST_GET_EX_METADATA_LIST3_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN:
		return soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, tag, id, (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *const*)ptr, "ns1:ST_CAST_GET_EX_METADATA_LIST2_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN:
		return soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, tag, id, (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *const*)ptr, "ns1:ST_CAST_GET_EX_METADATA_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN:
		return soap_out_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, tag, id, (ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *const*)ptr, "ns1:ST_GET_ALBA_STATISTIC_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN:
		return soap_out_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, tag, id, (ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *const*)ptr, "ns1:ST_GET_MEMBER_LICENSE_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN:
		return soap_out_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, tag, id, (ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *const*)ptr, "ns1:ST_GET_MEMBER_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN:
		return soap_out_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, tag, id, (ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *const*)ptr, "ns1:ST_GET_REGISTER_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN:
		return soap_out_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, tag, id, (ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *const*)ptr, "ns1:ST_GET_MODIFY_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN:
		return soap_out_PointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, tag, id, (ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *const*)ptr, "ns1:ST_GET_REPORTFAULT_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN:
		return soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, tag, id, (ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *const*)ptr, "ns1:ST_GET_LYRIC_LIST_RETURN");
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN:
		return soap_out_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, tag, id, (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *const*)ptr, "ns1:ST_GET_RESEMBLELYRIC2_RETURN");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetLatestLyricIDResponse:
		((_ns1__AdminGetLatestLyricIDResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetLatestLyricID:
		((_ns1__AdminGetLatestLyricID *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminDeleteLyricsResponse:
		((_ns1__AdminDeleteLyricsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminDeleteLyrics:
		((_ns1__AdminDeleteLyrics *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetLyricsResponse:
		((_ns1__AdminGetLyricsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetLyrics:
		((_ns1__AdminGetLyrics *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminLoginLyricMonitorResponse:
		((_ns1__AdminLoginLyricMonitorResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminLoginLyricMonitor:
		((_ns1__AdminLoginLyricMonitor *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetSearchLyricCountResponse:
		((_ns1__GetSearchLyricCountResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetSearchLyricCount:
		((_ns1__GetSearchLyricCount *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminLoginRightsJPNResponse:
		((_ns1__AdminLoginRightsJPNResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminLoginRightsJPN:
		((_ns1__AdminLoginRightsJPN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminJPNSearchRightsInfoListResponse:
		((_ns1__AdminJPNSearchRightsInfoListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminJPNSearchRightsInfoList:
		((_ns1__AdminJPNSearchRightsInfoList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminJPNSetRightsInfoResponse:
		((_ns1__AdminJPNSetRightsInfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminJPNSetRightsInfo:
		((_ns1__AdminJPNSetRightsInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricIDResponse:
		((_ns1__AdminJPNGetRightsInfoByLyricIDResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricID:
		((_ns1__AdminJPNGetRightsInfoByLyricID *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyIDResponse:
		((_ns1__AdminJPNGetRightsInfoByModifyIDResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyID:
		((_ns1__AdminJPNGetRightsInfoByModifyID *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLyricByID2Response:
		((_ns1__GetLyricByID2Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLyricByID2:
		((_ns1__GetLyricByID2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLyricByIDResponse:
		((_ns1__GetLyricByIDResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLyricByID:
		((_ns1__GetLyricByID *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetResembleLyricList2Response:
		((_ns1__GetResembleLyricList2Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetResembleLyricList2:
		((_ns1__GetResembleLyricList2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetResembleLyricListResponse:
		((_ns1__GetResembleLyricListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetResembleLyricList:
		((_ns1__GetResembleLyricList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__UploadForeignLyricResponse:
		((_ns1__UploadForeignLyricResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__UploadForeignLyric:
		((_ns1__UploadForeignLyric *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetBroadcastingList2Response:
		((_ns1__GetBroadcastingList2Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetBroadcastingList2:
		((_ns1__GetBroadcastingList2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetBroadcastingListResponse:
		((_ns1__GetBroadcastingListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetBroadcastingList:
		((_ns1__GetBroadcastingList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CastGetExMetaDataList3Response:
		((_ns1__CastGetExMetaDataList3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CastGetExMetaDataList3:
		((_ns1__CastGetExMetaDataList3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CastGetExMetaDataList2Response:
		((_ns1__CastGetExMetaDataList2Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CastGetExMetaDataList2:
		((_ns1__CastGetExMetaDataList2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CastGetExMetaDataListResponse:
		((_ns1__CastGetExMetaDataListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CastGetExMetaDataList:
		((_ns1__CastGetExMetaDataList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CastGetExMetaDataResponse:
		((_ns1__CastGetExMetaDataResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CastGetExMetaData:
		((_ns1__CastGetExMetaData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CastRemoveExMetaDataResponse:
		((_ns1__CastRemoveExMetaDataResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CastRemoveExMetaData:
		((_ns1__CastRemoveExMetaData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CastUploadExMetaData3Response:
		((_ns1__CastUploadExMetaData3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CastUploadExMetaData3:
		((_ns1__CastUploadExMetaData3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CastUploadExMetaData2Response:
		((_ns1__CastUploadExMetaData2Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CastUploadExMetaData2:
		((_ns1__CastUploadExMetaData2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CastUploadExMetaDataResponse:
		((_ns1__CastUploadExMetaDataResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CastUploadExMetaData:
		((_ns1__CastUploadExMetaData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetAlbaStatisticResponse:
		((_ns1__AdminGetAlbaStatisticResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetAlbaStatistic:
		((_ns1__AdminGetAlbaStatistic *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetCountReportResponse:
		((_ns1__AdminGetCountReportResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetCountReport:
		((_ns1__AdminGetCountReport *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetCountModifyResponse:
		((_ns1__AdminGetCountModifyResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetCountModify:
		((_ns1__AdminGetCountModify *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetCountLyricResponse:
		((_ns1__AdminGetCountLyricResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetCountLyric:
		((_ns1__AdminGetCountLyric *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetCountChecksumResponse:
		((_ns1__AdminGetCountChecksumResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetCountChecksum:
		((_ns1__AdminGetCountChecksum *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetCountInRegisterResponse:
		((_ns1__AdminGetCountInRegisterResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetCountInRegister:
		((_ns1__AdminGetCountInRegister *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminReportBlackListResponse:
		((_ns1__AdminReportBlackListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminReportBlackList:
		((_ns1__AdminReportBlackList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminAdmitModifyLyricResponse:
		((_ns1__AdminAdmitModifyLyricResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminAdmitModifyLyric:
		((_ns1__AdminAdmitModifyLyric *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminDeleteRecordResponse:
		((_ns1__AdminDeleteRecordResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminDeleteRecord:
		((_ns1__AdminDeleteRecord *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MemberGetMemberLicenseListResponse:
		((_ns1__MemberGetMemberLicenseListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MemberGetMemberLicenseList:
		((_ns1__MemberGetMemberLicenseList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MemberGetMemberListResponse:
		((_ns1__MemberGetMemberListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MemberGetMemberList:
		((_ns1__MemberGetMemberList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MemberModifyMemberLicenseResponse:
		((_ns1__MemberModifyMemberLicenseResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MemberModifyMemberLicense:
		((_ns1__MemberModifyMemberLicense *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MemberApplyRegistrationResponse:
		((_ns1__MemberApplyRegistrationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MemberApplyRegistration:
		((_ns1__MemberApplyRegistration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MemberLogoutResponse:
		((_ns1__MemberLogoutResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MemberLogout:
		((_ns1__MemberLogout *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MemberLoginResponse:
		((_ns1__MemberLoginResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MemberLogin:
		((_ns1__MemberLogin *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MemberRemoveMemberResponse:
		((_ns1__MemberRemoveMemberResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MemberRemoveMember:
		((_ns1__MemberRemoveMember *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MemberModifyMemberResponse:
		((_ns1__MemberModifyMemberResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MemberModifyMember:
		((_ns1__MemberModifyMember *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MemberAddMemberResponse:
		((_ns1__MemberAddMemberResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MemberAddMember:
		((_ns1__MemberAddMember *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetRegisterListResponse:
		((_ns1__AdminGetRegisterListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetRegisterList:
		((_ns1__AdminGetRegisterList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetModifyListResponse:
		((_ns1__AdminGetModifyListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetModifyList:
		((_ns1__AdminGetModifyList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetReportFaultListResponse:
		((_ns1__AdminGetReportFaultListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetReportFaultList:
		((_ns1__AdminGetReportFaultList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetLyricListByIDResponse:
		((_ns1__AdminGetLyricListByIDResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetLyricListByID:
		((_ns1__AdminGetLyricListByID *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetLyricListResponse:
		((_ns1__AdminGetLyricListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AdminGetLyricList:
		((_ns1__AdminGetLyricList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetSongIDResponse:
		((_ns1__GetSongIDResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetSongID:
		((_ns1__GetSongID *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLyric8Response:
		((_ns1__GetLyric8Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLyric8:
		((_ns1__GetLyric8 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLyric7Response:
		((_ns1__GetLyric7Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLyric7:
		((_ns1__GetLyric7 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLyric6Response:
		((_ns1__GetLyric6Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLyric6:
		((_ns1__GetLyric6 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLyric5Response:
		((_ns1__GetLyric5Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLyric5:
		((_ns1__GetLyric5 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLyric4Response:
		((_ns1__GetLyric4Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLyric4:
		((_ns1__GetLyric4 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLyric3Response:
		((_ns1__GetLyric3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLyric3:
		((_ns1__GetLyric3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__IsReportedFaultLyricResponse:
		((_ns1__IsReportedFaultLyricResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__IsReportedFaultLyric:
		((_ns1__IsReportedFaultLyric *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__IsReportedRecommendationLyricResponse:
		((_ns1__IsReportedRecommendationLyricResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__IsReportedRecommendationLyric:
		((_ns1__IsReportedRecommendationLyric *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ReportRecommendationLyricResponse:
		((_ns1__ReportRecommendationLyricResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ReportRecommendationLyric:
		((_ns1__ReportRecommendationLyric *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ReportFaultLyric2Response:
		((_ns1__ReportFaultLyric2Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ReportFaultLyric2:
		((_ns1__ReportFaultLyric2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ReportFaultLyricWithCommentResponse:
		((_ns1__ReportFaultLyricWithCommentResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ReportFaultLyricWithComment:
		((_ns1__ReportFaultLyricWithComment *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__UploadLyricResponse:
		((_ns1__UploadLyricResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__UploadLyric:
		((_ns1__UploadLyric *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetResembleLyric2CountTestResponse:
		((_ns1__GetResembleLyric2CountTestResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetResembleLyric2CountTest:
		((_ns1__GetResembleLyric2CountTest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetResembleLyric2CountResponse:
		((_ns1__GetResembleLyric2CountResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetResembleLyric2Count:
		((_ns1__GetResembleLyric2Count *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetResembleLyric3Response:
		((_ns1__GetResembleLyric3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetResembleLyric3:
		((_ns1__GetResembleLyric3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetResembleLyric2Response:
		((_ns1__GetResembleLyric2Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetResembleLyric2:
		((_ns1__GetResembleLyric2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetLinkLyricResponse:
		((_ns1__SetLinkLyricResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetLinkLyric:
		((_ns1__SetLinkLyric *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetSyncLyricBySearchResponse:
		((_ns1__GetSyncLyricBySearchResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetSyncLyricBySearch:
		((_ns1__GetSyncLyricBySearch *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetMurekaInfoResponse:
		((_ns1__GetMurekaInfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetMurekaInfo:
		((_ns1__GetMurekaInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT:
		((ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT:
		((ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfInt:
		((ns1__ArrayOfInt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREFORMONITOR:
		((ns1__ST_USCORELYRIC_USCOREFORMONITOR *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR:
		((ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN:
		((ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCORERIGHTSINFO_USCOREJPN:
		((ns1__ST_USCORERIGHTSINFO_USCOREJPN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCORELYRICINFO:
		((ns1__ST_USCORELYRICINFO *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCORESEARCHLYRIC_USCORELIST:
		((ns1__ST_USCORESEARCHLYRIC_USCORELIST *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST:
		((ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__UploadForeignLyricInfo:
		((ns1__UploadForeignLyricInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__GetBroadcastingListReturn:
		((ns1__GetBroadcastingListReturn *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfGetBroadcastingListReturn:
		((ns1__ArrayOfGetBroadcastingListReturn *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN:
		((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN:
		((ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN:
		((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN:
		((ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN:
		((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN:
		((ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN:
		((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY:
		((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY:
		((ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY:
		((ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY:
		((ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY:
		((ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN:
		((ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN:
		((ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY:
		((ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN:
		((ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY:
		((ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN:
		((ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY:
		((ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN:
		((ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN:
		((ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN:
		((ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY:
		((ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY:
		((ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY:
		((ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY:
		((ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN:
		((ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN:
		((ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY:
		((ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN:
		((ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN:
		((ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY:
		((ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY:
		((ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY:
		((ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY:
		((ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY:
		((ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY:
		((ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY:
		((ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY:
		((ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN:
		((ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN:
		((ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY:
		((ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN:
		((ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN:
		((ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY:
		((ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN:
		((ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN:
		((ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN:
		((ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN:
		((ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY:
		((ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY:
		((ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN:
		((ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY:
		((ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN:
		((ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY:
		((ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY:
		((ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY:
		((ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY:
		((ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY:
		((ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY:
		((ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY:
		((ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN:
		((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY:
		((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN:
		((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN:
		((ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY:
		((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN:
		((ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ST_USCOREMUREKAINFO_USCORESERVICE:
		((ns1__ST_USCOREMUREKAINFO_USCORESERVICE *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__AdminGetLatestLyricID_:
		soap_serialize___ns1__AdminGetLatestLyricID_(soap, (const struct __ns1__AdminGetLatestLyricID_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminDeleteLyrics_:
		soap_serialize___ns1__AdminDeleteLyrics_(soap, (const struct __ns1__AdminDeleteLyrics_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetLyrics_:
		soap_serialize___ns1__AdminGetLyrics_(soap, (const struct __ns1__AdminGetLyrics_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminLoginLyricMonitor_:
		soap_serialize___ns1__AdminLoginLyricMonitor_(soap, (const struct __ns1__AdminLoginLyricMonitor_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetSearchLyricCount_:
		soap_serialize___ns1__GetSearchLyricCount_(soap, (const struct __ns1__GetSearchLyricCount_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminLoginRightsJPN_:
		soap_serialize___ns1__AdminLoginRightsJPN_(soap, (const struct __ns1__AdminLoginRightsJPN_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminJPNSearchRightsInfoList_:
		soap_serialize___ns1__AdminJPNSearchRightsInfoList_(soap, (const struct __ns1__AdminJPNSearchRightsInfoList_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminJPNSetRightsInfo_:
		soap_serialize___ns1__AdminJPNSetRightsInfo_(soap, (const struct __ns1__AdminJPNSetRightsInfo_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminJPNGetRightsInfoByLyricID_:
		soap_serialize___ns1__AdminJPNGetRightsInfoByLyricID_(soap, (const struct __ns1__AdminJPNGetRightsInfoByLyricID_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminJPNGetRightsInfoByModifyID_:
		soap_serialize___ns1__AdminJPNGetRightsInfoByModifyID_(soap, (const struct __ns1__AdminJPNGetRightsInfoByModifyID_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLyricByID2_:
		soap_serialize___ns1__GetLyricByID2_(soap, (const struct __ns1__GetLyricByID2_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLyricByID_:
		soap_serialize___ns1__GetLyricByID_(soap, (const struct __ns1__GetLyricByID_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyricList2_:
		soap_serialize___ns1__GetResembleLyricList2_(soap, (const struct __ns1__GetResembleLyricList2_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyricList_:
		soap_serialize___ns1__GetResembleLyricList_(soap, (const struct __ns1__GetResembleLyricList_ *)ptr);
		break;
	case SOAP_TYPE___ns1__UploadForeignLyric_:
		soap_serialize___ns1__UploadForeignLyric_(soap, (const struct __ns1__UploadForeignLyric_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetBroadcastingList2_:
		soap_serialize___ns1__GetBroadcastingList2_(soap, (const struct __ns1__GetBroadcastingList2_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetBroadcastingList_:
		soap_serialize___ns1__GetBroadcastingList_(soap, (const struct __ns1__GetBroadcastingList_ *)ptr);
		break;
	case SOAP_TYPE___ns1__CastGetExMetaDataList3_:
		soap_serialize___ns1__CastGetExMetaDataList3_(soap, (const struct __ns1__CastGetExMetaDataList3_ *)ptr);
		break;
	case SOAP_TYPE___ns1__CastGetExMetaDataList2_:
		soap_serialize___ns1__CastGetExMetaDataList2_(soap, (const struct __ns1__CastGetExMetaDataList2_ *)ptr);
		break;
	case SOAP_TYPE___ns1__CastGetExMetaDataList_:
		soap_serialize___ns1__CastGetExMetaDataList_(soap, (const struct __ns1__CastGetExMetaDataList_ *)ptr);
		break;
	case SOAP_TYPE___ns1__CastGetExMetaData_:
		soap_serialize___ns1__CastGetExMetaData_(soap, (const struct __ns1__CastGetExMetaData_ *)ptr);
		break;
	case SOAP_TYPE___ns1__CastRemoveExMetaData_:
		soap_serialize___ns1__CastRemoveExMetaData_(soap, (const struct __ns1__CastRemoveExMetaData_ *)ptr);
		break;
	case SOAP_TYPE___ns1__CastUploadExMetaData3_:
		soap_serialize___ns1__CastUploadExMetaData3_(soap, (const struct __ns1__CastUploadExMetaData3_ *)ptr);
		break;
	case SOAP_TYPE___ns1__CastUploadExMetaData2_:
		soap_serialize___ns1__CastUploadExMetaData2_(soap, (const struct __ns1__CastUploadExMetaData2_ *)ptr);
		break;
	case SOAP_TYPE___ns1__CastUploadExMetaData_:
		soap_serialize___ns1__CastUploadExMetaData_(soap, (const struct __ns1__CastUploadExMetaData_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetAlbaStatistic_:
		soap_serialize___ns1__AdminGetAlbaStatistic_(soap, (const struct __ns1__AdminGetAlbaStatistic_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountReport_:
		soap_serialize___ns1__AdminGetCountReport_(soap, (const struct __ns1__AdminGetCountReport_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountModify_:
		soap_serialize___ns1__AdminGetCountModify_(soap, (const struct __ns1__AdminGetCountModify_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountLyric_:
		soap_serialize___ns1__AdminGetCountLyric_(soap, (const struct __ns1__AdminGetCountLyric_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountChecksum_:
		soap_serialize___ns1__AdminGetCountChecksum_(soap, (const struct __ns1__AdminGetCountChecksum_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountInRegister_:
		soap_serialize___ns1__AdminGetCountInRegister_(soap, (const struct __ns1__AdminGetCountInRegister_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminReportBlackList_:
		soap_serialize___ns1__AdminReportBlackList_(soap, (const struct __ns1__AdminReportBlackList_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminAdmitModifyLyric_:
		soap_serialize___ns1__AdminAdmitModifyLyric_(soap, (const struct __ns1__AdminAdmitModifyLyric_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminDeleteRecord_:
		soap_serialize___ns1__AdminDeleteRecord_(soap, (const struct __ns1__AdminDeleteRecord_ *)ptr);
		break;
	case SOAP_TYPE___ns1__MemberGetMemberLicenseList_:
		soap_serialize___ns1__MemberGetMemberLicenseList_(soap, (const struct __ns1__MemberGetMemberLicenseList_ *)ptr);
		break;
	case SOAP_TYPE___ns1__MemberGetMemberList_:
		soap_serialize___ns1__MemberGetMemberList_(soap, (const struct __ns1__MemberGetMemberList_ *)ptr);
		break;
	case SOAP_TYPE___ns1__MemberModifyMemberLicense_:
		soap_serialize___ns1__MemberModifyMemberLicense_(soap, (const struct __ns1__MemberModifyMemberLicense_ *)ptr);
		break;
	case SOAP_TYPE___ns1__MemberApplyRegistration_:
		soap_serialize___ns1__MemberApplyRegistration_(soap, (const struct __ns1__MemberApplyRegistration_ *)ptr);
		break;
	case SOAP_TYPE___ns1__MemberLogout_:
		soap_serialize___ns1__MemberLogout_(soap, (const struct __ns1__MemberLogout_ *)ptr);
		break;
	case SOAP_TYPE___ns1__MemberLogin_:
		soap_serialize___ns1__MemberLogin_(soap, (const struct __ns1__MemberLogin_ *)ptr);
		break;
	case SOAP_TYPE___ns1__MemberRemoveMember_:
		soap_serialize___ns1__MemberRemoveMember_(soap, (const struct __ns1__MemberRemoveMember_ *)ptr);
		break;
	case SOAP_TYPE___ns1__MemberModifyMember_:
		soap_serialize___ns1__MemberModifyMember_(soap, (const struct __ns1__MemberModifyMember_ *)ptr);
		break;
	case SOAP_TYPE___ns1__MemberAddMember_:
		soap_serialize___ns1__MemberAddMember_(soap, (const struct __ns1__MemberAddMember_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetRegisterList_:
		soap_serialize___ns1__AdminGetRegisterList_(soap, (const struct __ns1__AdminGetRegisterList_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetModifyList_:
		soap_serialize___ns1__AdminGetModifyList_(soap, (const struct __ns1__AdminGetModifyList_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetReportFaultList_:
		soap_serialize___ns1__AdminGetReportFaultList_(soap, (const struct __ns1__AdminGetReportFaultList_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetLyricListByID_:
		soap_serialize___ns1__AdminGetLyricListByID_(soap, (const struct __ns1__AdminGetLyricListByID_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetLyricList_:
		soap_serialize___ns1__AdminGetLyricList_(soap, (const struct __ns1__AdminGetLyricList_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetSongID_:
		soap_serialize___ns1__GetSongID_(soap, (const struct __ns1__GetSongID_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric8_:
		soap_serialize___ns1__GetLyric8_(soap, (const struct __ns1__GetLyric8_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric7_:
		soap_serialize___ns1__GetLyric7_(soap, (const struct __ns1__GetLyric7_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric6_:
		soap_serialize___ns1__GetLyric6_(soap, (const struct __ns1__GetLyric6_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric5_:
		soap_serialize___ns1__GetLyric5_(soap, (const struct __ns1__GetLyric5_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric4_:
		soap_serialize___ns1__GetLyric4_(soap, (const struct __ns1__GetLyric4_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric3_:
		soap_serialize___ns1__GetLyric3_(soap, (const struct __ns1__GetLyric3_ *)ptr);
		break;
	case SOAP_TYPE___ns1__IsReportedFaultLyric_:
		soap_serialize___ns1__IsReportedFaultLyric_(soap, (const struct __ns1__IsReportedFaultLyric_ *)ptr);
		break;
	case SOAP_TYPE___ns1__IsReportedRecommendationLyric_:
		soap_serialize___ns1__IsReportedRecommendationLyric_(soap, (const struct __ns1__IsReportedRecommendationLyric_ *)ptr);
		break;
	case SOAP_TYPE___ns1__ReportRecommendationLyric_:
		soap_serialize___ns1__ReportRecommendationLyric_(soap, (const struct __ns1__ReportRecommendationLyric_ *)ptr);
		break;
	case SOAP_TYPE___ns1__ReportFaultLyric2_:
		soap_serialize___ns1__ReportFaultLyric2_(soap, (const struct __ns1__ReportFaultLyric2_ *)ptr);
		break;
	case SOAP_TYPE___ns1__ReportFaultLyricWithComment_:
		soap_serialize___ns1__ReportFaultLyricWithComment_(soap, (const struct __ns1__ReportFaultLyricWithComment_ *)ptr);
		break;
	case SOAP_TYPE___ns1__UploadLyric_:
		soap_serialize___ns1__UploadLyric_(soap, (const struct __ns1__UploadLyric_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyric2CountTest_:
		soap_serialize___ns1__GetResembleLyric2CountTest_(soap, (const struct __ns1__GetResembleLyric2CountTest_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyric2Count_:
		soap_serialize___ns1__GetResembleLyric2Count_(soap, (const struct __ns1__GetResembleLyric2Count_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyric3_:
		soap_serialize___ns1__GetResembleLyric3_(soap, (const struct __ns1__GetResembleLyric3_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyric2_:
		soap_serialize___ns1__GetResembleLyric2_(soap, (const struct __ns1__GetResembleLyric2_ *)ptr);
		break;
	case SOAP_TYPE___ns1__SetLinkLyric_:
		soap_serialize___ns1__SetLinkLyric_(soap, (const struct __ns1__SetLinkLyric_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetSyncLyricBySearch_:
		soap_serialize___ns1__GetSyncLyricBySearch_(soap, (const struct __ns1__GetSyncLyricBySearch_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetMurekaInfo_:
		soap_serialize___ns1__GetMurekaInfo_(soap, (const struct __ns1__GetMurekaInfo_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetLatestLyricID:
		soap_serialize___ns1__AdminGetLatestLyricID(soap, (const struct __ns1__AdminGetLatestLyricID *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminDeleteLyrics:
		soap_serialize___ns1__AdminDeleteLyrics(soap, (const struct __ns1__AdminDeleteLyrics *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetLyrics:
		soap_serialize___ns1__AdminGetLyrics(soap, (const struct __ns1__AdminGetLyrics *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminLoginLyricMonitor:
		soap_serialize___ns1__AdminLoginLyricMonitor(soap, (const struct __ns1__AdminLoginLyricMonitor *)ptr);
		break;
	case SOAP_TYPE___ns1__GetSearchLyricCount:
		soap_serialize___ns1__GetSearchLyricCount(soap, (const struct __ns1__GetSearchLyricCount *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminLoginRightsJPN:
		soap_serialize___ns1__AdminLoginRightsJPN(soap, (const struct __ns1__AdminLoginRightsJPN *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminJPNSearchRightsInfoList:
		soap_serialize___ns1__AdminJPNSearchRightsInfoList(soap, (const struct __ns1__AdminJPNSearchRightsInfoList *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminJPNSetRightsInfo:
		soap_serialize___ns1__AdminJPNSetRightsInfo(soap, (const struct __ns1__AdminJPNSetRightsInfo *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminJPNGetRightsInfoByLyricID:
		soap_serialize___ns1__AdminJPNGetRightsInfoByLyricID(soap, (const struct __ns1__AdminJPNGetRightsInfoByLyricID *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminJPNGetRightsInfoByModifyID:
		soap_serialize___ns1__AdminJPNGetRightsInfoByModifyID(soap, (const struct __ns1__AdminJPNGetRightsInfoByModifyID *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLyricByID2:
		soap_serialize___ns1__GetLyricByID2(soap, (const struct __ns1__GetLyricByID2 *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLyricByID:
		soap_serialize___ns1__GetLyricByID(soap, (const struct __ns1__GetLyricByID *)ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyricList2:
		soap_serialize___ns1__GetResembleLyricList2(soap, (const struct __ns1__GetResembleLyricList2 *)ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyricList:
		soap_serialize___ns1__GetResembleLyricList(soap, (const struct __ns1__GetResembleLyricList *)ptr);
		break;
	case SOAP_TYPE___ns1__UploadForeignLyric:
		soap_serialize___ns1__UploadForeignLyric(soap, (const struct __ns1__UploadForeignLyric *)ptr);
		break;
	case SOAP_TYPE___ns1__GetBroadcastingList2:
		soap_serialize___ns1__GetBroadcastingList2(soap, (const struct __ns1__GetBroadcastingList2 *)ptr);
		break;
	case SOAP_TYPE___ns1__GetBroadcastingList:
		soap_serialize___ns1__GetBroadcastingList(soap, (const struct __ns1__GetBroadcastingList *)ptr);
		break;
	case SOAP_TYPE___ns1__CastGetExMetaDataList3:
		soap_serialize___ns1__CastGetExMetaDataList3(soap, (const struct __ns1__CastGetExMetaDataList3 *)ptr);
		break;
	case SOAP_TYPE___ns1__CastGetExMetaDataList2:
		soap_serialize___ns1__CastGetExMetaDataList2(soap, (const struct __ns1__CastGetExMetaDataList2 *)ptr);
		break;
	case SOAP_TYPE___ns1__CastGetExMetaDataList:
		soap_serialize___ns1__CastGetExMetaDataList(soap, (const struct __ns1__CastGetExMetaDataList *)ptr);
		break;
	case SOAP_TYPE___ns1__CastGetExMetaData:
		soap_serialize___ns1__CastGetExMetaData(soap, (const struct __ns1__CastGetExMetaData *)ptr);
		break;
	case SOAP_TYPE___ns1__CastRemoveExMetaData:
		soap_serialize___ns1__CastRemoveExMetaData(soap, (const struct __ns1__CastRemoveExMetaData *)ptr);
		break;
	case SOAP_TYPE___ns1__CastUploadExMetaData3:
		soap_serialize___ns1__CastUploadExMetaData3(soap, (const struct __ns1__CastUploadExMetaData3 *)ptr);
		break;
	case SOAP_TYPE___ns1__CastUploadExMetaData2:
		soap_serialize___ns1__CastUploadExMetaData2(soap, (const struct __ns1__CastUploadExMetaData2 *)ptr);
		break;
	case SOAP_TYPE___ns1__CastUploadExMetaData:
		soap_serialize___ns1__CastUploadExMetaData(soap, (const struct __ns1__CastUploadExMetaData *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetAlbaStatistic:
		soap_serialize___ns1__AdminGetAlbaStatistic(soap, (const struct __ns1__AdminGetAlbaStatistic *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountReport:
		soap_serialize___ns1__AdminGetCountReport(soap, (const struct __ns1__AdminGetCountReport *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountModify:
		soap_serialize___ns1__AdminGetCountModify(soap, (const struct __ns1__AdminGetCountModify *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountLyric:
		soap_serialize___ns1__AdminGetCountLyric(soap, (const struct __ns1__AdminGetCountLyric *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountChecksum:
		soap_serialize___ns1__AdminGetCountChecksum(soap, (const struct __ns1__AdminGetCountChecksum *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountInRegister:
		soap_serialize___ns1__AdminGetCountInRegister(soap, (const struct __ns1__AdminGetCountInRegister *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminReportBlackList:
		soap_serialize___ns1__AdminReportBlackList(soap, (const struct __ns1__AdminReportBlackList *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminAdmitModifyLyric:
		soap_serialize___ns1__AdminAdmitModifyLyric(soap, (const struct __ns1__AdminAdmitModifyLyric *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminDeleteRecord:
		soap_serialize___ns1__AdminDeleteRecord(soap, (const struct __ns1__AdminDeleteRecord *)ptr);
		break;
	case SOAP_TYPE___ns1__MemberGetMemberLicenseList:
		soap_serialize___ns1__MemberGetMemberLicenseList(soap, (const struct __ns1__MemberGetMemberLicenseList *)ptr);
		break;
	case SOAP_TYPE___ns1__MemberGetMemberList:
		soap_serialize___ns1__MemberGetMemberList(soap, (const struct __ns1__MemberGetMemberList *)ptr);
		break;
	case SOAP_TYPE___ns1__MemberModifyMemberLicense:
		soap_serialize___ns1__MemberModifyMemberLicense(soap, (const struct __ns1__MemberModifyMemberLicense *)ptr);
		break;
	case SOAP_TYPE___ns1__MemberApplyRegistration:
		soap_serialize___ns1__MemberApplyRegistration(soap, (const struct __ns1__MemberApplyRegistration *)ptr);
		break;
	case SOAP_TYPE___ns1__MemberLogout:
		soap_serialize___ns1__MemberLogout(soap, (const struct __ns1__MemberLogout *)ptr);
		break;
	case SOAP_TYPE___ns1__MemberLogin:
		soap_serialize___ns1__MemberLogin(soap, (const struct __ns1__MemberLogin *)ptr);
		break;
	case SOAP_TYPE___ns1__MemberRemoveMember:
		soap_serialize___ns1__MemberRemoveMember(soap, (const struct __ns1__MemberRemoveMember *)ptr);
		break;
	case SOAP_TYPE___ns1__MemberModifyMember:
		soap_serialize___ns1__MemberModifyMember(soap, (const struct __ns1__MemberModifyMember *)ptr);
		break;
	case SOAP_TYPE___ns1__MemberAddMember:
		soap_serialize___ns1__MemberAddMember(soap, (const struct __ns1__MemberAddMember *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetRegisterList:
		soap_serialize___ns1__AdminGetRegisterList(soap, (const struct __ns1__AdminGetRegisterList *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetModifyList:
		soap_serialize___ns1__AdminGetModifyList(soap, (const struct __ns1__AdminGetModifyList *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetReportFaultList:
		soap_serialize___ns1__AdminGetReportFaultList(soap, (const struct __ns1__AdminGetReportFaultList *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetLyricListByID:
		soap_serialize___ns1__AdminGetLyricListByID(soap, (const struct __ns1__AdminGetLyricListByID *)ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetLyricList:
		soap_serialize___ns1__AdminGetLyricList(soap, (const struct __ns1__AdminGetLyricList *)ptr);
		break;
	case SOAP_TYPE___ns1__GetSongID:
		soap_serialize___ns1__GetSongID(soap, (const struct __ns1__GetSongID *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric8:
		soap_serialize___ns1__GetLyric8(soap, (const struct __ns1__GetLyric8 *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric7:
		soap_serialize___ns1__GetLyric7(soap, (const struct __ns1__GetLyric7 *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric6:
		soap_serialize___ns1__GetLyric6(soap, (const struct __ns1__GetLyric6 *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric5:
		soap_serialize___ns1__GetLyric5(soap, (const struct __ns1__GetLyric5 *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric4:
		soap_serialize___ns1__GetLyric4(soap, (const struct __ns1__GetLyric4 *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric3:
		soap_serialize___ns1__GetLyric3(soap, (const struct __ns1__GetLyric3 *)ptr);
		break;
	case SOAP_TYPE___ns1__IsReportedFaultLyric:
		soap_serialize___ns1__IsReportedFaultLyric(soap, (const struct __ns1__IsReportedFaultLyric *)ptr);
		break;
	case SOAP_TYPE___ns1__IsReportedRecommendationLyric:
		soap_serialize___ns1__IsReportedRecommendationLyric(soap, (const struct __ns1__IsReportedRecommendationLyric *)ptr);
		break;
	case SOAP_TYPE___ns1__ReportRecommendationLyric:
		soap_serialize___ns1__ReportRecommendationLyric(soap, (const struct __ns1__ReportRecommendationLyric *)ptr);
		break;
	case SOAP_TYPE___ns1__ReportFaultLyric2:
		soap_serialize___ns1__ReportFaultLyric2(soap, (const struct __ns1__ReportFaultLyric2 *)ptr);
		break;
	case SOAP_TYPE___ns1__ReportFaultLyricWithComment:
		soap_serialize___ns1__ReportFaultLyricWithComment(soap, (const struct __ns1__ReportFaultLyricWithComment *)ptr);
		break;
	case SOAP_TYPE___ns1__UploadLyric:
		soap_serialize___ns1__UploadLyric(soap, (const struct __ns1__UploadLyric *)ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyric2CountTest:
		soap_serialize___ns1__GetResembleLyric2CountTest(soap, (const struct __ns1__GetResembleLyric2CountTest *)ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyric2Count:
		soap_serialize___ns1__GetResembleLyric2Count(soap, (const struct __ns1__GetResembleLyric2Count *)ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyric3:
		soap_serialize___ns1__GetResembleLyric3(soap, (const struct __ns1__GetResembleLyric3 *)ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyric2:
		soap_serialize___ns1__GetResembleLyric2(soap, (const struct __ns1__GetResembleLyric2 *)ptr);
		break;
	case SOAP_TYPE___ns1__SetLinkLyric:
		soap_serialize___ns1__SetLinkLyric(soap, (const struct __ns1__SetLinkLyric *)ptr);
		break;
	case SOAP_TYPE___ns1__GetSyncLyricBySearch:
		soap_serialize___ns1__GetSyncLyricBySearch(soap, (const struct __ns1__GetSyncLyricBySearch *)ptr);
		break;
	case SOAP_TYPE___ns1__GetMurekaInfo:
		soap_serialize___ns1__GetMurekaInfo(soap, (const struct __ns1__GetMurekaInfo *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminGetLatestLyricID:
		soap_serialize_PointerTo_ns1__AdminGetLatestLyricID(soap, (_ns1__AdminGetLatestLyricID *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminDeleteLyrics:
		soap_serialize_PointerTo_ns1__AdminDeleteLyrics(soap, (_ns1__AdminDeleteLyrics *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminGetLyrics:
		soap_serialize_PointerTo_ns1__AdminGetLyrics(soap, (_ns1__AdminGetLyrics *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminLoginLyricMonitor:
		soap_serialize_PointerTo_ns1__AdminLoginLyricMonitor(soap, (_ns1__AdminLoginLyricMonitor *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetSearchLyricCount:
		soap_serialize_PointerTo_ns1__GetSearchLyricCount(soap, (_ns1__GetSearchLyricCount *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminLoginRightsJPN:
		soap_serialize_PointerTo_ns1__AdminLoginRightsJPN(soap, (_ns1__AdminLoginRightsJPN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminJPNSearchRightsInfoList:
		soap_serialize_PointerTo_ns1__AdminJPNSearchRightsInfoList(soap, (_ns1__AdminJPNSearchRightsInfoList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminJPNSetRightsInfo:
		soap_serialize_PointerTo_ns1__AdminJPNSetRightsInfo(soap, (_ns1__AdminJPNSetRightsInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID:
		soap_serialize_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID(soap, (_ns1__AdminJPNGetRightsInfoByLyricID *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID:
		soap_serialize_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID(soap, (_ns1__AdminJPNGetRightsInfoByModifyID *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetLyricByID2:
		soap_serialize_PointerTo_ns1__GetLyricByID2(soap, (_ns1__GetLyricByID2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetLyricByID:
		soap_serialize_PointerTo_ns1__GetLyricByID(soap, (_ns1__GetLyricByID *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetResembleLyricList2:
		soap_serialize_PointerTo_ns1__GetResembleLyricList2(soap, (_ns1__GetResembleLyricList2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetResembleLyricList:
		soap_serialize_PointerTo_ns1__GetResembleLyricList(soap, (_ns1__GetResembleLyricList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__UploadForeignLyric:
		soap_serialize_PointerTo_ns1__UploadForeignLyric(soap, (_ns1__UploadForeignLyric *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetBroadcastingList2:
		soap_serialize_PointerTo_ns1__GetBroadcastingList2(soap, (_ns1__GetBroadcastingList2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetBroadcastingList:
		soap_serialize_PointerTo_ns1__GetBroadcastingList(soap, (_ns1__GetBroadcastingList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CastGetExMetaDataList3:
		soap_serialize_PointerTo_ns1__CastGetExMetaDataList3(soap, (_ns1__CastGetExMetaDataList3 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CastGetExMetaDataList2:
		soap_serialize_PointerTo_ns1__CastGetExMetaDataList2(soap, (_ns1__CastGetExMetaDataList2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CastGetExMetaDataList:
		soap_serialize_PointerTo_ns1__CastGetExMetaDataList(soap, (_ns1__CastGetExMetaDataList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CastGetExMetaData:
		soap_serialize_PointerTo_ns1__CastGetExMetaData(soap, (_ns1__CastGetExMetaData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CastRemoveExMetaData:
		soap_serialize_PointerTo_ns1__CastRemoveExMetaData(soap, (_ns1__CastRemoveExMetaData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CastUploadExMetaData3:
		soap_serialize_PointerTo_ns1__CastUploadExMetaData3(soap, (_ns1__CastUploadExMetaData3 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CastUploadExMetaData2:
		soap_serialize_PointerTo_ns1__CastUploadExMetaData2(soap, (_ns1__CastUploadExMetaData2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CastUploadExMetaData:
		soap_serialize_PointerTo_ns1__CastUploadExMetaData(soap, (_ns1__CastUploadExMetaData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminGetAlbaStatistic:
		soap_serialize_PointerTo_ns1__AdminGetAlbaStatistic(soap, (_ns1__AdminGetAlbaStatistic *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminGetCountReport:
		soap_serialize_PointerTo_ns1__AdminGetCountReport(soap, (_ns1__AdminGetCountReport *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminGetCountModify:
		soap_serialize_PointerTo_ns1__AdminGetCountModify(soap, (_ns1__AdminGetCountModify *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminGetCountLyric:
		soap_serialize_PointerTo_ns1__AdminGetCountLyric(soap, (_ns1__AdminGetCountLyric *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminGetCountChecksum:
		soap_serialize_PointerTo_ns1__AdminGetCountChecksum(soap, (_ns1__AdminGetCountChecksum *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminGetCountInRegister:
		soap_serialize_PointerTo_ns1__AdminGetCountInRegister(soap, (_ns1__AdminGetCountInRegister *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminReportBlackList:
		soap_serialize_PointerTo_ns1__AdminReportBlackList(soap, (_ns1__AdminReportBlackList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminAdmitModifyLyric:
		soap_serialize_PointerTo_ns1__AdminAdmitModifyLyric(soap, (_ns1__AdminAdmitModifyLyric *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminDeleteRecord:
		soap_serialize_PointerTo_ns1__AdminDeleteRecord(soap, (_ns1__AdminDeleteRecord *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__MemberGetMemberLicenseList:
		soap_serialize_PointerTo_ns1__MemberGetMemberLicenseList(soap, (_ns1__MemberGetMemberLicenseList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__MemberGetMemberList:
		soap_serialize_PointerTo_ns1__MemberGetMemberList(soap, (_ns1__MemberGetMemberList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__MemberModifyMemberLicense:
		soap_serialize_PointerTo_ns1__MemberModifyMemberLicense(soap, (_ns1__MemberModifyMemberLicense *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__MemberApplyRegistration:
		soap_serialize_PointerTo_ns1__MemberApplyRegistration(soap, (_ns1__MemberApplyRegistration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__MemberLogout:
		soap_serialize_PointerTo_ns1__MemberLogout(soap, (_ns1__MemberLogout *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__MemberLogin:
		soap_serialize_PointerTo_ns1__MemberLogin(soap, (_ns1__MemberLogin *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__MemberRemoveMember:
		soap_serialize_PointerTo_ns1__MemberRemoveMember(soap, (_ns1__MemberRemoveMember *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__MemberModifyMember:
		soap_serialize_PointerTo_ns1__MemberModifyMember(soap, (_ns1__MemberModifyMember *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__MemberAddMember:
		soap_serialize_PointerTo_ns1__MemberAddMember(soap, (_ns1__MemberAddMember *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminGetRegisterList:
		soap_serialize_PointerTo_ns1__AdminGetRegisterList(soap, (_ns1__AdminGetRegisterList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminGetModifyList:
		soap_serialize_PointerTo_ns1__AdminGetModifyList(soap, (_ns1__AdminGetModifyList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminGetReportFaultList:
		soap_serialize_PointerTo_ns1__AdminGetReportFaultList(soap, (_ns1__AdminGetReportFaultList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminGetLyricListByID:
		soap_serialize_PointerTo_ns1__AdminGetLyricListByID(soap, (_ns1__AdminGetLyricListByID *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AdminGetLyricList:
		soap_serialize_PointerTo_ns1__AdminGetLyricList(soap, (_ns1__AdminGetLyricList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetSongID:
		soap_serialize_PointerTo_ns1__GetSongID(soap, (_ns1__GetSongID *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetLyric8:
		soap_serialize_PointerTo_ns1__GetLyric8(soap, (_ns1__GetLyric8 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetLyric7:
		soap_serialize_PointerTo_ns1__GetLyric7(soap, (_ns1__GetLyric7 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetLyric6:
		soap_serialize_PointerTo_ns1__GetLyric6(soap, (_ns1__GetLyric6 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetLyric5:
		soap_serialize_PointerTo_ns1__GetLyric5(soap, (_ns1__GetLyric5 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetLyric4:
		soap_serialize_PointerTo_ns1__GetLyric4(soap, (_ns1__GetLyric4 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetLyric3:
		soap_serialize_PointerTo_ns1__GetLyric3(soap, (_ns1__GetLyric3 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__IsReportedFaultLyric:
		soap_serialize_PointerTo_ns1__IsReportedFaultLyric(soap, (_ns1__IsReportedFaultLyric *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__IsReportedRecommendationLyric:
		soap_serialize_PointerTo_ns1__IsReportedRecommendationLyric(soap, (_ns1__IsReportedRecommendationLyric *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ReportRecommendationLyric:
		soap_serialize_PointerTo_ns1__ReportRecommendationLyric(soap, (_ns1__ReportRecommendationLyric *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ReportFaultLyric2:
		soap_serialize_PointerTo_ns1__ReportFaultLyric2(soap, (_ns1__ReportFaultLyric2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ReportFaultLyricWithComment:
		soap_serialize_PointerTo_ns1__ReportFaultLyricWithComment(soap, (_ns1__ReportFaultLyricWithComment *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__UploadLyric:
		soap_serialize_PointerTo_ns1__UploadLyric(soap, (_ns1__UploadLyric *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetResembleLyric2CountTest:
		soap_serialize_PointerTo_ns1__GetResembleLyric2CountTest(soap, (_ns1__GetResembleLyric2CountTest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetResembleLyric2Count:
		soap_serialize_PointerTo_ns1__GetResembleLyric2Count(soap, (_ns1__GetResembleLyric2Count *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetResembleLyric3:
		soap_serialize_PointerTo_ns1__GetResembleLyric3(soap, (_ns1__GetResembleLyric3 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetResembleLyric2:
		soap_serialize_PointerTo_ns1__GetResembleLyric2(soap, (_ns1__GetResembleLyric2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetLinkLyric:
		soap_serialize_PointerTo_ns1__SetLinkLyric(soap, (_ns1__SetLinkLyric *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetSyncLyricBySearch:
		soap_serialize_PointerTo_ns1__GetSyncLyricBySearch(soap, (_ns1__GetSyncLyricBySearch *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetMurekaInfo:
		soap_serialize_PointerTo_ns1__GetMurekaInfo(soap, (_ns1__GetMurekaInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT:
		soap_serialize_PointerTons1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, (ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfInt:
		soap_serialize_PointerTons1__ArrayOfInt(soap, (ns1__ArrayOfInt *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR:
		soap_serialize_PointerTons1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(soap, (ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__base64Binary:
		soap_serialize_PointerToxsd__base64Binary(soap, (xsd__base64Binary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN:
		soap_serialize_PointerTons1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(soap, (ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCORELYRICINFO:
		soap_serialize_PointerTons1__ST_USCORELYRICINFO(soap, (ns1__ST_USCORELYRICINFO *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST:
		soap_serialize_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(soap, (ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__UploadForeignLyricInfo:
		soap_serialize_PointerTons1__UploadForeignLyricInfo(soap, (ns1__UploadForeignLyricInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfGetBroadcastingListReturn:
		soap_serialize_PointerTons1__ArrayOfGetBroadcastingListReturn(soap, (ns1__ArrayOfGetBroadcastingListReturn *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN:
		soap_serialize_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN:
		soap_serialize_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN:
		soap_serialize_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(soap, (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, (ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(soap, (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(soap, (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN:
		soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, (ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(soap, (ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(soap, (ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(soap, (ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(soap, (ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(soap, (ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(soap, (ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(soap, (ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(soap, (ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(soap, (ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(soap, (ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(soap, (ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(soap, (ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN:
		soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, (ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(soap, (ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN:
		soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, (ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(soap, (ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(soap, (ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(soap, (ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(soap, (ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(soap, (ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(soap, (ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(soap, (ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(soap, (ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN:
		soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, (ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(soap, (ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN:
		soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, (ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(soap, (ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN:
		soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, (ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN:
		soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, (ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(soap, (ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, (ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(soap, (ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(soap, (ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(soap, (ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(soap, (ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(soap, (ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, (ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, (ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(soap, (ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(soap, (ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(soap, (ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(soap, (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(soap, (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN:
		soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, (ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(soap, (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, (ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREMUREKAINFO_USCORESERVICE:
		soap_serialize_PointerTons1__ST_USCOREMUREKAINFO_USCORESERVICE(soap, (ns1__ST_USCOREMUREKAINFO_USCORESERVICE *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT:
		soap_serialize_PointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, (ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCORELYRIC_USCOREFORMONITOR:
		soap_serialize_PointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(soap, (ns1__ST_USCORELYRIC_USCOREFORMONITOR *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN:
		soap_serialize_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, (ns1__ST_USCORERIGHTSINFO_USCOREJPN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCORESEARCHLYRIC_USCORELIST:
		soap_serialize_PointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(soap, (ns1__ST_USCORESEARCHLYRIC_USCORELIST *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__GetBroadcastingListReturn:
		soap_serialize_PointerTons1__GetBroadcastingListReturn(soap, (ns1__GetBroadcastingListReturn *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, (ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, (ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, (ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, (ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, (ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, (ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, (ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN:
		soap_serialize_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 AlsongAPI_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREMUREKAINFO_USCORESERVICE:
		return (void*)soap_instantiate_ns1__ST_USCOREMUREKAINFO_USCORESERVICE(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN:
		return (void*)soap_instantiate_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN:
		return (void*)soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY:
		return (void*)soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN:
		return (void*)soap_instantiate_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN:
		return (void*)soap_instantiate_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN:
		return (void*)soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfGetBroadcastingListReturn:
		return (void*)soap_instantiate_ns1__ArrayOfGetBroadcastingListReturn(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__GetBroadcastingListReturn:
		return (void*)soap_instantiate_ns1__GetBroadcastingListReturn(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__UploadForeignLyricInfo:
		return (void*)soap_instantiate_ns1__UploadForeignLyricInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST:
		return (void*)soap_instantiate_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCORESEARCHLYRIC_USCORELIST:
		return (void*)soap_instantiate_ns1__ST_USCORESEARCHLYRIC_USCORELIST(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCORELYRICINFO:
		return (void*)soap_instantiate_ns1__ST_USCORELYRICINFO(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCORERIGHTSINFO_USCOREJPN:
		return (void*)soap_instantiate_ns1__ST_USCORERIGHTSINFO_USCOREJPN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN:
		return (void*)soap_instantiate_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR:
		return (void*)soap_instantiate_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREFORMONITOR:
		return (void*)soap_instantiate_ns1__ST_USCORELYRIC_USCOREFORMONITOR(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfInt:
		return (void*)soap_instantiate_ns1__ArrayOfInt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT:
		return (void*)soap_instantiate_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT:
		return (void*)soap_instantiate_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetMurekaInfo:
		return (void*)soap_instantiate__ns1__GetMurekaInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetMurekaInfoResponse:
		return (void*)soap_instantiate__ns1__GetMurekaInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetSyncLyricBySearch:
		return (void*)soap_instantiate__ns1__GetSyncLyricBySearch(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetSyncLyricBySearchResponse:
		return (void*)soap_instantiate__ns1__GetSyncLyricBySearchResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetLinkLyric:
		return (void*)soap_instantiate__ns1__SetLinkLyric(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetLinkLyricResponse:
		return (void*)soap_instantiate__ns1__SetLinkLyricResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetResembleLyric2:
		return (void*)soap_instantiate__ns1__GetResembleLyric2(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetResembleLyric2Response:
		return (void*)soap_instantiate__ns1__GetResembleLyric2Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetResembleLyric3:
		return (void*)soap_instantiate__ns1__GetResembleLyric3(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetResembleLyric3Response:
		return (void*)soap_instantiate__ns1__GetResembleLyric3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetResembleLyric2Count:
		return (void*)soap_instantiate__ns1__GetResembleLyric2Count(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetResembleLyric2CountResponse:
		return (void*)soap_instantiate__ns1__GetResembleLyric2CountResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetResembleLyric2CountTest:
		return (void*)soap_instantiate__ns1__GetResembleLyric2CountTest(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetResembleLyric2CountTestResponse:
		return (void*)soap_instantiate__ns1__GetResembleLyric2CountTestResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__UploadLyric:
		return (void*)soap_instantiate__ns1__UploadLyric(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__UploadLyricResponse:
		return (void*)soap_instantiate__ns1__UploadLyricResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ReportFaultLyricWithComment:
		return (void*)soap_instantiate__ns1__ReportFaultLyricWithComment(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ReportFaultLyricWithCommentResponse:
		return (void*)soap_instantiate__ns1__ReportFaultLyricWithCommentResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ReportFaultLyric2:
		return (void*)soap_instantiate__ns1__ReportFaultLyric2(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ReportFaultLyric2Response:
		return (void*)soap_instantiate__ns1__ReportFaultLyric2Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ReportRecommendationLyric:
		return (void*)soap_instantiate__ns1__ReportRecommendationLyric(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ReportRecommendationLyricResponse:
		return (void*)soap_instantiate__ns1__ReportRecommendationLyricResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__IsReportedRecommendationLyric:
		return (void*)soap_instantiate__ns1__IsReportedRecommendationLyric(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__IsReportedRecommendationLyricResponse:
		return (void*)soap_instantiate__ns1__IsReportedRecommendationLyricResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__IsReportedFaultLyric:
		return (void*)soap_instantiate__ns1__IsReportedFaultLyric(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__IsReportedFaultLyricResponse:
		return (void*)soap_instantiate__ns1__IsReportedFaultLyricResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLyric3:
		return (void*)soap_instantiate__ns1__GetLyric3(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLyric3Response:
		return (void*)soap_instantiate__ns1__GetLyric3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLyric4:
		return (void*)soap_instantiate__ns1__GetLyric4(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLyric4Response:
		return (void*)soap_instantiate__ns1__GetLyric4Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLyric5:
		return (void*)soap_instantiate__ns1__GetLyric5(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLyric5Response:
		return (void*)soap_instantiate__ns1__GetLyric5Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLyric6:
		return (void*)soap_instantiate__ns1__GetLyric6(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLyric6Response:
		return (void*)soap_instantiate__ns1__GetLyric6Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLyric7:
		return (void*)soap_instantiate__ns1__GetLyric7(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLyric7Response:
		return (void*)soap_instantiate__ns1__GetLyric7Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLyric8:
		return (void*)soap_instantiate__ns1__GetLyric8(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLyric8Response:
		return (void*)soap_instantiate__ns1__GetLyric8Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetSongID:
		return (void*)soap_instantiate__ns1__GetSongID(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetSongIDResponse:
		return (void*)soap_instantiate__ns1__GetSongIDResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetLyricList:
		return (void*)soap_instantiate__ns1__AdminGetLyricList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetLyricListResponse:
		return (void*)soap_instantiate__ns1__AdminGetLyricListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetLyricListByID:
		return (void*)soap_instantiate__ns1__AdminGetLyricListByID(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetLyricListByIDResponse:
		return (void*)soap_instantiate__ns1__AdminGetLyricListByIDResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetReportFaultList:
		return (void*)soap_instantiate__ns1__AdminGetReportFaultList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetReportFaultListResponse:
		return (void*)soap_instantiate__ns1__AdminGetReportFaultListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetModifyList:
		return (void*)soap_instantiate__ns1__AdminGetModifyList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetModifyListResponse:
		return (void*)soap_instantiate__ns1__AdminGetModifyListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetRegisterList:
		return (void*)soap_instantiate__ns1__AdminGetRegisterList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetRegisterListResponse:
		return (void*)soap_instantiate__ns1__AdminGetRegisterListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MemberAddMember:
		return (void*)soap_instantiate__ns1__MemberAddMember(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MemberAddMemberResponse:
		return (void*)soap_instantiate__ns1__MemberAddMemberResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MemberModifyMember:
		return (void*)soap_instantiate__ns1__MemberModifyMember(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MemberModifyMemberResponse:
		return (void*)soap_instantiate__ns1__MemberModifyMemberResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MemberRemoveMember:
		return (void*)soap_instantiate__ns1__MemberRemoveMember(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MemberRemoveMemberResponse:
		return (void*)soap_instantiate__ns1__MemberRemoveMemberResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MemberLogin:
		return (void*)soap_instantiate__ns1__MemberLogin(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MemberLoginResponse:
		return (void*)soap_instantiate__ns1__MemberLoginResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MemberLogout:
		return (void*)soap_instantiate__ns1__MemberLogout(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MemberLogoutResponse:
		return (void*)soap_instantiate__ns1__MemberLogoutResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MemberApplyRegistration:
		return (void*)soap_instantiate__ns1__MemberApplyRegistration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MemberApplyRegistrationResponse:
		return (void*)soap_instantiate__ns1__MemberApplyRegistrationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MemberModifyMemberLicense:
		return (void*)soap_instantiate__ns1__MemberModifyMemberLicense(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MemberModifyMemberLicenseResponse:
		return (void*)soap_instantiate__ns1__MemberModifyMemberLicenseResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MemberGetMemberList:
		return (void*)soap_instantiate__ns1__MemberGetMemberList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MemberGetMemberListResponse:
		return (void*)soap_instantiate__ns1__MemberGetMemberListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MemberGetMemberLicenseList:
		return (void*)soap_instantiate__ns1__MemberGetMemberLicenseList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MemberGetMemberLicenseListResponse:
		return (void*)soap_instantiate__ns1__MemberGetMemberLicenseListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminDeleteRecord:
		return (void*)soap_instantiate__ns1__AdminDeleteRecord(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminDeleteRecordResponse:
		return (void*)soap_instantiate__ns1__AdminDeleteRecordResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminAdmitModifyLyric:
		return (void*)soap_instantiate__ns1__AdminAdmitModifyLyric(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminAdmitModifyLyricResponse:
		return (void*)soap_instantiate__ns1__AdminAdmitModifyLyricResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminReportBlackList:
		return (void*)soap_instantiate__ns1__AdminReportBlackList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminReportBlackListResponse:
		return (void*)soap_instantiate__ns1__AdminReportBlackListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetCountInRegister:
		return (void*)soap_instantiate__ns1__AdminGetCountInRegister(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetCountInRegisterResponse:
		return (void*)soap_instantiate__ns1__AdminGetCountInRegisterResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetCountChecksum:
		return (void*)soap_instantiate__ns1__AdminGetCountChecksum(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetCountChecksumResponse:
		return (void*)soap_instantiate__ns1__AdminGetCountChecksumResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetCountLyric:
		return (void*)soap_instantiate__ns1__AdminGetCountLyric(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetCountLyricResponse:
		return (void*)soap_instantiate__ns1__AdminGetCountLyricResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetCountModify:
		return (void*)soap_instantiate__ns1__AdminGetCountModify(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetCountModifyResponse:
		return (void*)soap_instantiate__ns1__AdminGetCountModifyResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetCountReport:
		return (void*)soap_instantiate__ns1__AdminGetCountReport(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetCountReportResponse:
		return (void*)soap_instantiate__ns1__AdminGetCountReportResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetAlbaStatistic:
		return (void*)soap_instantiate__ns1__AdminGetAlbaStatistic(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetAlbaStatisticResponse:
		return (void*)soap_instantiate__ns1__AdminGetAlbaStatisticResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CastUploadExMetaData:
		return (void*)soap_instantiate__ns1__CastUploadExMetaData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CastUploadExMetaDataResponse:
		return (void*)soap_instantiate__ns1__CastUploadExMetaDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CastUploadExMetaData2:
		return (void*)soap_instantiate__ns1__CastUploadExMetaData2(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CastUploadExMetaData2Response:
		return (void*)soap_instantiate__ns1__CastUploadExMetaData2Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CastUploadExMetaData3:
		return (void*)soap_instantiate__ns1__CastUploadExMetaData3(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CastUploadExMetaData3Response:
		return (void*)soap_instantiate__ns1__CastUploadExMetaData3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CastRemoveExMetaData:
		return (void*)soap_instantiate__ns1__CastRemoveExMetaData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CastRemoveExMetaDataResponse:
		return (void*)soap_instantiate__ns1__CastRemoveExMetaDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CastGetExMetaData:
		return (void*)soap_instantiate__ns1__CastGetExMetaData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CastGetExMetaDataResponse:
		return (void*)soap_instantiate__ns1__CastGetExMetaDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CastGetExMetaDataList:
		return (void*)soap_instantiate__ns1__CastGetExMetaDataList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CastGetExMetaDataListResponse:
		return (void*)soap_instantiate__ns1__CastGetExMetaDataListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CastGetExMetaDataList2:
		return (void*)soap_instantiate__ns1__CastGetExMetaDataList2(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CastGetExMetaDataList2Response:
		return (void*)soap_instantiate__ns1__CastGetExMetaDataList2Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CastGetExMetaDataList3:
		return (void*)soap_instantiate__ns1__CastGetExMetaDataList3(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CastGetExMetaDataList3Response:
		return (void*)soap_instantiate__ns1__CastGetExMetaDataList3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetBroadcastingList:
		return (void*)soap_instantiate__ns1__GetBroadcastingList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetBroadcastingListResponse:
		return (void*)soap_instantiate__ns1__GetBroadcastingListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetBroadcastingList2:
		return (void*)soap_instantiate__ns1__GetBroadcastingList2(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetBroadcastingList2Response:
		return (void*)soap_instantiate__ns1__GetBroadcastingList2Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__UploadForeignLyric:
		return (void*)soap_instantiate__ns1__UploadForeignLyric(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__UploadForeignLyricResponse:
		return (void*)soap_instantiate__ns1__UploadForeignLyricResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetResembleLyricList:
		return (void*)soap_instantiate__ns1__GetResembleLyricList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetResembleLyricListResponse:
		return (void*)soap_instantiate__ns1__GetResembleLyricListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetResembleLyricList2:
		return (void*)soap_instantiate__ns1__GetResembleLyricList2(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetResembleLyricList2Response:
		return (void*)soap_instantiate__ns1__GetResembleLyricList2Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLyricByID:
		return (void*)soap_instantiate__ns1__GetLyricByID(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLyricByIDResponse:
		return (void*)soap_instantiate__ns1__GetLyricByIDResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLyricByID2:
		return (void*)soap_instantiate__ns1__GetLyricByID2(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLyricByID2Response:
		return (void*)soap_instantiate__ns1__GetLyricByID2Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyID:
		return (void*)soap_instantiate__ns1__AdminJPNGetRightsInfoByModifyID(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyIDResponse:
		return (void*)soap_instantiate__ns1__AdminJPNGetRightsInfoByModifyIDResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricID:
		return (void*)soap_instantiate__ns1__AdminJPNGetRightsInfoByLyricID(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricIDResponse:
		return (void*)soap_instantiate__ns1__AdminJPNGetRightsInfoByLyricIDResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminJPNSetRightsInfo:
		return (void*)soap_instantiate__ns1__AdminJPNSetRightsInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminJPNSetRightsInfoResponse:
		return (void*)soap_instantiate__ns1__AdminJPNSetRightsInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminJPNSearchRightsInfoList:
		return (void*)soap_instantiate__ns1__AdminJPNSearchRightsInfoList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminJPNSearchRightsInfoListResponse:
		return (void*)soap_instantiate__ns1__AdminJPNSearchRightsInfoListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminLoginRightsJPN:
		return (void*)soap_instantiate__ns1__AdminLoginRightsJPN(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminLoginRightsJPNResponse:
		return (void*)soap_instantiate__ns1__AdminLoginRightsJPNResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetSearchLyricCount:
		return (void*)soap_instantiate__ns1__GetSearchLyricCount(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetSearchLyricCountResponse:
		return (void*)soap_instantiate__ns1__GetSearchLyricCountResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminLoginLyricMonitor:
		return (void*)soap_instantiate__ns1__AdminLoginLyricMonitor(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminLoginLyricMonitorResponse:
		return (void*)soap_instantiate__ns1__AdminLoginLyricMonitorResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetLyrics:
		return (void*)soap_instantiate__ns1__AdminGetLyrics(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetLyricsResponse:
		return (void*)soap_instantiate__ns1__AdminGetLyricsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminDeleteLyrics:
		return (void*)soap_instantiate__ns1__AdminDeleteLyrics(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminDeleteLyricsResponse:
		return (void*)soap_instantiate__ns1__AdminDeleteLyricsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetLatestLyricID:
		return (void*)soap_instantiate__ns1__AdminGetLatestLyricID(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AdminGetLatestLyricIDResponse:
		return (void*)soap_instantiate__ns1__AdminGetLatestLyricIDResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetMurekaInfo:
		return (void*)soap_instantiate___ns1__GetMurekaInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetSyncLyricBySearch:
		return (void*)soap_instantiate___ns1__GetSyncLyricBySearch(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetLinkLyric:
		return (void*)soap_instantiate___ns1__SetLinkLyric(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetResembleLyric2:
		return (void*)soap_instantiate___ns1__GetResembleLyric2(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetResembleLyric3:
		return (void*)soap_instantiate___ns1__GetResembleLyric3(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetResembleLyric2Count:
		return (void*)soap_instantiate___ns1__GetResembleLyric2Count(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetResembleLyric2CountTest:
		return (void*)soap_instantiate___ns1__GetResembleLyric2CountTest(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__UploadLyric:
		return (void*)soap_instantiate___ns1__UploadLyric(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__ReportFaultLyricWithComment:
		return (void*)soap_instantiate___ns1__ReportFaultLyricWithComment(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__ReportFaultLyric2:
		return (void*)soap_instantiate___ns1__ReportFaultLyric2(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__ReportRecommendationLyric:
		return (void*)soap_instantiate___ns1__ReportRecommendationLyric(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__IsReportedRecommendationLyric:
		return (void*)soap_instantiate___ns1__IsReportedRecommendationLyric(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__IsReportedFaultLyric:
		return (void*)soap_instantiate___ns1__IsReportedFaultLyric(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLyric3:
		return (void*)soap_instantiate___ns1__GetLyric3(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLyric4:
		return (void*)soap_instantiate___ns1__GetLyric4(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLyric5:
		return (void*)soap_instantiate___ns1__GetLyric5(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLyric6:
		return (void*)soap_instantiate___ns1__GetLyric6(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLyric7:
		return (void*)soap_instantiate___ns1__GetLyric7(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLyric8:
		return (void*)soap_instantiate___ns1__GetLyric8(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetSongID:
		return (void*)soap_instantiate___ns1__GetSongID(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetLyricList:
		return (void*)soap_instantiate___ns1__AdminGetLyricList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetLyricListByID:
		return (void*)soap_instantiate___ns1__AdminGetLyricListByID(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetReportFaultList:
		return (void*)soap_instantiate___ns1__AdminGetReportFaultList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetModifyList:
		return (void*)soap_instantiate___ns1__AdminGetModifyList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetRegisterList:
		return (void*)soap_instantiate___ns1__AdminGetRegisterList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MemberAddMember:
		return (void*)soap_instantiate___ns1__MemberAddMember(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MemberModifyMember:
		return (void*)soap_instantiate___ns1__MemberModifyMember(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MemberRemoveMember:
		return (void*)soap_instantiate___ns1__MemberRemoveMember(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MemberLogin:
		return (void*)soap_instantiate___ns1__MemberLogin(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MemberLogout:
		return (void*)soap_instantiate___ns1__MemberLogout(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MemberApplyRegistration:
		return (void*)soap_instantiate___ns1__MemberApplyRegistration(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MemberModifyMemberLicense:
		return (void*)soap_instantiate___ns1__MemberModifyMemberLicense(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MemberGetMemberList:
		return (void*)soap_instantiate___ns1__MemberGetMemberList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MemberGetMemberLicenseList:
		return (void*)soap_instantiate___ns1__MemberGetMemberLicenseList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminDeleteRecord:
		return (void*)soap_instantiate___ns1__AdminDeleteRecord(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminAdmitModifyLyric:
		return (void*)soap_instantiate___ns1__AdminAdmitModifyLyric(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminReportBlackList:
		return (void*)soap_instantiate___ns1__AdminReportBlackList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetCountInRegister:
		return (void*)soap_instantiate___ns1__AdminGetCountInRegister(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetCountChecksum:
		return (void*)soap_instantiate___ns1__AdminGetCountChecksum(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetCountLyric:
		return (void*)soap_instantiate___ns1__AdminGetCountLyric(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetCountModify:
		return (void*)soap_instantiate___ns1__AdminGetCountModify(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetCountReport:
		return (void*)soap_instantiate___ns1__AdminGetCountReport(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetAlbaStatistic:
		return (void*)soap_instantiate___ns1__AdminGetAlbaStatistic(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CastUploadExMetaData:
		return (void*)soap_instantiate___ns1__CastUploadExMetaData(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CastUploadExMetaData2:
		return (void*)soap_instantiate___ns1__CastUploadExMetaData2(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CastUploadExMetaData3:
		return (void*)soap_instantiate___ns1__CastUploadExMetaData3(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CastRemoveExMetaData:
		return (void*)soap_instantiate___ns1__CastRemoveExMetaData(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CastGetExMetaData:
		return (void*)soap_instantiate___ns1__CastGetExMetaData(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CastGetExMetaDataList:
		return (void*)soap_instantiate___ns1__CastGetExMetaDataList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CastGetExMetaDataList2:
		return (void*)soap_instantiate___ns1__CastGetExMetaDataList2(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CastGetExMetaDataList3:
		return (void*)soap_instantiate___ns1__CastGetExMetaDataList3(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetBroadcastingList:
		return (void*)soap_instantiate___ns1__GetBroadcastingList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetBroadcastingList2:
		return (void*)soap_instantiate___ns1__GetBroadcastingList2(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__UploadForeignLyric:
		return (void*)soap_instantiate___ns1__UploadForeignLyric(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetResembleLyricList:
		return (void*)soap_instantiate___ns1__GetResembleLyricList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetResembleLyricList2:
		return (void*)soap_instantiate___ns1__GetResembleLyricList2(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLyricByID:
		return (void*)soap_instantiate___ns1__GetLyricByID(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLyricByID2:
		return (void*)soap_instantiate___ns1__GetLyricByID2(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminJPNGetRightsInfoByModifyID:
		return (void*)soap_instantiate___ns1__AdminJPNGetRightsInfoByModifyID(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminJPNGetRightsInfoByLyricID:
		return (void*)soap_instantiate___ns1__AdminJPNGetRightsInfoByLyricID(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminJPNSetRightsInfo:
		return (void*)soap_instantiate___ns1__AdminJPNSetRightsInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminJPNSearchRightsInfoList:
		return (void*)soap_instantiate___ns1__AdminJPNSearchRightsInfoList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminLoginRightsJPN:
		return (void*)soap_instantiate___ns1__AdminLoginRightsJPN(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetSearchLyricCount:
		return (void*)soap_instantiate___ns1__GetSearchLyricCount(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminLoginLyricMonitor:
		return (void*)soap_instantiate___ns1__AdminLoginLyricMonitor(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetLyrics:
		return (void*)soap_instantiate___ns1__AdminGetLyrics(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminDeleteLyrics:
		return (void*)soap_instantiate___ns1__AdminDeleteLyrics(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetLatestLyricID:
		return (void*)soap_instantiate___ns1__AdminGetLatestLyricID(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetMurekaInfo_:
		return (void*)soap_instantiate___ns1__GetMurekaInfo_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetSyncLyricBySearch_:
		return (void*)soap_instantiate___ns1__GetSyncLyricBySearch_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetLinkLyric_:
		return (void*)soap_instantiate___ns1__SetLinkLyric_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetResembleLyric2_:
		return (void*)soap_instantiate___ns1__GetResembleLyric2_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetResembleLyric3_:
		return (void*)soap_instantiate___ns1__GetResembleLyric3_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetResembleLyric2Count_:
		return (void*)soap_instantiate___ns1__GetResembleLyric2Count_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetResembleLyric2CountTest_:
		return (void*)soap_instantiate___ns1__GetResembleLyric2CountTest_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__UploadLyric_:
		return (void*)soap_instantiate___ns1__UploadLyric_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__ReportFaultLyricWithComment_:
		return (void*)soap_instantiate___ns1__ReportFaultLyricWithComment_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__ReportFaultLyric2_:
		return (void*)soap_instantiate___ns1__ReportFaultLyric2_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__ReportRecommendationLyric_:
		return (void*)soap_instantiate___ns1__ReportRecommendationLyric_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__IsReportedRecommendationLyric_:
		return (void*)soap_instantiate___ns1__IsReportedRecommendationLyric_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__IsReportedFaultLyric_:
		return (void*)soap_instantiate___ns1__IsReportedFaultLyric_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLyric3_:
		return (void*)soap_instantiate___ns1__GetLyric3_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLyric4_:
		return (void*)soap_instantiate___ns1__GetLyric4_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLyric5_:
		return (void*)soap_instantiate___ns1__GetLyric5_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLyric6_:
		return (void*)soap_instantiate___ns1__GetLyric6_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLyric7_:
		return (void*)soap_instantiate___ns1__GetLyric7_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLyric8_:
		return (void*)soap_instantiate___ns1__GetLyric8_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetSongID_:
		return (void*)soap_instantiate___ns1__GetSongID_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetLyricList_:
		return (void*)soap_instantiate___ns1__AdminGetLyricList_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetLyricListByID_:
		return (void*)soap_instantiate___ns1__AdminGetLyricListByID_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetReportFaultList_:
		return (void*)soap_instantiate___ns1__AdminGetReportFaultList_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetModifyList_:
		return (void*)soap_instantiate___ns1__AdminGetModifyList_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetRegisterList_:
		return (void*)soap_instantiate___ns1__AdminGetRegisterList_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MemberAddMember_:
		return (void*)soap_instantiate___ns1__MemberAddMember_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MemberModifyMember_:
		return (void*)soap_instantiate___ns1__MemberModifyMember_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MemberRemoveMember_:
		return (void*)soap_instantiate___ns1__MemberRemoveMember_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MemberLogin_:
		return (void*)soap_instantiate___ns1__MemberLogin_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MemberLogout_:
		return (void*)soap_instantiate___ns1__MemberLogout_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MemberApplyRegistration_:
		return (void*)soap_instantiate___ns1__MemberApplyRegistration_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MemberModifyMemberLicense_:
		return (void*)soap_instantiate___ns1__MemberModifyMemberLicense_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MemberGetMemberList_:
		return (void*)soap_instantiate___ns1__MemberGetMemberList_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MemberGetMemberLicenseList_:
		return (void*)soap_instantiate___ns1__MemberGetMemberLicenseList_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminDeleteRecord_:
		return (void*)soap_instantiate___ns1__AdminDeleteRecord_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminAdmitModifyLyric_:
		return (void*)soap_instantiate___ns1__AdminAdmitModifyLyric_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminReportBlackList_:
		return (void*)soap_instantiate___ns1__AdminReportBlackList_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetCountInRegister_:
		return (void*)soap_instantiate___ns1__AdminGetCountInRegister_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetCountChecksum_:
		return (void*)soap_instantiate___ns1__AdminGetCountChecksum_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetCountLyric_:
		return (void*)soap_instantiate___ns1__AdminGetCountLyric_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetCountModify_:
		return (void*)soap_instantiate___ns1__AdminGetCountModify_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetCountReport_:
		return (void*)soap_instantiate___ns1__AdminGetCountReport_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetAlbaStatistic_:
		return (void*)soap_instantiate___ns1__AdminGetAlbaStatistic_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CastUploadExMetaData_:
		return (void*)soap_instantiate___ns1__CastUploadExMetaData_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CastUploadExMetaData2_:
		return (void*)soap_instantiate___ns1__CastUploadExMetaData2_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CastUploadExMetaData3_:
		return (void*)soap_instantiate___ns1__CastUploadExMetaData3_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CastRemoveExMetaData_:
		return (void*)soap_instantiate___ns1__CastRemoveExMetaData_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CastGetExMetaData_:
		return (void*)soap_instantiate___ns1__CastGetExMetaData_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CastGetExMetaDataList_:
		return (void*)soap_instantiate___ns1__CastGetExMetaDataList_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CastGetExMetaDataList2_:
		return (void*)soap_instantiate___ns1__CastGetExMetaDataList2_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CastGetExMetaDataList3_:
		return (void*)soap_instantiate___ns1__CastGetExMetaDataList3_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetBroadcastingList_:
		return (void*)soap_instantiate___ns1__GetBroadcastingList_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetBroadcastingList2_:
		return (void*)soap_instantiate___ns1__GetBroadcastingList2_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__UploadForeignLyric_:
		return (void*)soap_instantiate___ns1__UploadForeignLyric_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetResembleLyricList_:
		return (void*)soap_instantiate___ns1__GetResembleLyricList_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetResembleLyricList2_:
		return (void*)soap_instantiate___ns1__GetResembleLyricList2_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLyricByID_:
		return (void*)soap_instantiate___ns1__GetLyricByID_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLyricByID2_:
		return (void*)soap_instantiate___ns1__GetLyricByID2_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminJPNGetRightsInfoByModifyID_:
		return (void*)soap_instantiate___ns1__AdminJPNGetRightsInfoByModifyID_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminJPNGetRightsInfoByLyricID_:
		return (void*)soap_instantiate___ns1__AdminJPNGetRightsInfoByLyricID_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminJPNSetRightsInfo_:
		return (void*)soap_instantiate___ns1__AdminJPNSetRightsInfo_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminJPNSearchRightsInfoList_:
		return (void*)soap_instantiate___ns1__AdminJPNSearchRightsInfoList_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminLoginRightsJPN_:
		return (void*)soap_instantiate___ns1__AdminLoginRightsJPN_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetSearchLyricCount_:
		return (void*)soap_instantiate___ns1__GetSearchLyricCount_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminLoginLyricMonitor_:
		return (void*)soap_instantiate___ns1__AdminLoginLyricMonitor_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetLyrics_:
		return (void*)soap_instantiate___ns1__AdminGetLyrics_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminDeleteLyrics_:
		return (void*)soap_instantiate___ns1__AdminDeleteLyrics_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AdminGetLatestLyricID_:
		return (void*)soap_instantiate___ns1__AdminGetLatestLyricID_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfint:
		return (void*)soap_instantiate_std__vectorTemplateOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREFORMONITOR:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORERIGHTSINFO_USCOREJPN:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORESEARCHLYRIC_USCORELIST:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__GetBroadcastingListReturn:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__GetBroadcastingListReturn(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 AlsongAPI_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE((xsd__base64Binary*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__base64Binary*)p->ptr);
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREMUREKAINFO_USCORESERVICE:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREMUREKAINFO_USCORESERVICE*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREMUREKAINFO_USCORESERVICE*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfGetBroadcastingListReturn:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfGetBroadcastingListReturn*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfGetBroadcastingListReturn*)p->ptr);
		break;
	case SOAP_TYPE_ns1__GetBroadcastingListReturn:
		if (p->size < 0)
			SOAP_DELETE((ns1__GetBroadcastingListReturn*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__GetBroadcastingListReturn*)p->ptr);
		break;
	case SOAP_TYPE_ns1__UploadForeignLyricInfo:
		if (p->size < 0)
			SOAP_DELETE((ns1__UploadForeignLyricInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__UploadForeignLyricInfo*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCORESEARCHLYRIC_USCORELIST:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCORESEARCHLYRIC_USCORELIST*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCORESEARCHLYRIC_USCORELIST*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCORELYRICINFO:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCORELYRICINFO*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCORELYRICINFO*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCORERIGHTSINFO_USCOREJPN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCORERIGHTSINFO_USCOREJPN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCORERIGHTSINFO_USCOREJPN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREFORMONITOR:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCORELYRIC_USCOREFORMONITOR*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCORELYRIC_USCOREFORMONITOR*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfInt:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfInt*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfInt*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT:
		if (p->size < 0)
			SOAP_DELETE((ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetMurekaInfo:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetMurekaInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetMurekaInfo*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetMurekaInfoResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetMurekaInfoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetMurekaInfoResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetSyncLyricBySearch:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetSyncLyricBySearch*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetSyncLyricBySearch*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetSyncLyricBySearchResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetSyncLyricBySearchResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetSyncLyricBySearchResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetLinkLyric:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetLinkLyric*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetLinkLyric*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetLinkLyricResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetLinkLyricResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetLinkLyricResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetResembleLyric2:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetResembleLyric2*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetResembleLyric2*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetResembleLyric2Response:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetResembleLyric2Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetResembleLyric2Response*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetResembleLyric3:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetResembleLyric3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetResembleLyric3*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetResembleLyric3Response:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetResembleLyric3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetResembleLyric3Response*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetResembleLyric2Count:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetResembleLyric2Count*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetResembleLyric2Count*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetResembleLyric2CountResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetResembleLyric2CountResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetResembleLyric2CountResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetResembleLyric2CountTest:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetResembleLyric2CountTest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetResembleLyric2CountTest*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetResembleLyric2CountTestResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetResembleLyric2CountTestResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetResembleLyric2CountTestResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__UploadLyric:
		if (p->size < 0)
			SOAP_DELETE((_ns1__UploadLyric*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__UploadLyric*)p->ptr);
		break;
	case SOAP_TYPE__ns1__UploadLyricResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__UploadLyricResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__UploadLyricResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__ReportFaultLyricWithComment:
		if (p->size < 0)
			SOAP_DELETE((_ns1__ReportFaultLyricWithComment*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__ReportFaultLyricWithComment*)p->ptr);
		break;
	case SOAP_TYPE__ns1__ReportFaultLyricWithCommentResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__ReportFaultLyricWithCommentResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__ReportFaultLyricWithCommentResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__ReportFaultLyric2:
		if (p->size < 0)
			SOAP_DELETE((_ns1__ReportFaultLyric2*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__ReportFaultLyric2*)p->ptr);
		break;
	case SOAP_TYPE__ns1__ReportFaultLyric2Response:
		if (p->size < 0)
			SOAP_DELETE((_ns1__ReportFaultLyric2Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__ReportFaultLyric2Response*)p->ptr);
		break;
	case SOAP_TYPE__ns1__ReportRecommendationLyric:
		if (p->size < 0)
			SOAP_DELETE((_ns1__ReportRecommendationLyric*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__ReportRecommendationLyric*)p->ptr);
		break;
	case SOAP_TYPE__ns1__ReportRecommendationLyricResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__ReportRecommendationLyricResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__ReportRecommendationLyricResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__IsReportedRecommendationLyric:
		if (p->size < 0)
			SOAP_DELETE((_ns1__IsReportedRecommendationLyric*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__IsReportedRecommendationLyric*)p->ptr);
		break;
	case SOAP_TYPE__ns1__IsReportedRecommendationLyricResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__IsReportedRecommendationLyricResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__IsReportedRecommendationLyricResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__IsReportedFaultLyric:
		if (p->size < 0)
			SOAP_DELETE((_ns1__IsReportedFaultLyric*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__IsReportedFaultLyric*)p->ptr);
		break;
	case SOAP_TYPE__ns1__IsReportedFaultLyricResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__IsReportedFaultLyricResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__IsReportedFaultLyricResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetLyric3:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetLyric3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetLyric3*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetLyric3Response:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetLyric3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetLyric3Response*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetLyric4:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetLyric4*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetLyric4*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetLyric4Response:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetLyric4Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetLyric4Response*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetLyric5:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetLyric5*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetLyric5*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetLyric5Response:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetLyric5Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetLyric5Response*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetLyric6:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetLyric6*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetLyric6*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetLyric6Response:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetLyric6Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetLyric6Response*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetLyric7:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetLyric7*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetLyric7*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetLyric7Response:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetLyric7Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetLyric7Response*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetLyric8:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetLyric8*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetLyric8*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetLyric8Response:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetLyric8Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetLyric8Response*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetSongID:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetSongID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetSongID*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetSongIDResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetSongIDResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetSongIDResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetLyricList:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetLyricList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetLyricList*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetLyricListResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetLyricListResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetLyricListResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetLyricListByID:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetLyricListByID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetLyricListByID*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetLyricListByIDResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetLyricListByIDResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetLyricListByIDResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetReportFaultList:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetReportFaultList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetReportFaultList*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetReportFaultListResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetReportFaultListResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetReportFaultListResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetModifyList:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetModifyList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetModifyList*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetModifyListResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetModifyListResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetModifyListResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetRegisterList:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetRegisterList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetRegisterList*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetRegisterListResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetRegisterListResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetRegisterListResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MemberAddMember:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MemberAddMember*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MemberAddMember*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MemberAddMemberResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MemberAddMemberResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MemberAddMemberResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MemberModifyMember:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MemberModifyMember*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MemberModifyMember*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MemberModifyMemberResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MemberModifyMemberResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MemberModifyMemberResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MemberRemoveMember:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MemberRemoveMember*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MemberRemoveMember*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MemberRemoveMemberResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MemberRemoveMemberResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MemberRemoveMemberResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MemberLogin:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MemberLogin*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MemberLogin*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MemberLoginResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MemberLoginResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MemberLoginResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MemberLogout:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MemberLogout*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MemberLogout*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MemberLogoutResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MemberLogoutResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MemberLogoutResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MemberApplyRegistration:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MemberApplyRegistration*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MemberApplyRegistration*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MemberApplyRegistrationResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MemberApplyRegistrationResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MemberApplyRegistrationResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MemberModifyMemberLicense:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MemberModifyMemberLicense*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MemberModifyMemberLicense*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MemberModifyMemberLicenseResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MemberModifyMemberLicenseResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MemberModifyMemberLicenseResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MemberGetMemberList:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MemberGetMemberList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MemberGetMemberList*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MemberGetMemberListResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MemberGetMemberListResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MemberGetMemberListResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MemberGetMemberLicenseList:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MemberGetMemberLicenseList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MemberGetMemberLicenseList*)p->ptr);
		break;
	case SOAP_TYPE__ns1__MemberGetMemberLicenseListResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__MemberGetMemberLicenseListResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__MemberGetMemberLicenseListResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminDeleteRecord:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminDeleteRecord*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminDeleteRecord*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminDeleteRecordResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminDeleteRecordResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminDeleteRecordResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminAdmitModifyLyric:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminAdmitModifyLyric*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminAdmitModifyLyric*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminAdmitModifyLyricResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminAdmitModifyLyricResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminAdmitModifyLyricResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminReportBlackList:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminReportBlackList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminReportBlackList*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminReportBlackListResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminReportBlackListResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminReportBlackListResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetCountInRegister:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetCountInRegister*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetCountInRegister*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetCountInRegisterResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetCountInRegisterResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetCountInRegisterResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetCountChecksum:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetCountChecksum*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetCountChecksum*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetCountChecksumResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetCountChecksumResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetCountChecksumResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetCountLyric:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetCountLyric*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetCountLyric*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetCountLyricResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetCountLyricResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetCountLyricResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetCountModify:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetCountModify*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetCountModify*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetCountModifyResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetCountModifyResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetCountModifyResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetCountReport:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetCountReport*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetCountReport*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetCountReportResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetCountReportResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetCountReportResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetAlbaStatistic:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetAlbaStatistic*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetAlbaStatistic*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetAlbaStatisticResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetAlbaStatisticResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetAlbaStatisticResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CastUploadExMetaData:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CastUploadExMetaData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CastUploadExMetaData*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CastUploadExMetaDataResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CastUploadExMetaDataResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CastUploadExMetaDataResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CastUploadExMetaData2:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CastUploadExMetaData2*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CastUploadExMetaData2*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CastUploadExMetaData2Response:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CastUploadExMetaData2Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CastUploadExMetaData2Response*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CastUploadExMetaData3:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CastUploadExMetaData3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CastUploadExMetaData3*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CastUploadExMetaData3Response:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CastUploadExMetaData3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CastUploadExMetaData3Response*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CastRemoveExMetaData:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CastRemoveExMetaData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CastRemoveExMetaData*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CastRemoveExMetaDataResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CastRemoveExMetaDataResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CastRemoveExMetaDataResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CastGetExMetaData:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CastGetExMetaData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CastGetExMetaData*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CastGetExMetaDataResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CastGetExMetaDataResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CastGetExMetaDataResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CastGetExMetaDataList:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CastGetExMetaDataList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CastGetExMetaDataList*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CastGetExMetaDataListResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CastGetExMetaDataListResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CastGetExMetaDataListResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CastGetExMetaDataList2:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CastGetExMetaDataList2*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CastGetExMetaDataList2*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CastGetExMetaDataList2Response:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CastGetExMetaDataList2Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CastGetExMetaDataList2Response*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CastGetExMetaDataList3:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CastGetExMetaDataList3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CastGetExMetaDataList3*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CastGetExMetaDataList3Response:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CastGetExMetaDataList3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CastGetExMetaDataList3Response*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetBroadcastingList:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetBroadcastingList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetBroadcastingList*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetBroadcastingListResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetBroadcastingListResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetBroadcastingListResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetBroadcastingList2:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetBroadcastingList2*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetBroadcastingList2*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetBroadcastingList2Response:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetBroadcastingList2Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetBroadcastingList2Response*)p->ptr);
		break;
	case SOAP_TYPE__ns1__UploadForeignLyric:
		if (p->size < 0)
			SOAP_DELETE((_ns1__UploadForeignLyric*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__UploadForeignLyric*)p->ptr);
		break;
	case SOAP_TYPE__ns1__UploadForeignLyricResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__UploadForeignLyricResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__UploadForeignLyricResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetResembleLyricList:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetResembleLyricList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetResembleLyricList*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetResembleLyricListResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetResembleLyricListResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetResembleLyricListResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetResembleLyricList2:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetResembleLyricList2*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetResembleLyricList2*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetResembleLyricList2Response:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetResembleLyricList2Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetResembleLyricList2Response*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetLyricByID:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetLyricByID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetLyricByID*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetLyricByIDResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetLyricByIDResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetLyricByIDResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetLyricByID2:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetLyricByID2*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetLyricByID2*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetLyricByID2Response:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetLyricByID2Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetLyricByID2Response*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyID:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminJPNGetRightsInfoByModifyID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminJPNGetRightsInfoByModifyID*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyIDResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminJPNGetRightsInfoByModifyIDResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminJPNGetRightsInfoByModifyIDResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricID:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminJPNGetRightsInfoByLyricID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminJPNGetRightsInfoByLyricID*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricIDResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminJPNGetRightsInfoByLyricIDResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminJPNGetRightsInfoByLyricIDResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminJPNSetRightsInfo:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminJPNSetRightsInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminJPNSetRightsInfo*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminJPNSetRightsInfoResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminJPNSetRightsInfoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminJPNSetRightsInfoResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminJPNSearchRightsInfoList:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminJPNSearchRightsInfoList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminJPNSearchRightsInfoList*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminJPNSearchRightsInfoListResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminJPNSearchRightsInfoListResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminJPNSearchRightsInfoListResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminLoginRightsJPN:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminLoginRightsJPN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminLoginRightsJPN*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminLoginRightsJPNResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminLoginRightsJPNResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminLoginRightsJPNResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetSearchLyricCount:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetSearchLyricCount*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetSearchLyricCount*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetSearchLyricCountResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetSearchLyricCountResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetSearchLyricCountResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminLoginLyricMonitor:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminLoginLyricMonitor*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminLoginLyricMonitor*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminLoginLyricMonitorResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminLoginLyricMonitorResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminLoginLyricMonitorResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetLyrics:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetLyrics*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetLyrics*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetLyricsResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetLyricsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetLyricsResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminDeleteLyrics:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminDeleteLyrics*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminDeleteLyrics*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminDeleteLyricsResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminDeleteLyricsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminDeleteLyricsResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetLatestLyricID:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetLatestLyricID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetLatestLyricID*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AdminGetLatestLyricIDResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AdminGetLatestLyricIDResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AdminGetLatestLyricIDResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetMurekaInfo:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetMurekaInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetMurekaInfo*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetSyncLyricBySearch:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetSyncLyricBySearch*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetSyncLyricBySearch*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SetLinkLyric:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SetLinkLyric*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SetLinkLyric*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyric2:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetResembleLyric2*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetResembleLyric2*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyric3:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetResembleLyric3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetResembleLyric3*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyric2Count:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetResembleLyric2Count*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetResembleLyric2Count*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyric2CountTest:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetResembleLyric2CountTest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetResembleLyric2CountTest*)p->ptr);
		break;
	case SOAP_TYPE___ns1__UploadLyric:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__UploadLyric*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__UploadLyric*)p->ptr);
		break;
	case SOAP_TYPE___ns1__ReportFaultLyricWithComment:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__ReportFaultLyricWithComment*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__ReportFaultLyricWithComment*)p->ptr);
		break;
	case SOAP_TYPE___ns1__ReportFaultLyric2:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__ReportFaultLyric2*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__ReportFaultLyric2*)p->ptr);
		break;
	case SOAP_TYPE___ns1__ReportRecommendationLyric:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__ReportRecommendationLyric*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__ReportRecommendationLyric*)p->ptr);
		break;
	case SOAP_TYPE___ns1__IsReportedRecommendationLyric:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__IsReportedRecommendationLyric*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__IsReportedRecommendationLyric*)p->ptr);
		break;
	case SOAP_TYPE___ns1__IsReportedFaultLyric:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__IsReportedFaultLyric*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__IsReportedFaultLyric*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric3:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLyric3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLyric3*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric4:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLyric4*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLyric4*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric5:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLyric5*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLyric5*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric6:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLyric6*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLyric6*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric7:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLyric7*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLyric7*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric8:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLyric8*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLyric8*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetSongID:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetSongID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetSongID*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetLyricList:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetLyricList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetLyricList*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetLyricListByID:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetLyricListByID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetLyricListByID*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetReportFaultList:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetReportFaultList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetReportFaultList*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetModifyList:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetModifyList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetModifyList*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetRegisterList:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetRegisterList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetRegisterList*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MemberAddMember:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MemberAddMember*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MemberAddMember*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MemberModifyMember:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MemberModifyMember*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MemberModifyMember*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MemberRemoveMember:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MemberRemoveMember*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MemberRemoveMember*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MemberLogin:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MemberLogin*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MemberLogin*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MemberLogout:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MemberLogout*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MemberLogout*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MemberApplyRegistration:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MemberApplyRegistration*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MemberApplyRegistration*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MemberModifyMemberLicense:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MemberModifyMemberLicense*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MemberModifyMemberLicense*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MemberGetMemberList:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MemberGetMemberList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MemberGetMemberList*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MemberGetMemberLicenseList:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MemberGetMemberLicenseList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MemberGetMemberLicenseList*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminDeleteRecord:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminDeleteRecord*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminDeleteRecord*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminAdmitModifyLyric:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminAdmitModifyLyric*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminAdmitModifyLyric*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminReportBlackList:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminReportBlackList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminReportBlackList*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountInRegister:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetCountInRegister*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetCountInRegister*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountChecksum:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetCountChecksum*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetCountChecksum*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountLyric:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetCountLyric*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetCountLyric*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountModify:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetCountModify*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetCountModify*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountReport:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetCountReport*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetCountReport*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetAlbaStatistic:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetAlbaStatistic*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetAlbaStatistic*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CastUploadExMetaData:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CastUploadExMetaData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CastUploadExMetaData*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CastUploadExMetaData2:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CastUploadExMetaData2*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CastUploadExMetaData2*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CastUploadExMetaData3:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CastUploadExMetaData3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CastUploadExMetaData3*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CastRemoveExMetaData:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CastRemoveExMetaData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CastRemoveExMetaData*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CastGetExMetaData:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CastGetExMetaData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CastGetExMetaData*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CastGetExMetaDataList:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CastGetExMetaDataList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CastGetExMetaDataList*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CastGetExMetaDataList2:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CastGetExMetaDataList2*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CastGetExMetaDataList2*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CastGetExMetaDataList3:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CastGetExMetaDataList3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CastGetExMetaDataList3*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetBroadcastingList:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetBroadcastingList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetBroadcastingList*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetBroadcastingList2:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetBroadcastingList2*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetBroadcastingList2*)p->ptr);
		break;
	case SOAP_TYPE___ns1__UploadForeignLyric:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__UploadForeignLyric*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__UploadForeignLyric*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyricList:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetResembleLyricList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetResembleLyricList*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyricList2:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetResembleLyricList2*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetResembleLyricList2*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLyricByID:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLyricByID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLyricByID*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLyricByID2:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLyricByID2*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLyricByID2*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminJPNGetRightsInfoByModifyID:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminJPNGetRightsInfoByModifyID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminJPNGetRightsInfoByModifyID*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminJPNGetRightsInfoByLyricID:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminJPNGetRightsInfoByLyricID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminJPNGetRightsInfoByLyricID*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminJPNSetRightsInfo:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminJPNSetRightsInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminJPNSetRightsInfo*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminJPNSearchRightsInfoList:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminJPNSearchRightsInfoList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminJPNSearchRightsInfoList*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminLoginRightsJPN:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminLoginRightsJPN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminLoginRightsJPN*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetSearchLyricCount:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetSearchLyricCount*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetSearchLyricCount*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminLoginLyricMonitor:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminLoginLyricMonitor*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminLoginLyricMonitor*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetLyrics:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetLyrics*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetLyrics*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminDeleteLyrics:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminDeleteLyrics*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminDeleteLyrics*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetLatestLyricID:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetLatestLyricID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetLatestLyricID*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetMurekaInfo_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetMurekaInfo_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetMurekaInfo_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetSyncLyricBySearch_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetSyncLyricBySearch_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetSyncLyricBySearch_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SetLinkLyric_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SetLinkLyric_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SetLinkLyric_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyric2_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetResembleLyric2_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetResembleLyric2_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyric3_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetResembleLyric3_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetResembleLyric3_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyric2Count_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetResembleLyric2Count_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetResembleLyric2Count_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyric2CountTest_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetResembleLyric2CountTest_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetResembleLyric2CountTest_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__UploadLyric_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__UploadLyric_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__UploadLyric_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__ReportFaultLyricWithComment_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__ReportFaultLyricWithComment_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__ReportFaultLyricWithComment_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__ReportFaultLyric2_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__ReportFaultLyric2_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__ReportFaultLyric2_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__ReportRecommendationLyric_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__ReportRecommendationLyric_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__ReportRecommendationLyric_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__IsReportedRecommendationLyric_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__IsReportedRecommendationLyric_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__IsReportedRecommendationLyric_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__IsReportedFaultLyric_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__IsReportedFaultLyric_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__IsReportedFaultLyric_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric3_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLyric3_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLyric3_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric4_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLyric4_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLyric4_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric5_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLyric5_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLyric5_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric6_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLyric6_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLyric6_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric7_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLyric7_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLyric7_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLyric8_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLyric8_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLyric8_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetSongID_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetSongID_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetSongID_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetLyricList_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetLyricList_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetLyricList_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetLyricListByID_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetLyricListByID_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetLyricListByID_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetReportFaultList_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetReportFaultList_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetReportFaultList_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetModifyList_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetModifyList_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetModifyList_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetRegisterList_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetRegisterList_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetRegisterList_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MemberAddMember_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MemberAddMember_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MemberAddMember_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MemberModifyMember_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MemberModifyMember_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MemberModifyMember_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MemberRemoveMember_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MemberRemoveMember_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MemberRemoveMember_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MemberLogin_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MemberLogin_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MemberLogin_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MemberLogout_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MemberLogout_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MemberLogout_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MemberApplyRegistration_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MemberApplyRegistration_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MemberApplyRegistration_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MemberModifyMemberLicense_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MemberModifyMemberLicense_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MemberModifyMemberLicense_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MemberGetMemberList_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MemberGetMemberList_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MemberGetMemberList_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__MemberGetMemberLicenseList_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__MemberGetMemberLicenseList_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__MemberGetMemberLicenseList_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminDeleteRecord_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminDeleteRecord_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminDeleteRecord_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminAdmitModifyLyric_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminAdmitModifyLyric_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminAdmitModifyLyric_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminReportBlackList_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminReportBlackList_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminReportBlackList_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountInRegister_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetCountInRegister_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetCountInRegister_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountChecksum_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetCountChecksum_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetCountChecksum_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountLyric_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetCountLyric_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetCountLyric_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountModify_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetCountModify_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetCountModify_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetCountReport_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetCountReport_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetCountReport_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetAlbaStatistic_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetAlbaStatistic_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetAlbaStatistic_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CastUploadExMetaData_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CastUploadExMetaData_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CastUploadExMetaData_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CastUploadExMetaData2_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CastUploadExMetaData2_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CastUploadExMetaData2_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CastUploadExMetaData3_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CastUploadExMetaData3_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CastUploadExMetaData3_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CastRemoveExMetaData_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CastRemoveExMetaData_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CastRemoveExMetaData_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CastGetExMetaData_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CastGetExMetaData_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CastGetExMetaData_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CastGetExMetaDataList_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CastGetExMetaDataList_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CastGetExMetaDataList_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CastGetExMetaDataList2_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CastGetExMetaDataList2_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CastGetExMetaDataList2_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CastGetExMetaDataList3_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CastGetExMetaDataList3_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CastGetExMetaDataList3_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetBroadcastingList_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetBroadcastingList_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetBroadcastingList_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetBroadcastingList2_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetBroadcastingList2_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetBroadcastingList2_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__UploadForeignLyric_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__UploadForeignLyric_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__UploadForeignLyric_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyricList_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetResembleLyricList_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetResembleLyricList_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetResembleLyricList2_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetResembleLyricList2_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetResembleLyricList2_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLyricByID_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLyricByID_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLyricByID_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLyricByID2_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLyricByID2_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLyricByID2_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminJPNGetRightsInfoByModifyID_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminJPNGetRightsInfoByModifyID_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminJPNGetRightsInfoByModifyID_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminJPNGetRightsInfoByLyricID_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminJPNGetRightsInfoByLyricID_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminJPNGetRightsInfoByLyricID_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminJPNSetRightsInfo_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminJPNSetRightsInfo_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminJPNSetRightsInfo_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminJPNSearchRightsInfoList_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminJPNSearchRightsInfoList_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminJPNSearchRightsInfoList_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminLoginRightsJPN_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminLoginRightsJPN_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminLoginRightsJPN_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetSearchLyricCount_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetSearchLyricCount_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetSearchLyricCount_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminLoginLyricMonitor_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminLoginLyricMonitor_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminLoginLyricMonitor_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetLyrics_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetLyrics_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetLyrics_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminDeleteLyrics_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminDeleteLyrics_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminDeleteLyrics_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AdminGetLatestLyricID_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AdminGetLatestLyricID_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AdminGetLatestLyricID_*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfint:
		if (p->size < 0)
			SOAP_DELETE((std::vector<int >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<int >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREFORMONITOR:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns1__ST_USCORELYRIC_USCOREFORMONITOR * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns1__ST_USCORELYRIC_USCOREFORMONITOR * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORERIGHTSINFO_USCOREJPN:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns1__ST_USCORERIGHTSINFO_USCOREJPN * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns1__ST_USCORERIGHTSINFO_USCOREJPN * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORESEARCHLYRIC_USCORELIST:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns1__ST_USCORESEARCHLYRIC_USCORELIST * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns1__ST_USCORESEARCHLYRIC_USCORELIST * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__GetBroadcastingListReturn:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns1__GetBroadcastingListReturn * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns1__GetBroadcastingListReturn * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, AlsongAPI_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, AlsongAPI_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 AlsongAPI_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container AlsongAPI_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * >*)p)[len] = *(ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container AlsongAPI_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<int >*)p)[len] = *(int *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREFORMONITOR:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container AlsongAPI_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__ST_USCORELYRIC_USCOREFORMONITOR * >*)p)[len] = *(ns1__ST_USCORELYRIC_USCOREFORMONITOR **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORERIGHTSINFO_USCOREJPN:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container AlsongAPI_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__ST_USCORERIGHTSINFO_USCOREJPN * >*)p)[len] = *(ns1__ST_USCORERIGHTSINFO_USCOREJPN **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORESEARCHLYRIC_USCORELIST:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container AlsongAPI_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__ST_USCORESEARCHLYRIC_USCORELIST * >*)p)[len] = *(ns1__ST_USCORESEARCHLYRIC_USCORELIST **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__GetBroadcastingListReturn:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container AlsongAPI_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__GetBroadcastingListReturn * >*)p)[len] = *(ns1__GetBroadcastingListReturn **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container AlsongAPI_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * >*)p)[len] = *(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container AlsongAPI_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * >*)p)[len] = *(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container AlsongAPI_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * >*)p)[len] = *(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container AlsongAPI_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * >*)p)[len] = *(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container AlsongAPI_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * >*)p)[len] = *(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container AlsongAPI_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * >*)p)[len] = *(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container AlsongAPI_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * >*)p)[len] = *(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container AlsongAPI_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * >*)p)[len] = *(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container AlsongAPI_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * >*)p)[len] = *(ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container AlsongAPI_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * >*)p)[len] = *(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container AlsongAPI_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * >*)p)[len] = *(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{	short *p;
	p = soap_inshort(soap, tag, a, type, SOAP_TYPE_short);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_short);
	if (soap_out_short(soap, tag?tag:"short", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{	float *p;
	p = soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_float);
	if (soap_out_float(soap, tag?tag:"float", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_xsd__unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_xsd__unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_xsd__unsignedByte);
	if (soap_out_xsd__unsignedByte(soap, tag?tag:"xsd:unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _ns1__AdminGetLatestLyricIDResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__AdminGetLatestLyricIDResponse::AdminGetLatestLyricIDResult);
	/* transient soap skipped */
}

void _ns1__AdminGetLatestLyricIDResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetLatestLyricIDResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetLatestLyricIDResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetLatestLyricIDResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminGetLatestLyricIDResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetLatestLyricIDResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:AdminGetLatestLyricIDResult");
	if (soap_out_int(soap, "ns1:AdminGetLatestLyricIDResult", -1, &(a->_ns1__AdminGetLatestLyricIDResponse::AdminGetLatestLyricIDResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetLatestLyricIDResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetLatestLyricIDResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetLatestLyricIDResponse * SOAP_FMAC4 soap_in__ns1__AdminGetLatestLyricIDResponse(struct soap *soap, const char *tag, _ns1__AdminGetLatestLyricIDResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetLatestLyricIDResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetLatestLyricIDResponse, sizeof(_ns1__AdminGetLatestLyricIDResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetLatestLyricIDResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetLatestLyricIDResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminGetLatestLyricIDResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminGetLatestLyricIDResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:AdminGetLatestLyricIDResult", &(a->_ns1__AdminGetLatestLyricIDResponse::AdminGetLatestLyricIDResult), "xsd:int"))
				{	soap_flag_AdminGetLatestLyricIDResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminGetLatestLyricIDResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetLatestLyricIDResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetLatestLyricIDResponse, 0, sizeof(_ns1__AdminGetLatestLyricIDResponse), 0, soap_copy__ns1__AdminGetLatestLyricIDResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AdminGetLatestLyricIDResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminGetLatestLyricIDResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetLatestLyricIDResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetLatestLyricIDResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetLatestLyricIDResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetLatestLyricIDResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetLatestLyricIDResponse * SOAP_FMAC4 soap_get__ns1__AdminGetLatestLyricIDResponse(struct soap *soap, _ns1__AdminGetLatestLyricIDResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetLatestLyricIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetLatestLyricIDResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminGetLatestLyricIDResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetLatestLyricIDResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetLatestLyricIDResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetLatestLyricIDResponse);
		if (size)
			*size = sizeof(_ns1__AdminGetLatestLyricIDResponse);
		((_ns1__AdminGetLatestLyricIDResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetLatestLyricIDResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetLatestLyricIDResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetLatestLyricIDResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetLatestLyricIDResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetLatestLyricIDResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetLatestLyricIDResponse %p -> %p\n", q, p));
	*(_ns1__AdminGetLatestLyricIDResponse*)p = *(_ns1__AdminGetLatestLyricIDResponse*)q;
}

void _ns1__AdminGetLatestLyricID::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__AdminGetLatestLyricID::reserved);
	/* transient soap skipped */
}

void _ns1__AdminGetLatestLyricID::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetLatestLyricID::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetLatestLyricID(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetLatestLyricID(struct soap *soap, const char *tag, int id, const _ns1__AdminGetLatestLyricID *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetLatestLyricID), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:reserved", -1, &(a->_ns1__AdminGetLatestLyricID::reserved), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetLatestLyricID::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetLatestLyricID(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetLatestLyricID * SOAP_FMAC4 soap_in__ns1__AdminGetLatestLyricID(struct soap *soap, const char *tag, _ns1__AdminGetLatestLyricID *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetLatestLyricID *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetLatestLyricID, sizeof(_ns1__AdminGetLatestLyricID), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetLatestLyricID)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetLatestLyricID *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_reserved1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_reserved1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:reserved", &(a->_ns1__AdminGetLatestLyricID::reserved), "xsd:int"))
				{	soap_flag_reserved1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetLatestLyricID *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetLatestLyricID, 0, sizeof(_ns1__AdminGetLatestLyricID), 0, soap_copy__ns1__AdminGetLatestLyricID);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_reserved1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminGetLatestLyricID::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetLatestLyricID);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetLatestLyricID", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetLatestLyricID::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetLatestLyricID(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetLatestLyricID * SOAP_FMAC4 soap_get__ns1__AdminGetLatestLyricID(struct soap *soap, _ns1__AdminGetLatestLyricID *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetLatestLyricID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetLatestLyricID * SOAP_FMAC2 soap_instantiate__ns1__AdminGetLatestLyricID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetLatestLyricID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetLatestLyricID, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetLatestLyricID);
		if (size)
			*size = sizeof(_ns1__AdminGetLatestLyricID);
		((_ns1__AdminGetLatestLyricID*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetLatestLyricID, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetLatestLyricID);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetLatestLyricID*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetLatestLyricID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetLatestLyricID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetLatestLyricID %p -> %p\n", q, p));
	*(_ns1__AdminGetLatestLyricID*)p = *(_ns1__AdminGetLatestLyricID*)q;
}

void _ns1__AdminDeleteLyricsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminDeleteLyricsResponse::AdminDeleteLyricsResult = NULL;
	/* transient soap skipped */
}

void _ns1__AdminDeleteLyricsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, &this->_ns1__AdminDeleteLyricsResponse::AdminDeleteLyricsResult);
	/* transient soap skipped */
#endif
}

int _ns1__AdminDeleteLyricsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminDeleteLyricsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminDeleteLyricsResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminDeleteLyricsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminDeleteLyricsResponse), type))
		return soap->error;
	if (a->AdminDeleteLyricsResult)
		soap_element_result(soap, "ns1:AdminDeleteLyricsResult");
	if (soap_out_PointerTons1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, "ns1:AdminDeleteLyricsResult", -1, &(a->_ns1__AdminDeleteLyricsResponse::AdminDeleteLyricsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminDeleteLyricsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminDeleteLyricsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminDeleteLyricsResponse * SOAP_FMAC4 soap_in__ns1__AdminDeleteLyricsResponse(struct soap *soap, const char *tag, _ns1__AdminDeleteLyricsResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminDeleteLyricsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminDeleteLyricsResponse, sizeof(_ns1__AdminDeleteLyricsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminDeleteLyricsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminDeleteLyricsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminDeleteLyricsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminDeleteLyricsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, "ns1:AdminDeleteLyricsResult", &(a->_ns1__AdminDeleteLyricsResponse::AdminDeleteLyricsResult), "ns1:ArrayOfST_LYRIC_DELETE_RESULT"))
				{	soap_flag_AdminDeleteLyricsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminDeleteLyricsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminDeleteLyricsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminDeleteLyricsResponse, 0, sizeof(_ns1__AdminDeleteLyricsResponse), 0, soap_copy__ns1__AdminDeleteLyricsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AdminDeleteLyricsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminDeleteLyricsResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminDeleteLyricsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminDeleteLyricsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminDeleteLyricsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminDeleteLyricsResponse * SOAP_FMAC4 soap_get__ns1__AdminDeleteLyricsResponse(struct soap *soap, _ns1__AdminDeleteLyricsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminDeleteLyricsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminDeleteLyricsResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminDeleteLyricsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminDeleteLyricsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminDeleteLyricsResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminDeleteLyricsResponse);
		if (size)
			*size = sizeof(_ns1__AdminDeleteLyricsResponse);
		((_ns1__AdminDeleteLyricsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminDeleteLyricsResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminDeleteLyricsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminDeleteLyricsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminDeleteLyricsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminDeleteLyricsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminDeleteLyricsResponse %p -> %p\n", q, p));
	*(_ns1__AdminDeleteLyricsResponse*)p = *(_ns1__AdminDeleteLyricsResponse*)q;
}

void _ns1__AdminDeleteLyrics::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminDeleteLyrics::infoIDs = NULL;
	/* transient soap skipped */
}

void _ns1__AdminDeleteLyrics::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfInt(soap, &this->_ns1__AdminDeleteLyrics::infoIDs);
	/* transient soap skipped */
#endif
}

int _ns1__AdminDeleteLyrics::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminDeleteLyrics(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminDeleteLyrics(struct soap *soap, const char *tag, int id, const _ns1__AdminDeleteLyrics *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminDeleteLyrics), type))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfInt(soap, "ns1:infoIDs", -1, &(a->_ns1__AdminDeleteLyrics::infoIDs), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminDeleteLyrics::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminDeleteLyrics(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminDeleteLyrics * SOAP_FMAC4 soap_in__ns1__AdminDeleteLyrics(struct soap *soap, const char *tag, _ns1__AdminDeleteLyrics *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminDeleteLyrics *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminDeleteLyrics, sizeof(_ns1__AdminDeleteLyrics), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminDeleteLyrics)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminDeleteLyrics *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_infoIDs1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_infoIDs1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfInt(soap, "ns1:infoIDs", &(a->_ns1__AdminDeleteLyrics::infoIDs), "ns1:ArrayOfInt"))
				{	soap_flag_infoIDs1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminDeleteLyrics *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminDeleteLyrics, 0, sizeof(_ns1__AdminDeleteLyrics), 0, soap_copy__ns1__AdminDeleteLyrics);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AdminDeleteLyrics::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminDeleteLyrics);
	if (this->soap_out(soap, tag?tag:"ns1:AdminDeleteLyrics", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminDeleteLyrics::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminDeleteLyrics(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminDeleteLyrics * SOAP_FMAC4 soap_get__ns1__AdminDeleteLyrics(struct soap *soap, _ns1__AdminDeleteLyrics *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminDeleteLyrics(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminDeleteLyrics * SOAP_FMAC2 soap_instantiate__ns1__AdminDeleteLyrics(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminDeleteLyrics(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminDeleteLyrics, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminDeleteLyrics);
		if (size)
			*size = sizeof(_ns1__AdminDeleteLyrics);
		((_ns1__AdminDeleteLyrics*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminDeleteLyrics, n);
		if (size)
			*size = n * sizeof(_ns1__AdminDeleteLyrics);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminDeleteLyrics*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminDeleteLyrics*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminDeleteLyrics(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminDeleteLyrics %p -> %p\n", q, p));
	*(_ns1__AdminDeleteLyrics*)p = *(_ns1__AdminDeleteLyrics*)q;
}

void _ns1__AdminGetLyricsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminGetLyricsResponse::AdminGetLyricsResult = NULL;
	/* transient soap skipped */
}

void _ns1__AdminGetLyricsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(soap, &this->_ns1__AdminGetLyricsResponse::AdminGetLyricsResult);
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetLyricsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetLyricsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetLyricsResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminGetLyricsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetLyricsResponse), type))
		return soap->error;
	if (a->AdminGetLyricsResult)
		soap_element_result(soap, "ns1:AdminGetLyricsResult");
	if (soap_out_PointerTons1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(soap, "ns1:AdminGetLyricsResult", -1, &(a->_ns1__AdminGetLyricsResponse::AdminGetLyricsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetLyricsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetLyricsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetLyricsResponse * SOAP_FMAC4 soap_in__ns1__AdminGetLyricsResponse(struct soap *soap, const char *tag, _ns1__AdminGetLyricsResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetLyricsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetLyricsResponse, sizeof(_ns1__AdminGetLyricsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetLyricsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetLyricsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminGetLyricsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminGetLyricsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(soap, "ns1:AdminGetLyricsResult", &(a->_ns1__AdminGetLyricsResponse::AdminGetLyricsResult), "ns1:ArrayOfST_LYRIC_FORMONITOR"))
				{	soap_flag_AdminGetLyricsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminGetLyricsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetLyricsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetLyricsResponse, 0, sizeof(_ns1__AdminGetLyricsResponse), 0, soap_copy__ns1__AdminGetLyricsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AdminGetLyricsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetLyricsResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetLyricsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetLyricsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetLyricsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetLyricsResponse * SOAP_FMAC4 soap_get__ns1__AdminGetLyricsResponse(struct soap *soap, _ns1__AdminGetLyricsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetLyricsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetLyricsResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminGetLyricsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetLyricsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetLyricsResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetLyricsResponse);
		if (size)
			*size = sizeof(_ns1__AdminGetLyricsResponse);
		((_ns1__AdminGetLyricsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetLyricsResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetLyricsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetLyricsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetLyricsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetLyricsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetLyricsResponse %p -> %p\n", q, p));
	*(_ns1__AdminGetLyricsResponse*)p = *(_ns1__AdminGetLyricsResponse*)q;
}

void _ns1__AdminGetLyrics::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__AdminGetLyrics::infoIDLo);
	soap_default_int(soap, &this->_ns1__AdminGetLyrics::infoIDHi);
	/* transient soap skipped */
}

void _ns1__AdminGetLyrics::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetLyrics::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetLyrics(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetLyrics(struct soap *soap, const char *tag, int id, const _ns1__AdminGetLyrics *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetLyrics), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:infoIDLo", -1, &(a->_ns1__AdminGetLyrics::infoIDLo), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:infoIDHi", -1, &(a->_ns1__AdminGetLyrics::infoIDHi), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetLyrics::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetLyrics(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetLyrics * SOAP_FMAC4 soap_in__ns1__AdminGetLyrics(struct soap *soap, const char *tag, _ns1__AdminGetLyrics *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetLyrics *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetLyrics, sizeof(_ns1__AdminGetLyrics), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetLyrics)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetLyrics *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_infoIDLo1 = 1;
	size_t soap_flag_infoIDHi1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_infoIDLo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:infoIDLo", &(a->_ns1__AdminGetLyrics::infoIDLo), "xsd:int"))
				{	soap_flag_infoIDLo1--;
					continue;
				}
			if (soap_flag_infoIDHi1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:infoIDHi", &(a->_ns1__AdminGetLyrics::infoIDHi), "xsd:int"))
				{	soap_flag_infoIDHi1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetLyrics *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetLyrics, 0, sizeof(_ns1__AdminGetLyrics), 0, soap_copy__ns1__AdminGetLyrics);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_infoIDLo1 > 0 || soap_flag_infoIDHi1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminGetLyrics::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetLyrics);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetLyrics", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetLyrics::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetLyrics(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetLyrics * SOAP_FMAC4 soap_get__ns1__AdminGetLyrics(struct soap *soap, _ns1__AdminGetLyrics *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetLyrics(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetLyrics * SOAP_FMAC2 soap_instantiate__ns1__AdminGetLyrics(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetLyrics(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetLyrics, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetLyrics);
		if (size)
			*size = sizeof(_ns1__AdminGetLyrics);
		((_ns1__AdminGetLyrics*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetLyrics, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetLyrics);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetLyrics*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetLyrics*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetLyrics(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetLyrics %p -> %p\n", q, p));
	*(_ns1__AdminGetLyrics*)p = *(_ns1__AdminGetLyrics*)q;
}

void _ns1__AdminLoginLyricMonitorResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__AdminLoginLyricMonitorResponse::AdminLoginLyricMonitorResult);
	/* transient soap skipped */
}

void _ns1__AdminLoginLyricMonitorResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__AdminLoginLyricMonitorResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminLoginLyricMonitorResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminLoginLyricMonitorResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminLoginLyricMonitorResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminLoginLyricMonitorResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:AdminLoginLyricMonitorResult");
	if (soap_out_bool(soap, "ns1:AdminLoginLyricMonitorResult", -1, &(a->_ns1__AdminLoginLyricMonitorResponse::AdminLoginLyricMonitorResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminLoginLyricMonitorResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminLoginLyricMonitorResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminLoginLyricMonitorResponse * SOAP_FMAC4 soap_in__ns1__AdminLoginLyricMonitorResponse(struct soap *soap, const char *tag, _ns1__AdminLoginLyricMonitorResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminLoginLyricMonitorResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminLoginLyricMonitorResponse, sizeof(_ns1__AdminLoginLyricMonitorResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminLoginLyricMonitorResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminLoginLyricMonitorResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminLoginLyricMonitorResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminLoginLyricMonitorResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:AdminLoginLyricMonitorResult", &(a->_ns1__AdminLoginLyricMonitorResponse::AdminLoginLyricMonitorResult), "xsd:boolean"))
				{	soap_flag_AdminLoginLyricMonitorResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminLoginLyricMonitorResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminLoginLyricMonitorResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminLoginLyricMonitorResponse, 0, sizeof(_ns1__AdminLoginLyricMonitorResponse), 0, soap_copy__ns1__AdminLoginLyricMonitorResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AdminLoginLyricMonitorResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminLoginLyricMonitorResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminLoginLyricMonitorResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminLoginLyricMonitorResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminLoginLyricMonitorResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminLoginLyricMonitorResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminLoginLyricMonitorResponse * SOAP_FMAC4 soap_get__ns1__AdminLoginLyricMonitorResponse(struct soap *soap, _ns1__AdminLoginLyricMonitorResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminLoginLyricMonitorResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminLoginLyricMonitorResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminLoginLyricMonitorResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminLoginLyricMonitorResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminLoginLyricMonitorResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminLoginLyricMonitorResponse);
		if (size)
			*size = sizeof(_ns1__AdminLoginLyricMonitorResponse);
		((_ns1__AdminLoginLyricMonitorResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminLoginLyricMonitorResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminLoginLyricMonitorResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminLoginLyricMonitorResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminLoginLyricMonitorResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminLoginLyricMonitorResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminLoginLyricMonitorResponse %p -> %p\n", q, p));
	*(_ns1__AdminLoginLyricMonitorResponse*)p = *(_ns1__AdminLoginLyricMonitorResponse*)q;
}

void _ns1__AdminLoginLyricMonitor::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminLoginLyricMonitor::userID = NULL;
	this->_ns1__AdminLoginLyricMonitor::password = NULL;
	/* transient soap skipped */
}

void _ns1__AdminLoginLyricMonitor::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__AdminLoginLyricMonitor::userID);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__AdminLoginLyricMonitor::password);
	/* transient soap skipped */
#endif
}

int _ns1__AdminLoginLyricMonitor::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminLoginLyricMonitor(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminLoginLyricMonitor(struct soap *soap, const char *tag, int id, const _ns1__AdminLoginLyricMonitor *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminLoginLyricMonitor), type))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:userID", -1, &(a->_ns1__AdminLoginLyricMonitor::userID), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:password", -1, &(a->_ns1__AdminLoginLyricMonitor::password), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminLoginLyricMonitor::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminLoginLyricMonitor(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminLoginLyricMonitor * SOAP_FMAC4 soap_in__ns1__AdminLoginLyricMonitor(struct soap *soap, const char *tag, _ns1__AdminLoginLyricMonitor *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminLoginLyricMonitor *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminLoginLyricMonitor, sizeof(_ns1__AdminLoginLyricMonitor), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminLoginLyricMonitor)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminLoginLyricMonitor *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userID1 = 1;
	size_t soap_flag_password1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:userID", &(a->_ns1__AdminLoginLyricMonitor::userID), "xsd:base64Binary"))
				{	soap_flag_userID1--;
					continue;
				}
			if (soap_flag_password1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:password", &(a->_ns1__AdminLoginLyricMonitor::password), "xsd:base64Binary"))
				{	soap_flag_password1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminLoginLyricMonitor *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminLoginLyricMonitor, 0, sizeof(_ns1__AdminLoginLyricMonitor), 0, soap_copy__ns1__AdminLoginLyricMonitor);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AdminLoginLyricMonitor::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminLoginLyricMonitor);
	if (this->soap_out(soap, tag?tag:"ns1:AdminLoginLyricMonitor", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminLoginLyricMonitor::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminLoginLyricMonitor(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminLoginLyricMonitor * SOAP_FMAC4 soap_get__ns1__AdminLoginLyricMonitor(struct soap *soap, _ns1__AdminLoginLyricMonitor *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminLoginLyricMonitor(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminLoginLyricMonitor * SOAP_FMAC2 soap_instantiate__ns1__AdminLoginLyricMonitor(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminLoginLyricMonitor(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminLoginLyricMonitor, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminLoginLyricMonitor);
		if (size)
			*size = sizeof(_ns1__AdminLoginLyricMonitor);
		((_ns1__AdminLoginLyricMonitor*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminLoginLyricMonitor, n);
		if (size)
			*size = n * sizeof(_ns1__AdminLoginLyricMonitor);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminLoginLyricMonitor*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminLoginLyricMonitor*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminLoginLyricMonitor(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminLoginLyricMonitor %p -> %p\n", q, p));
	*(_ns1__AdminLoginLyricMonitor*)p = *(_ns1__AdminLoginLyricMonitor*)q;
}

void _ns1__GetSearchLyricCountResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__GetSearchLyricCountResponse::GetSearchLyricCountResult);
	/* transient soap skipped */
}

void _ns1__GetSearchLyricCountResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__GetSearchLyricCountResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetSearchLyricCountResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSearchLyricCountResponse(struct soap *soap, const char *tag, int id, const _ns1__GetSearchLyricCountResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetSearchLyricCountResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:GetSearchLyricCountResult");
	if (soap_out_int(soap, "ns1:GetSearchLyricCountResult", -1, &(a->_ns1__GetSearchLyricCountResponse::GetSearchLyricCountResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetSearchLyricCountResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetSearchLyricCountResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetSearchLyricCountResponse * SOAP_FMAC4 soap_in__ns1__GetSearchLyricCountResponse(struct soap *soap, const char *tag, _ns1__GetSearchLyricCountResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetSearchLyricCountResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetSearchLyricCountResponse, sizeof(_ns1__GetSearchLyricCountResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetSearchLyricCountResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetSearchLyricCountResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetSearchLyricCountResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetSearchLyricCountResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:GetSearchLyricCountResult", &(a->_ns1__GetSearchLyricCountResponse::GetSearchLyricCountResult), "xsd:int"))
				{	soap_flag_GetSearchLyricCountResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetSearchLyricCountResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetSearchLyricCountResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetSearchLyricCountResponse, 0, sizeof(_ns1__GetSearchLyricCountResponse), 0, soap_copy__ns1__GetSearchLyricCountResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetSearchLyricCountResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetSearchLyricCountResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetSearchLyricCountResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetSearchLyricCountResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetSearchLyricCountResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetSearchLyricCountResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetSearchLyricCountResponse * SOAP_FMAC4 soap_get__ns1__GetSearchLyricCountResponse(struct soap *soap, _ns1__GetSearchLyricCountResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetSearchLyricCountResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetSearchLyricCountResponse * SOAP_FMAC2 soap_instantiate__ns1__GetSearchLyricCountResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetSearchLyricCountResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetSearchLyricCountResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetSearchLyricCountResponse);
		if (size)
			*size = sizeof(_ns1__GetSearchLyricCountResponse);
		((_ns1__GetSearchLyricCountResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetSearchLyricCountResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetSearchLyricCountResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetSearchLyricCountResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetSearchLyricCountResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetSearchLyricCountResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetSearchLyricCountResponse %p -> %p\n", q, p));
	*(_ns1__GetSearchLyricCountResponse*)p = *(_ns1__GetSearchLyricCountResponse*)q;
}

void _ns1__GetSearchLyricCount::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetSearchLyricCount::title = NULL;
	this->_ns1__GetSearchLyricCount::artist = NULL;
	/* transient soap skipped */
}

void _ns1__GetSearchLyricCount::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetSearchLyricCount::title);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetSearchLyricCount::artist);
	/* transient soap skipped */
#endif
}

int _ns1__GetSearchLyricCount::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetSearchLyricCount(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSearchLyricCount(struct soap *soap, const char *tag, int id, const _ns1__GetSearchLyricCount *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetSearchLyricCount), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:title", -1, &(a->_ns1__GetSearchLyricCount::title), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:artist", -1, &(a->_ns1__GetSearchLyricCount::artist), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetSearchLyricCount::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetSearchLyricCount(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetSearchLyricCount * SOAP_FMAC4 soap_in__ns1__GetSearchLyricCount(struct soap *soap, const char *tag, _ns1__GetSearchLyricCount *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetSearchLyricCount *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetSearchLyricCount, sizeof(_ns1__GetSearchLyricCount), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetSearchLyricCount)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetSearchLyricCount *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_title1 = 1;
	size_t soap_flag_artist1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:title", &(a->_ns1__GetSearchLyricCount::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			if (soap_flag_artist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:artist", &(a->_ns1__GetSearchLyricCount::artist), "xsd:string"))
				{	soap_flag_artist1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetSearchLyricCount *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetSearchLyricCount, 0, sizeof(_ns1__GetSearchLyricCount), 0, soap_copy__ns1__GetSearchLyricCount);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetSearchLyricCount::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetSearchLyricCount);
	if (this->soap_out(soap, tag?tag:"ns1:GetSearchLyricCount", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetSearchLyricCount::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetSearchLyricCount(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetSearchLyricCount * SOAP_FMAC4 soap_get__ns1__GetSearchLyricCount(struct soap *soap, _ns1__GetSearchLyricCount *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetSearchLyricCount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetSearchLyricCount * SOAP_FMAC2 soap_instantiate__ns1__GetSearchLyricCount(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetSearchLyricCount(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetSearchLyricCount, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetSearchLyricCount);
		if (size)
			*size = sizeof(_ns1__GetSearchLyricCount);
		((_ns1__GetSearchLyricCount*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetSearchLyricCount, n);
		if (size)
			*size = n * sizeof(_ns1__GetSearchLyricCount);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetSearchLyricCount*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetSearchLyricCount*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetSearchLyricCount(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetSearchLyricCount %p -> %p\n", q, p));
	*(_ns1__GetSearchLyricCount*)p = *(_ns1__GetSearchLyricCount*)q;
}

void _ns1__AdminLoginRightsJPNResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__AdminLoginRightsJPNResponse::AdminLoginRightsJPNResult);
	/* transient soap skipped */
}

void _ns1__AdminLoginRightsJPNResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__AdminLoginRightsJPNResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminLoginRightsJPNResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminLoginRightsJPNResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminLoginRightsJPNResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminLoginRightsJPNResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:AdminLoginRightsJPNResult");
	if (soap_out_bool(soap, "ns1:AdminLoginRightsJPNResult", -1, &(a->_ns1__AdminLoginRightsJPNResponse::AdminLoginRightsJPNResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminLoginRightsJPNResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminLoginRightsJPNResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminLoginRightsJPNResponse * SOAP_FMAC4 soap_in__ns1__AdminLoginRightsJPNResponse(struct soap *soap, const char *tag, _ns1__AdminLoginRightsJPNResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminLoginRightsJPNResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminLoginRightsJPNResponse, sizeof(_ns1__AdminLoginRightsJPNResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminLoginRightsJPNResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminLoginRightsJPNResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminLoginRightsJPNResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminLoginRightsJPNResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:AdminLoginRightsJPNResult", &(a->_ns1__AdminLoginRightsJPNResponse::AdminLoginRightsJPNResult), "xsd:boolean"))
				{	soap_flag_AdminLoginRightsJPNResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminLoginRightsJPNResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminLoginRightsJPNResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminLoginRightsJPNResponse, 0, sizeof(_ns1__AdminLoginRightsJPNResponse), 0, soap_copy__ns1__AdminLoginRightsJPNResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AdminLoginRightsJPNResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminLoginRightsJPNResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminLoginRightsJPNResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminLoginRightsJPNResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminLoginRightsJPNResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminLoginRightsJPNResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminLoginRightsJPNResponse * SOAP_FMAC4 soap_get__ns1__AdminLoginRightsJPNResponse(struct soap *soap, _ns1__AdminLoginRightsJPNResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminLoginRightsJPNResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminLoginRightsJPNResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminLoginRightsJPNResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminLoginRightsJPNResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminLoginRightsJPNResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminLoginRightsJPNResponse);
		if (size)
			*size = sizeof(_ns1__AdminLoginRightsJPNResponse);
		((_ns1__AdminLoginRightsJPNResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminLoginRightsJPNResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminLoginRightsJPNResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminLoginRightsJPNResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminLoginRightsJPNResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminLoginRightsJPNResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminLoginRightsJPNResponse %p -> %p\n", q, p));
	*(_ns1__AdminLoginRightsJPNResponse*)p = *(_ns1__AdminLoginRightsJPNResponse*)q;
}

void _ns1__AdminLoginRightsJPN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminLoginRightsJPN::userID = NULL;
	this->_ns1__AdminLoginRightsJPN::password = NULL;
	/* transient soap skipped */
}

void _ns1__AdminLoginRightsJPN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__AdminLoginRightsJPN::userID);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__AdminLoginRightsJPN::password);
	/* transient soap skipped */
#endif
}

int _ns1__AdminLoginRightsJPN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminLoginRightsJPN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminLoginRightsJPN(struct soap *soap, const char *tag, int id, const _ns1__AdminLoginRightsJPN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminLoginRightsJPN), type))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:userID", -1, &(a->_ns1__AdminLoginRightsJPN::userID), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:password", -1, &(a->_ns1__AdminLoginRightsJPN::password), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminLoginRightsJPN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminLoginRightsJPN(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminLoginRightsJPN * SOAP_FMAC4 soap_in__ns1__AdminLoginRightsJPN(struct soap *soap, const char *tag, _ns1__AdminLoginRightsJPN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminLoginRightsJPN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminLoginRightsJPN, sizeof(_ns1__AdminLoginRightsJPN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminLoginRightsJPN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminLoginRightsJPN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userID1 = 1;
	size_t soap_flag_password1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:userID", &(a->_ns1__AdminLoginRightsJPN::userID), "xsd:base64Binary"))
				{	soap_flag_userID1--;
					continue;
				}
			if (soap_flag_password1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:password", &(a->_ns1__AdminLoginRightsJPN::password), "xsd:base64Binary"))
				{	soap_flag_password1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminLoginRightsJPN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminLoginRightsJPN, 0, sizeof(_ns1__AdminLoginRightsJPN), 0, soap_copy__ns1__AdminLoginRightsJPN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AdminLoginRightsJPN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminLoginRightsJPN);
	if (this->soap_out(soap, tag?tag:"ns1:AdminLoginRightsJPN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminLoginRightsJPN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminLoginRightsJPN(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminLoginRightsJPN * SOAP_FMAC4 soap_get__ns1__AdminLoginRightsJPN(struct soap *soap, _ns1__AdminLoginRightsJPN *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminLoginRightsJPN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminLoginRightsJPN * SOAP_FMAC2 soap_instantiate__ns1__AdminLoginRightsJPN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminLoginRightsJPN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminLoginRightsJPN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminLoginRightsJPN);
		if (size)
			*size = sizeof(_ns1__AdminLoginRightsJPN);
		((_ns1__AdminLoginRightsJPN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminLoginRightsJPN, n);
		if (size)
			*size = n * sizeof(_ns1__AdminLoginRightsJPN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminLoginRightsJPN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminLoginRightsJPN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminLoginRightsJPN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminLoginRightsJPN %p -> %p\n", q, p));
	*(_ns1__AdminLoginRightsJPN*)p = *(_ns1__AdminLoginRightsJPN*)q;
}

void _ns1__AdminJPNSearchRightsInfoListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminJPNSearchRightsInfoListResponse::AdminJPNSearchRightsInfoListResult = NULL;
	/* transient soap skipped */
}

void _ns1__AdminJPNSearchRightsInfoListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(soap, &this->_ns1__AdminJPNSearchRightsInfoListResponse::AdminJPNSearchRightsInfoListResult);
	/* transient soap skipped */
#endif
}

int _ns1__AdminJPNSearchRightsInfoListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminJPNSearchRightsInfoListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminJPNSearchRightsInfoListResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminJPNSearchRightsInfoListResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminJPNSearchRightsInfoListResponse), type))
		return soap->error;
	if (a->AdminJPNSearchRightsInfoListResult)
		soap_element_result(soap, "ns1:AdminJPNSearchRightsInfoListResult");
	if (soap_out_PointerTons1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(soap, "ns1:AdminJPNSearchRightsInfoListResult", -1, &(a->_ns1__AdminJPNSearchRightsInfoListResponse::AdminJPNSearchRightsInfoListResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminJPNSearchRightsInfoListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminJPNSearchRightsInfoListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminJPNSearchRightsInfoListResponse * SOAP_FMAC4 soap_in__ns1__AdminJPNSearchRightsInfoListResponse(struct soap *soap, const char *tag, _ns1__AdminJPNSearchRightsInfoListResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminJPNSearchRightsInfoListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminJPNSearchRightsInfoListResponse, sizeof(_ns1__AdminJPNSearchRightsInfoListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminJPNSearchRightsInfoListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminJPNSearchRightsInfoListResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminJPNSearchRightsInfoListResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminJPNSearchRightsInfoListResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(soap, "ns1:AdminJPNSearchRightsInfoListResult", &(a->_ns1__AdminJPNSearchRightsInfoListResponse::AdminJPNSearchRightsInfoListResult), "ns1:ArrayOfST_RIGHTSINFO_JPN"))
				{	soap_flag_AdminJPNSearchRightsInfoListResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminJPNSearchRightsInfoListResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminJPNSearchRightsInfoListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminJPNSearchRightsInfoListResponse, 0, sizeof(_ns1__AdminJPNSearchRightsInfoListResponse), 0, soap_copy__ns1__AdminJPNSearchRightsInfoListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AdminJPNSearchRightsInfoListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminJPNSearchRightsInfoListResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminJPNSearchRightsInfoListResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminJPNSearchRightsInfoListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminJPNSearchRightsInfoListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminJPNSearchRightsInfoListResponse * SOAP_FMAC4 soap_get__ns1__AdminJPNSearchRightsInfoListResponse(struct soap *soap, _ns1__AdminJPNSearchRightsInfoListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminJPNSearchRightsInfoListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminJPNSearchRightsInfoListResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminJPNSearchRightsInfoListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminJPNSearchRightsInfoListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminJPNSearchRightsInfoListResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminJPNSearchRightsInfoListResponse);
		if (size)
			*size = sizeof(_ns1__AdminJPNSearchRightsInfoListResponse);
		((_ns1__AdminJPNSearchRightsInfoListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminJPNSearchRightsInfoListResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminJPNSearchRightsInfoListResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminJPNSearchRightsInfoListResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminJPNSearchRightsInfoListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminJPNSearchRightsInfoListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminJPNSearchRightsInfoListResponse %p -> %p\n", q, p));
	*(_ns1__AdminJPNSearchRightsInfoListResponse*)p = *(_ns1__AdminJPNSearchRightsInfoListResponse*)q;
}

void _ns1__AdminJPNSearchRightsInfoList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminJPNSearchRightsInfoList::title = NULL;
	this->_ns1__AdminJPNSearchRightsInfoList::artist = NULL;
	soap_default_int(soap, &this->_ns1__AdminJPNSearchRightsInfoList::pageNo);
	/* transient soap skipped */
}

void _ns1__AdminJPNSearchRightsInfoList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__AdminJPNSearchRightsInfoList::title);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__AdminJPNSearchRightsInfoList::artist);
	/* transient soap skipped */
#endif
}

int _ns1__AdminJPNSearchRightsInfoList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminJPNSearchRightsInfoList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminJPNSearchRightsInfoList(struct soap *soap, const char *tag, int id, const _ns1__AdminJPNSearchRightsInfoList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminJPNSearchRightsInfoList), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:title", -1, &(a->_ns1__AdminJPNSearchRightsInfoList::title), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:artist", -1, &(a->_ns1__AdminJPNSearchRightsInfoList::artist), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:pageNo", -1, &(a->_ns1__AdminJPNSearchRightsInfoList::pageNo), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminJPNSearchRightsInfoList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminJPNSearchRightsInfoList(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminJPNSearchRightsInfoList * SOAP_FMAC4 soap_in__ns1__AdminJPNSearchRightsInfoList(struct soap *soap, const char *tag, _ns1__AdminJPNSearchRightsInfoList *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminJPNSearchRightsInfoList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminJPNSearchRightsInfoList, sizeof(_ns1__AdminJPNSearchRightsInfoList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminJPNSearchRightsInfoList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminJPNSearchRightsInfoList *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_title1 = 1;
	size_t soap_flag_artist1 = 1;
	size_t soap_flag_pageNo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:title", &(a->_ns1__AdminJPNSearchRightsInfoList::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			if (soap_flag_artist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:artist", &(a->_ns1__AdminJPNSearchRightsInfoList::artist), "xsd:string"))
				{	soap_flag_artist1--;
					continue;
				}
			if (soap_flag_pageNo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:pageNo", &(a->_ns1__AdminJPNSearchRightsInfoList::pageNo), "xsd:int"))
				{	soap_flag_pageNo1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminJPNSearchRightsInfoList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminJPNSearchRightsInfoList, 0, sizeof(_ns1__AdminJPNSearchRightsInfoList), 0, soap_copy__ns1__AdminJPNSearchRightsInfoList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_pageNo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminJPNSearchRightsInfoList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminJPNSearchRightsInfoList);
	if (this->soap_out(soap, tag?tag:"ns1:AdminJPNSearchRightsInfoList", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminJPNSearchRightsInfoList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminJPNSearchRightsInfoList(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminJPNSearchRightsInfoList * SOAP_FMAC4 soap_get__ns1__AdminJPNSearchRightsInfoList(struct soap *soap, _ns1__AdminJPNSearchRightsInfoList *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminJPNSearchRightsInfoList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminJPNSearchRightsInfoList * SOAP_FMAC2 soap_instantiate__ns1__AdminJPNSearchRightsInfoList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminJPNSearchRightsInfoList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminJPNSearchRightsInfoList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminJPNSearchRightsInfoList);
		if (size)
			*size = sizeof(_ns1__AdminJPNSearchRightsInfoList);
		((_ns1__AdminJPNSearchRightsInfoList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminJPNSearchRightsInfoList, n);
		if (size)
			*size = n * sizeof(_ns1__AdminJPNSearchRightsInfoList);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminJPNSearchRightsInfoList*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminJPNSearchRightsInfoList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminJPNSearchRightsInfoList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminJPNSearchRightsInfoList %p -> %p\n", q, p));
	*(_ns1__AdminJPNSearchRightsInfoList*)p = *(_ns1__AdminJPNSearchRightsInfoList*)q;
}

void _ns1__AdminJPNSetRightsInfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__AdminJPNSetRightsInfoResponse::AdminJPNSetRightsInfoResult);
	/* transient soap skipped */
}

void _ns1__AdminJPNSetRightsInfoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__AdminJPNSetRightsInfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminJPNSetRightsInfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminJPNSetRightsInfoResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminJPNSetRightsInfoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminJPNSetRightsInfoResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:AdminJPNSetRightsInfoResult");
	if (soap_out_bool(soap, "ns1:AdminJPNSetRightsInfoResult", -1, &(a->_ns1__AdminJPNSetRightsInfoResponse::AdminJPNSetRightsInfoResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminJPNSetRightsInfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminJPNSetRightsInfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminJPNSetRightsInfoResponse * SOAP_FMAC4 soap_in__ns1__AdminJPNSetRightsInfoResponse(struct soap *soap, const char *tag, _ns1__AdminJPNSetRightsInfoResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminJPNSetRightsInfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminJPNSetRightsInfoResponse, sizeof(_ns1__AdminJPNSetRightsInfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminJPNSetRightsInfoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminJPNSetRightsInfoResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminJPNSetRightsInfoResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminJPNSetRightsInfoResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:AdminJPNSetRightsInfoResult", &(a->_ns1__AdminJPNSetRightsInfoResponse::AdminJPNSetRightsInfoResult), "xsd:boolean"))
				{	soap_flag_AdminJPNSetRightsInfoResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminJPNSetRightsInfoResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminJPNSetRightsInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminJPNSetRightsInfoResponse, 0, sizeof(_ns1__AdminJPNSetRightsInfoResponse), 0, soap_copy__ns1__AdminJPNSetRightsInfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AdminJPNSetRightsInfoResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminJPNSetRightsInfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminJPNSetRightsInfoResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminJPNSetRightsInfoResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminJPNSetRightsInfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminJPNSetRightsInfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminJPNSetRightsInfoResponse * SOAP_FMAC4 soap_get__ns1__AdminJPNSetRightsInfoResponse(struct soap *soap, _ns1__AdminJPNSetRightsInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminJPNSetRightsInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminJPNSetRightsInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminJPNSetRightsInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminJPNSetRightsInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminJPNSetRightsInfoResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminJPNSetRightsInfoResponse);
		if (size)
			*size = sizeof(_ns1__AdminJPNSetRightsInfoResponse);
		((_ns1__AdminJPNSetRightsInfoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminJPNSetRightsInfoResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminJPNSetRightsInfoResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminJPNSetRightsInfoResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminJPNSetRightsInfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminJPNSetRightsInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminJPNSetRightsInfoResponse %p -> %p\n", q, p));
	*(_ns1__AdminJPNSetRightsInfoResponse*)p = *(_ns1__AdminJPNSetRightsInfoResponse*)q;
}

void _ns1__AdminJPNSetRightsInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminJPNSetRightsInfo::input = NULL;
	/* transient soap skipped */
}

void _ns1__AdminJPNSetRightsInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, &this->_ns1__AdminJPNSetRightsInfo::input);
	/* transient soap skipped */
#endif
}

int _ns1__AdminJPNSetRightsInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminJPNSetRightsInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminJPNSetRightsInfo(struct soap *soap, const char *tag, int id, const _ns1__AdminJPNSetRightsInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminJPNSetRightsInfo), type))
		return soap->error;
	if (a->_ns1__AdminJPNSetRightsInfo::input)
	{	if (soap_out_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, "ns1:input", -1, &a->_ns1__AdminJPNSetRightsInfo::input, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:input"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminJPNSetRightsInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminJPNSetRightsInfo(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminJPNSetRightsInfo * SOAP_FMAC4 soap_in__ns1__AdminJPNSetRightsInfo(struct soap *soap, const char *tag, _ns1__AdminJPNSetRightsInfo *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminJPNSetRightsInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminJPNSetRightsInfo, sizeof(_ns1__AdminJPNSetRightsInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminJPNSetRightsInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminJPNSetRightsInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_input1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_input1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, "ns1:input", &(a->_ns1__AdminJPNSetRightsInfo::input), "ns1:ST_RIGHTSINFO_JPN"))
				{	soap_flag_input1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminJPNSetRightsInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminJPNSetRightsInfo, 0, sizeof(_ns1__AdminJPNSetRightsInfo), 0, soap_copy__ns1__AdminJPNSetRightsInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_input1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminJPNSetRightsInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminJPNSetRightsInfo);
	if (this->soap_out(soap, tag?tag:"ns1:AdminJPNSetRightsInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminJPNSetRightsInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminJPNSetRightsInfo(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminJPNSetRightsInfo * SOAP_FMAC4 soap_get__ns1__AdminJPNSetRightsInfo(struct soap *soap, _ns1__AdminJPNSetRightsInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminJPNSetRightsInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminJPNSetRightsInfo * SOAP_FMAC2 soap_instantiate__ns1__AdminJPNSetRightsInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminJPNSetRightsInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminJPNSetRightsInfo, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminJPNSetRightsInfo);
		if (size)
			*size = sizeof(_ns1__AdminJPNSetRightsInfo);
		((_ns1__AdminJPNSetRightsInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminJPNSetRightsInfo, n);
		if (size)
			*size = n * sizeof(_ns1__AdminJPNSetRightsInfo);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminJPNSetRightsInfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminJPNSetRightsInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminJPNSetRightsInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminJPNSetRightsInfo %p -> %p\n", q, p));
	*(_ns1__AdminJPNSetRightsInfo*)p = *(_ns1__AdminJPNSetRightsInfo*)q;
}

void _ns1__AdminJPNGetRightsInfoByLyricIDResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__AdminJPNGetRightsInfoByLyricIDResponse::AdminJPNGetRightsInfoByLyricIDResult);
	this->_ns1__AdminJPNGetRightsInfoByLyricIDResponse::output = NULL;
	/* transient soap skipped */
}

void _ns1__AdminJPNGetRightsInfoByLyricIDResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, &this->_ns1__AdminJPNGetRightsInfoByLyricIDResponse::output);
	/* transient soap skipped */
#endif
}

int _ns1__AdminJPNGetRightsInfoByLyricIDResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminJPNGetRightsInfoByLyricIDResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminJPNGetRightsInfoByLyricIDResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminJPNGetRightsInfoByLyricIDResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricIDResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:AdminJPNGetRightsInfoByLyricIDResult");
	if (soap_out_bool(soap, "ns1:AdminJPNGetRightsInfoByLyricIDResult", -1, &(a->_ns1__AdminJPNGetRightsInfoByLyricIDResponse::AdminJPNGetRightsInfoByLyricIDResult), ""))
		return soap->error;
	if (a->_ns1__AdminJPNGetRightsInfoByLyricIDResponse::output)
	{	if (soap_out_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, "ns1:output", -1, &a->_ns1__AdminJPNGetRightsInfoByLyricIDResponse::output, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:output"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminJPNGetRightsInfoByLyricIDResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminJPNGetRightsInfoByLyricIDResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminJPNGetRightsInfoByLyricIDResponse * SOAP_FMAC4 soap_in__ns1__AdminJPNGetRightsInfoByLyricIDResponse(struct soap *soap, const char *tag, _ns1__AdminJPNGetRightsInfoByLyricIDResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminJPNGetRightsInfoByLyricIDResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricIDResponse, sizeof(_ns1__AdminJPNGetRightsInfoByLyricIDResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricIDResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminJPNGetRightsInfoByLyricIDResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminJPNGetRightsInfoByLyricIDResult1 = 1;
	size_t soap_flag_output1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminJPNGetRightsInfoByLyricIDResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:AdminJPNGetRightsInfoByLyricIDResult", &(a->_ns1__AdminJPNGetRightsInfoByLyricIDResponse::AdminJPNGetRightsInfoByLyricIDResult), "xsd:boolean"))
				{	soap_flag_AdminJPNGetRightsInfoByLyricIDResult1--;
					continue;
				}
			if (soap_flag_output1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, "ns1:output", &(a->_ns1__AdminJPNGetRightsInfoByLyricIDResponse::output), "ns1:ST_RIGHTSINFO_JPN"))
				{	soap_flag_output1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminJPNGetRightsInfoByLyricIDResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminJPNGetRightsInfoByLyricIDResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricIDResponse, 0, sizeof(_ns1__AdminJPNGetRightsInfoByLyricIDResponse), 0, soap_copy__ns1__AdminJPNGetRightsInfoByLyricIDResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AdminJPNGetRightsInfoByLyricIDResult1 > 0 || soap_flag_output1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminJPNGetRightsInfoByLyricIDResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricIDResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminJPNGetRightsInfoByLyricIDResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminJPNGetRightsInfoByLyricIDResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminJPNGetRightsInfoByLyricIDResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminJPNGetRightsInfoByLyricIDResponse * SOAP_FMAC4 soap_get__ns1__AdminJPNGetRightsInfoByLyricIDResponse(struct soap *soap, _ns1__AdminJPNGetRightsInfoByLyricIDResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminJPNGetRightsInfoByLyricIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminJPNGetRightsInfoByLyricIDResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminJPNGetRightsInfoByLyricIDResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminJPNGetRightsInfoByLyricIDResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricIDResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminJPNGetRightsInfoByLyricIDResponse);
		if (size)
			*size = sizeof(_ns1__AdminJPNGetRightsInfoByLyricIDResponse);
		((_ns1__AdminJPNGetRightsInfoByLyricIDResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminJPNGetRightsInfoByLyricIDResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminJPNGetRightsInfoByLyricIDResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminJPNGetRightsInfoByLyricIDResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminJPNGetRightsInfoByLyricIDResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminJPNGetRightsInfoByLyricIDResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminJPNGetRightsInfoByLyricIDResponse %p -> %p\n", q, p));
	*(_ns1__AdminJPNGetRightsInfoByLyricIDResponse*)p = *(_ns1__AdminJPNGetRightsInfoByLyricIDResponse*)q;
}

void _ns1__AdminJPNGetRightsInfoByLyricID::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__AdminJPNGetRightsInfoByLyricID::lyricID);
	/* transient soap skipped */
}

void _ns1__AdminJPNGetRightsInfoByLyricID::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__AdminJPNGetRightsInfoByLyricID::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminJPNGetRightsInfoByLyricID(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminJPNGetRightsInfoByLyricID(struct soap *soap, const char *tag, int id, const _ns1__AdminJPNGetRightsInfoByLyricID *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricID), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:lyricID", -1, &(a->_ns1__AdminJPNGetRightsInfoByLyricID::lyricID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminJPNGetRightsInfoByLyricID::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminJPNGetRightsInfoByLyricID(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminJPNGetRightsInfoByLyricID * SOAP_FMAC4 soap_in__ns1__AdminJPNGetRightsInfoByLyricID(struct soap *soap, const char *tag, _ns1__AdminJPNGetRightsInfoByLyricID *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminJPNGetRightsInfoByLyricID *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricID, sizeof(_ns1__AdminJPNGetRightsInfoByLyricID), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricID)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminJPNGetRightsInfoByLyricID *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_lyricID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_lyricID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:lyricID", &(a->_ns1__AdminJPNGetRightsInfoByLyricID::lyricID), "xsd:int"))
				{	soap_flag_lyricID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminJPNGetRightsInfoByLyricID *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricID, 0, sizeof(_ns1__AdminJPNGetRightsInfoByLyricID), 0, soap_copy__ns1__AdminJPNGetRightsInfoByLyricID);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_lyricID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminJPNGetRightsInfoByLyricID::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricID);
	if (this->soap_out(soap, tag?tag:"ns1:AdminJPNGetRightsInfoByLyricID", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminJPNGetRightsInfoByLyricID::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminJPNGetRightsInfoByLyricID(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminJPNGetRightsInfoByLyricID * SOAP_FMAC4 soap_get__ns1__AdminJPNGetRightsInfoByLyricID(struct soap *soap, _ns1__AdminJPNGetRightsInfoByLyricID *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminJPNGetRightsInfoByLyricID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminJPNGetRightsInfoByLyricID * SOAP_FMAC2 soap_instantiate__ns1__AdminJPNGetRightsInfoByLyricID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminJPNGetRightsInfoByLyricID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricID, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminJPNGetRightsInfoByLyricID);
		if (size)
			*size = sizeof(_ns1__AdminJPNGetRightsInfoByLyricID);
		((_ns1__AdminJPNGetRightsInfoByLyricID*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminJPNGetRightsInfoByLyricID, n);
		if (size)
			*size = n * sizeof(_ns1__AdminJPNGetRightsInfoByLyricID);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminJPNGetRightsInfoByLyricID*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminJPNGetRightsInfoByLyricID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminJPNGetRightsInfoByLyricID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminJPNGetRightsInfoByLyricID %p -> %p\n", q, p));
	*(_ns1__AdminJPNGetRightsInfoByLyricID*)p = *(_ns1__AdminJPNGetRightsInfoByLyricID*)q;
}

void _ns1__AdminJPNGetRightsInfoByModifyIDResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__AdminJPNGetRightsInfoByModifyIDResponse::AdminJPNGetRightsInfoByModifyIDResult);
	this->_ns1__AdminJPNGetRightsInfoByModifyIDResponse::output = NULL;
	/* transient soap skipped */
}

void _ns1__AdminJPNGetRightsInfoByModifyIDResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, &this->_ns1__AdminJPNGetRightsInfoByModifyIDResponse::output);
	/* transient soap skipped */
#endif
}

int _ns1__AdminJPNGetRightsInfoByModifyIDResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminJPNGetRightsInfoByModifyIDResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminJPNGetRightsInfoByModifyIDResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminJPNGetRightsInfoByModifyIDResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyIDResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:AdminJPNGetRightsInfoByModifyIDResult");
	if (soap_out_bool(soap, "ns1:AdminJPNGetRightsInfoByModifyIDResult", -1, &(a->_ns1__AdminJPNGetRightsInfoByModifyIDResponse::AdminJPNGetRightsInfoByModifyIDResult), ""))
		return soap->error;
	if (a->_ns1__AdminJPNGetRightsInfoByModifyIDResponse::output)
	{	if (soap_out_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, "ns1:output", -1, &a->_ns1__AdminJPNGetRightsInfoByModifyIDResponse::output, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:output"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminJPNGetRightsInfoByModifyIDResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminJPNGetRightsInfoByModifyIDResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminJPNGetRightsInfoByModifyIDResponse * SOAP_FMAC4 soap_in__ns1__AdminJPNGetRightsInfoByModifyIDResponse(struct soap *soap, const char *tag, _ns1__AdminJPNGetRightsInfoByModifyIDResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminJPNGetRightsInfoByModifyIDResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyIDResponse, sizeof(_ns1__AdminJPNGetRightsInfoByModifyIDResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyIDResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminJPNGetRightsInfoByModifyIDResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminJPNGetRightsInfoByModifyIDResult1 = 1;
	size_t soap_flag_output1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminJPNGetRightsInfoByModifyIDResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:AdminJPNGetRightsInfoByModifyIDResult", &(a->_ns1__AdminJPNGetRightsInfoByModifyIDResponse::AdminJPNGetRightsInfoByModifyIDResult), "xsd:boolean"))
				{	soap_flag_AdminJPNGetRightsInfoByModifyIDResult1--;
					continue;
				}
			if (soap_flag_output1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, "ns1:output", &(a->_ns1__AdminJPNGetRightsInfoByModifyIDResponse::output), "ns1:ST_RIGHTSINFO_JPN"))
				{	soap_flag_output1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminJPNGetRightsInfoByModifyIDResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminJPNGetRightsInfoByModifyIDResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyIDResponse, 0, sizeof(_ns1__AdminJPNGetRightsInfoByModifyIDResponse), 0, soap_copy__ns1__AdminJPNGetRightsInfoByModifyIDResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AdminJPNGetRightsInfoByModifyIDResult1 > 0 || soap_flag_output1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminJPNGetRightsInfoByModifyIDResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyIDResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminJPNGetRightsInfoByModifyIDResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminJPNGetRightsInfoByModifyIDResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminJPNGetRightsInfoByModifyIDResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminJPNGetRightsInfoByModifyIDResponse * SOAP_FMAC4 soap_get__ns1__AdminJPNGetRightsInfoByModifyIDResponse(struct soap *soap, _ns1__AdminJPNGetRightsInfoByModifyIDResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminJPNGetRightsInfoByModifyIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminJPNGetRightsInfoByModifyIDResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminJPNGetRightsInfoByModifyIDResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminJPNGetRightsInfoByModifyIDResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyIDResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminJPNGetRightsInfoByModifyIDResponse);
		if (size)
			*size = sizeof(_ns1__AdminJPNGetRightsInfoByModifyIDResponse);
		((_ns1__AdminJPNGetRightsInfoByModifyIDResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminJPNGetRightsInfoByModifyIDResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminJPNGetRightsInfoByModifyIDResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminJPNGetRightsInfoByModifyIDResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminJPNGetRightsInfoByModifyIDResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminJPNGetRightsInfoByModifyIDResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminJPNGetRightsInfoByModifyIDResponse %p -> %p\n", q, p));
	*(_ns1__AdminJPNGetRightsInfoByModifyIDResponse*)p = *(_ns1__AdminJPNGetRightsInfoByModifyIDResponse*)q;
}

void _ns1__AdminJPNGetRightsInfoByModifyID::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__AdminJPNGetRightsInfoByModifyID::modifyID);
	/* transient soap skipped */
}

void _ns1__AdminJPNGetRightsInfoByModifyID::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__AdminJPNGetRightsInfoByModifyID::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminJPNGetRightsInfoByModifyID(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminJPNGetRightsInfoByModifyID(struct soap *soap, const char *tag, int id, const _ns1__AdminJPNGetRightsInfoByModifyID *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyID), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:modifyID", -1, &(a->_ns1__AdminJPNGetRightsInfoByModifyID::modifyID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminJPNGetRightsInfoByModifyID::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminJPNGetRightsInfoByModifyID(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminJPNGetRightsInfoByModifyID * SOAP_FMAC4 soap_in__ns1__AdminJPNGetRightsInfoByModifyID(struct soap *soap, const char *tag, _ns1__AdminJPNGetRightsInfoByModifyID *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminJPNGetRightsInfoByModifyID *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyID, sizeof(_ns1__AdminJPNGetRightsInfoByModifyID), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyID)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminJPNGetRightsInfoByModifyID *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_modifyID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_modifyID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:modifyID", &(a->_ns1__AdminJPNGetRightsInfoByModifyID::modifyID), "xsd:int"))
				{	soap_flag_modifyID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminJPNGetRightsInfoByModifyID *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyID, 0, sizeof(_ns1__AdminJPNGetRightsInfoByModifyID), 0, soap_copy__ns1__AdminJPNGetRightsInfoByModifyID);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_modifyID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminJPNGetRightsInfoByModifyID::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyID);
	if (this->soap_out(soap, tag?tag:"ns1:AdminJPNGetRightsInfoByModifyID", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminJPNGetRightsInfoByModifyID::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminJPNGetRightsInfoByModifyID(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminJPNGetRightsInfoByModifyID * SOAP_FMAC4 soap_get__ns1__AdminJPNGetRightsInfoByModifyID(struct soap *soap, _ns1__AdminJPNGetRightsInfoByModifyID *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminJPNGetRightsInfoByModifyID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminJPNGetRightsInfoByModifyID * SOAP_FMAC2 soap_instantiate__ns1__AdminJPNGetRightsInfoByModifyID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminJPNGetRightsInfoByModifyID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyID, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminJPNGetRightsInfoByModifyID);
		if (size)
			*size = sizeof(_ns1__AdminJPNGetRightsInfoByModifyID);
		((_ns1__AdminJPNGetRightsInfoByModifyID*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminJPNGetRightsInfoByModifyID, n);
		if (size)
			*size = n * sizeof(_ns1__AdminJPNGetRightsInfoByModifyID);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminJPNGetRightsInfoByModifyID*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminJPNGetRightsInfoByModifyID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminJPNGetRightsInfoByModifyID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminJPNGetRightsInfoByModifyID %p -> %p\n", q, p));
	*(_ns1__AdminJPNGetRightsInfoByModifyID*)p = *(_ns1__AdminJPNGetRightsInfoByModifyID*)q;
}

void _ns1__GetLyricByID2Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__GetLyricByID2Response::GetLyricByID2Result);
	this->_ns1__GetLyricByID2Response::output = NULL;
	/* transient soap skipped */
}

void _ns1__GetLyricByID2Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCORELYRICINFO(soap, &this->_ns1__GetLyricByID2Response::output);
	/* transient soap skipped */
#endif
}

int _ns1__GetLyricByID2Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLyricByID2Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLyricByID2Response(struct soap *soap, const char *tag, int id, const _ns1__GetLyricByID2Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLyricByID2Response), type))
		return soap->error;
	soap_element_result(soap, "ns1:GetLyricByID2Result");
	if (soap_out_bool(soap, "ns1:GetLyricByID2Result", -1, &(a->_ns1__GetLyricByID2Response::GetLyricByID2Result), ""))
		return soap->error;
	if (a->_ns1__GetLyricByID2Response::output)
	{	if (soap_out_PointerTons1__ST_USCORELYRICINFO(soap, "ns1:output", -1, &a->_ns1__GetLyricByID2Response::output, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:output"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLyricByID2Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLyricByID2Response(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLyricByID2Response * SOAP_FMAC4 soap_in__ns1__GetLyricByID2Response(struct soap *soap, const char *tag, _ns1__GetLyricByID2Response *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLyricByID2Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLyricByID2Response, sizeof(_ns1__GetLyricByID2Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLyricByID2Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLyricByID2Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetLyricByID2Result1 = 1;
	size_t soap_flag_output1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetLyricByID2Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:GetLyricByID2Result", &(a->_ns1__GetLyricByID2Response::GetLyricByID2Result), "xsd:boolean"))
				{	soap_flag_GetLyricByID2Result1--;
					continue;
				}
			if (soap_flag_output1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCORELYRICINFO(soap, "ns1:output", &(a->_ns1__GetLyricByID2Response::output), "ns1:ST_LYRICINFO"))
				{	soap_flag_output1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetLyricByID2Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLyricByID2Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLyricByID2Response, 0, sizeof(_ns1__GetLyricByID2Response), 0, soap_copy__ns1__GetLyricByID2Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetLyricByID2Result1 > 0 || soap_flag_output1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetLyricByID2Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLyricByID2Response);
	if (this->soap_out(soap, tag?tag:"ns1:GetLyricByID2Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLyricByID2Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLyricByID2Response(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLyricByID2Response * SOAP_FMAC4 soap_get__ns1__GetLyricByID2Response(struct soap *soap, _ns1__GetLyricByID2Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLyricByID2Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLyricByID2Response * SOAP_FMAC2 soap_instantiate__ns1__GetLyricByID2Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLyricByID2Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLyricByID2Response, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetLyricByID2Response);
		if (size)
			*size = sizeof(_ns1__GetLyricByID2Response);
		((_ns1__GetLyricByID2Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetLyricByID2Response, n);
		if (size)
			*size = n * sizeof(_ns1__GetLyricByID2Response);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLyricByID2Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLyricByID2Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLyricByID2Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLyricByID2Response %p -> %p\n", q, p));
	*(_ns1__GetLyricByID2Response*)p = *(_ns1__GetLyricByID2Response*)q;
}

void _ns1__GetLyricByID2::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetLyricByID2::encData = NULL;
	soap_default_int(soap, &this->_ns1__GetLyricByID2::lyricID);
	/* transient soap skipped */
}

void _ns1__GetLyricByID2::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetLyricByID2::encData);
	/* transient soap skipped */
#endif
}

int _ns1__GetLyricByID2::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLyricByID2(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLyricByID2(struct soap *soap, const char *tag, int id, const _ns1__GetLyricByID2 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLyricByID2), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:encData", -1, &(a->_ns1__GetLyricByID2::encData), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:lyricID", -1, &(a->_ns1__GetLyricByID2::lyricID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLyricByID2::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLyricByID2(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLyricByID2 * SOAP_FMAC4 soap_in__ns1__GetLyricByID2(struct soap *soap, const char *tag, _ns1__GetLyricByID2 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLyricByID2 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLyricByID2, sizeof(_ns1__GetLyricByID2), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLyricByID2)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLyricByID2 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_encData1 = 1;
	size_t soap_flag_lyricID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_encData1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:encData", &(a->_ns1__GetLyricByID2::encData), "xsd:string"))
				{	soap_flag_encData1--;
					continue;
				}
			if (soap_flag_lyricID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:lyricID", &(a->_ns1__GetLyricByID2::lyricID), "xsd:int"))
				{	soap_flag_lyricID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLyricByID2 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLyricByID2, 0, sizeof(_ns1__GetLyricByID2), 0, soap_copy__ns1__GetLyricByID2);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_lyricID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetLyricByID2::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLyricByID2);
	if (this->soap_out(soap, tag?tag:"ns1:GetLyricByID2", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLyricByID2::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLyricByID2(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLyricByID2 * SOAP_FMAC4 soap_get__ns1__GetLyricByID2(struct soap *soap, _ns1__GetLyricByID2 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLyricByID2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLyricByID2 * SOAP_FMAC2 soap_instantiate__ns1__GetLyricByID2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLyricByID2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLyricByID2, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetLyricByID2);
		if (size)
			*size = sizeof(_ns1__GetLyricByID2);
		((_ns1__GetLyricByID2*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetLyricByID2, n);
		if (size)
			*size = n * sizeof(_ns1__GetLyricByID2);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLyricByID2*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLyricByID2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLyricByID2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLyricByID2 %p -> %p\n", q, p));
	*(_ns1__GetLyricByID2*)p = *(_ns1__GetLyricByID2*)q;
}

void _ns1__GetLyricByIDResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__GetLyricByIDResponse::GetLyricByIDResult);
	this->_ns1__GetLyricByIDResponse::output = NULL;
	/* transient soap skipped */
}

void _ns1__GetLyricByIDResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCORELYRICINFO(soap, &this->_ns1__GetLyricByIDResponse::output);
	/* transient soap skipped */
#endif
}

int _ns1__GetLyricByIDResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLyricByIDResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLyricByIDResponse(struct soap *soap, const char *tag, int id, const _ns1__GetLyricByIDResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLyricByIDResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:GetLyricByIDResult");
	if (soap_out_bool(soap, "ns1:GetLyricByIDResult", -1, &(a->_ns1__GetLyricByIDResponse::GetLyricByIDResult), ""))
		return soap->error;
	if (a->_ns1__GetLyricByIDResponse::output)
	{	if (soap_out_PointerTons1__ST_USCORELYRICINFO(soap, "ns1:output", -1, &a->_ns1__GetLyricByIDResponse::output, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:output"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLyricByIDResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLyricByIDResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLyricByIDResponse * SOAP_FMAC4 soap_in__ns1__GetLyricByIDResponse(struct soap *soap, const char *tag, _ns1__GetLyricByIDResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLyricByIDResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLyricByIDResponse, sizeof(_ns1__GetLyricByIDResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLyricByIDResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLyricByIDResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetLyricByIDResult1 = 1;
	size_t soap_flag_output1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetLyricByIDResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:GetLyricByIDResult", &(a->_ns1__GetLyricByIDResponse::GetLyricByIDResult), "xsd:boolean"))
				{	soap_flag_GetLyricByIDResult1--;
					continue;
				}
			if (soap_flag_output1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCORELYRICINFO(soap, "ns1:output", &(a->_ns1__GetLyricByIDResponse::output), "ns1:ST_LYRICINFO"))
				{	soap_flag_output1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetLyricByIDResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLyricByIDResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLyricByIDResponse, 0, sizeof(_ns1__GetLyricByIDResponse), 0, soap_copy__ns1__GetLyricByIDResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetLyricByIDResult1 > 0 || soap_flag_output1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetLyricByIDResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLyricByIDResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetLyricByIDResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLyricByIDResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLyricByIDResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLyricByIDResponse * SOAP_FMAC4 soap_get__ns1__GetLyricByIDResponse(struct soap *soap, _ns1__GetLyricByIDResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLyricByIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLyricByIDResponse * SOAP_FMAC2 soap_instantiate__ns1__GetLyricByIDResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLyricByIDResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLyricByIDResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetLyricByIDResponse);
		if (size)
			*size = sizeof(_ns1__GetLyricByIDResponse);
		((_ns1__GetLyricByIDResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetLyricByIDResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetLyricByIDResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLyricByIDResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLyricByIDResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLyricByIDResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLyricByIDResponse %p -> %p\n", q, p));
	*(_ns1__GetLyricByIDResponse*)p = *(_ns1__GetLyricByIDResponse*)q;
}

void _ns1__GetLyricByID::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__GetLyricByID::lyricID);
	/* transient soap skipped */
}

void _ns1__GetLyricByID::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__GetLyricByID::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLyricByID(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLyricByID(struct soap *soap, const char *tag, int id, const _ns1__GetLyricByID *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLyricByID), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:lyricID", -1, &(a->_ns1__GetLyricByID::lyricID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLyricByID::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLyricByID(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLyricByID * SOAP_FMAC4 soap_in__ns1__GetLyricByID(struct soap *soap, const char *tag, _ns1__GetLyricByID *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLyricByID *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLyricByID, sizeof(_ns1__GetLyricByID), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLyricByID)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLyricByID *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_lyricID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_lyricID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:lyricID", &(a->_ns1__GetLyricByID::lyricID), "xsd:int"))
				{	soap_flag_lyricID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLyricByID *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLyricByID, 0, sizeof(_ns1__GetLyricByID), 0, soap_copy__ns1__GetLyricByID);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_lyricID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetLyricByID::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLyricByID);
	if (this->soap_out(soap, tag?tag:"ns1:GetLyricByID", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLyricByID::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLyricByID(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLyricByID * SOAP_FMAC4 soap_get__ns1__GetLyricByID(struct soap *soap, _ns1__GetLyricByID *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLyricByID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLyricByID * SOAP_FMAC2 soap_instantiate__ns1__GetLyricByID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLyricByID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLyricByID, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetLyricByID);
		if (size)
			*size = sizeof(_ns1__GetLyricByID);
		((_ns1__GetLyricByID*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetLyricByID, n);
		if (size)
			*size = n * sizeof(_ns1__GetLyricByID);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLyricByID*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLyricByID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLyricByID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLyricByID %p -> %p\n", q, p));
	*(_ns1__GetLyricByID*)p = *(_ns1__GetLyricByID*)q;
}

void _ns1__GetResembleLyricList2Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetResembleLyricList2Response::GetResembleLyricList2Result = NULL;
	/* transient soap skipped */
}

void _ns1__GetResembleLyricList2Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(soap, &this->_ns1__GetResembleLyricList2Response::GetResembleLyricList2Result);
	/* transient soap skipped */
#endif
}

int _ns1__GetResembleLyricList2Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetResembleLyricList2Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetResembleLyricList2Response(struct soap *soap, const char *tag, int id, const _ns1__GetResembleLyricList2Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetResembleLyricList2Response), type))
		return soap->error;
	if (a->GetResembleLyricList2Result)
		soap_element_result(soap, "ns1:GetResembleLyricList2Result");
	if (soap_out_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(soap, "ns1:GetResembleLyricList2Result", -1, &(a->_ns1__GetResembleLyricList2Response::GetResembleLyricList2Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetResembleLyricList2Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetResembleLyricList2Response(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetResembleLyricList2Response * SOAP_FMAC4 soap_in__ns1__GetResembleLyricList2Response(struct soap *soap, const char *tag, _ns1__GetResembleLyricList2Response *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetResembleLyricList2Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetResembleLyricList2Response, sizeof(_ns1__GetResembleLyricList2Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetResembleLyricList2Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetResembleLyricList2Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetResembleLyricList2Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetResembleLyricList2Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(soap, "ns1:GetResembleLyricList2Result", &(a->_ns1__GetResembleLyricList2Response::GetResembleLyricList2Result), "ns1:ArrayOfST_SEARCHLYRIC_LIST"))
				{	soap_flag_GetResembleLyricList2Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetResembleLyricList2Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetResembleLyricList2Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetResembleLyricList2Response, 0, sizeof(_ns1__GetResembleLyricList2Response), 0, soap_copy__ns1__GetResembleLyricList2Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetResembleLyricList2Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetResembleLyricList2Response);
	if (this->soap_out(soap, tag?tag:"ns1:GetResembleLyricList2Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetResembleLyricList2Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetResembleLyricList2Response(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetResembleLyricList2Response * SOAP_FMAC4 soap_get__ns1__GetResembleLyricList2Response(struct soap *soap, _ns1__GetResembleLyricList2Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetResembleLyricList2Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetResembleLyricList2Response * SOAP_FMAC2 soap_instantiate__ns1__GetResembleLyricList2Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetResembleLyricList2Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetResembleLyricList2Response, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetResembleLyricList2Response);
		if (size)
			*size = sizeof(_ns1__GetResembleLyricList2Response);
		((_ns1__GetResembleLyricList2Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetResembleLyricList2Response, n);
		if (size)
			*size = n * sizeof(_ns1__GetResembleLyricList2Response);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetResembleLyricList2Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetResembleLyricList2Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetResembleLyricList2Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetResembleLyricList2Response %p -> %p\n", q, p));
	*(_ns1__GetResembleLyricList2Response*)p = *(_ns1__GetResembleLyricList2Response*)q;
}

void _ns1__GetResembleLyricList2::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetResembleLyricList2::encData = NULL;
	this->_ns1__GetResembleLyricList2::title = NULL;
	this->_ns1__GetResembleLyricList2::artist = NULL;
	soap_default_int(soap, &this->_ns1__GetResembleLyricList2::pageNo);
	/* transient soap skipped */
}

void _ns1__GetResembleLyricList2::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetResembleLyricList2::encData);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetResembleLyricList2::title);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetResembleLyricList2::artist);
	/* transient soap skipped */
#endif
}

int _ns1__GetResembleLyricList2::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetResembleLyricList2(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetResembleLyricList2(struct soap *soap, const char *tag, int id, const _ns1__GetResembleLyricList2 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetResembleLyricList2), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:encData", -1, &(a->_ns1__GetResembleLyricList2::encData), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:title", -1, &(a->_ns1__GetResembleLyricList2::title), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:artist", -1, &(a->_ns1__GetResembleLyricList2::artist), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:pageNo", -1, &(a->_ns1__GetResembleLyricList2::pageNo), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetResembleLyricList2::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetResembleLyricList2(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetResembleLyricList2 * SOAP_FMAC4 soap_in__ns1__GetResembleLyricList2(struct soap *soap, const char *tag, _ns1__GetResembleLyricList2 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetResembleLyricList2 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetResembleLyricList2, sizeof(_ns1__GetResembleLyricList2), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetResembleLyricList2)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetResembleLyricList2 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_encData1 = 1;
	size_t soap_flag_title1 = 1;
	size_t soap_flag_artist1 = 1;
	size_t soap_flag_pageNo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_encData1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:encData", &(a->_ns1__GetResembleLyricList2::encData), "xsd:string"))
				{	soap_flag_encData1--;
					continue;
				}
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:title", &(a->_ns1__GetResembleLyricList2::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			if (soap_flag_artist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:artist", &(a->_ns1__GetResembleLyricList2::artist), "xsd:string"))
				{	soap_flag_artist1--;
					continue;
				}
			if (soap_flag_pageNo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:pageNo", &(a->_ns1__GetResembleLyricList2::pageNo), "xsd:int"))
				{	soap_flag_pageNo1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetResembleLyricList2 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetResembleLyricList2, 0, sizeof(_ns1__GetResembleLyricList2), 0, soap_copy__ns1__GetResembleLyricList2);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_pageNo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetResembleLyricList2::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetResembleLyricList2);
	if (this->soap_out(soap, tag?tag:"ns1:GetResembleLyricList2", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetResembleLyricList2::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetResembleLyricList2(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetResembleLyricList2 * SOAP_FMAC4 soap_get__ns1__GetResembleLyricList2(struct soap *soap, _ns1__GetResembleLyricList2 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetResembleLyricList2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetResembleLyricList2 * SOAP_FMAC2 soap_instantiate__ns1__GetResembleLyricList2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetResembleLyricList2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetResembleLyricList2, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetResembleLyricList2);
		if (size)
			*size = sizeof(_ns1__GetResembleLyricList2);
		((_ns1__GetResembleLyricList2*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetResembleLyricList2, n);
		if (size)
			*size = n * sizeof(_ns1__GetResembleLyricList2);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetResembleLyricList2*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetResembleLyricList2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetResembleLyricList2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetResembleLyricList2 %p -> %p\n", q, p));
	*(_ns1__GetResembleLyricList2*)p = *(_ns1__GetResembleLyricList2*)q;
}

void _ns1__GetResembleLyricListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetResembleLyricListResponse::GetResembleLyricListResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetResembleLyricListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(soap, &this->_ns1__GetResembleLyricListResponse::GetResembleLyricListResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetResembleLyricListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetResembleLyricListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetResembleLyricListResponse(struct soap *soap, const char *tag, int id, const _ns1__GetResembleLyricListResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetResembleLyricListResponse), type))
		return soap->error;
	if (a->GetResembleLyricListResult)
		soap_element_result(soap, "ns1:GetResembleLyricListResult");
	if (soap_out_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(soap, "ns1:GetResembleLyricListResult", -1, &(a->_ns1__GetResembleLyricListResponse::GetResembleLyricListResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetResembleLyricListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetResembleLyricListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetResembleLyricListResponse * SOAP_FMAC4 soap_in__ns1__GetResembleLyricListResponse(struct soap *soap, const char *tag, _ns1__GetResembleLyricListResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetResembleLyricListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetResembleLyricListResponse, sizeof(_ns1__GetResembleLyricListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetResembleLyricListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetResembleLyricListResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetResembleLyricListResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetResembleLyricListResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(soap, "ns1:GetResembleLyricListResult", &(a->_ns1__GetResembleLyricListResponse::GetResembleLyricListResult), "ns1:ArrayOfST_SEARCHLYRIC_LIST"))
				{	soap_flag_GetResembleLyricListResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetResembleLyricListResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetResembleLyricListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetResembleLyricListResponse, 0, sizeof(_ns1__GetResembleLyricListResponse), 0, soap_copy__ns1__GetResembleLyricListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetResembleLyricListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetResembleLyricListResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetResembleLyricListResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetResembleLyricListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetResembleLyricListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetResembleLyricListResponse * SOAP_FMAC4 soap_get__ns1__GetResembleLyricListResponse(struct soap *soap, _ns1__GetResembleLyricListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetResembleLyricListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetResembleLyricListResponse * SOAP_FMAC2 soap_instantiate__ns1__GetResembleLyricListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetResembleLyricListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetResembleLyricListResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetResembleLyricListResponse);
		if (size)
			*size = sizeof(_ns1__GetResembleLyricListResponse);
		((_ns1__GetResembleLyricListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetResembleLyricListResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetResembleLyricListResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetResembleLyricListResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetResembleLyricListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetResembleLyricListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetResembleLyricListResponse %p -> %p\n", q, p));
	*(_ns1__GetResembleLyricListResponse*)p = *(_ns1__GetResembleLyricListResponse*)q;
}

void _ns1__GetResembleLyricList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetResembleLyricList::title = NULL;
	this->_ns1__GetResembleLyricList::artist = NULL;
	soap_default_int(soap, &this->_ns1__GetResembleLyricList::pageNo);
	/* transient soap skipped */
}

void _ns1__GetResembleLyricList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetResembleLyricList::title);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetResembleLyricList::artist);
	/* transient soap skipped */
#endif
}

int _ns1__GetResembleLyricList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetResembleLyricList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetResembleLyricList(struct soap *soap, const char *tag, int id, const _ns1__GetResembleLyricList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetResembleLyricList), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:title", -1, &(a->_ns1__GetResembleLyricList::title), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:artist", -1, &(a->_ns1__GetResembleLyricList::artist), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:pageNo", -1, &(a->_ns1__GetResembleLyricList::pageNo), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetResembleLyricList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetResembleLyricList(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetResembleLyricList * SOAP_FMAC4 soap_in__ns1__GetResembleLyricList(struct soap *soap, const char *tag, _ns1__GetResembleLyricList *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetResembleLyricList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetResembleLyricList, sizeof(_ns1__GetResembleLyricList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetResembleLyricList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetResembleLyricList *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_title1 = 1;
	size_t soap_flag_artist1 = 1;
	size_t soap_flag_pageNo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:title", &(a->_ns1__GetResembleLyricList::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			if (soap_flag_artist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:artist", &(a->_ns1__GetResembleLyricList::artist), "xsd:string"))
				{	soap_flag_artist1--;
					continue;
				}
			if (soap_flag_pageNo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:pageNo", &(a->_ns1__GetResembleLyricList::pageNo), "xsd:int"))
				{	soap_flag_pageNo1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetResembleLyricList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetResembleLyricList, 0, sizeof(_ns1__GetResembleLyricList), 0, soap_copy__ns1__GetResembleLyricList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_pageNo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetResembleLyricList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetResembleLyricList);
	if (this->soap_out(soap, tag?tag:"ns1:GetResembleLyricList", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetResembleLyricList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetResembleLyricList(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetResembleLyricList * SOAP_FMAC4 soap_get__ns1__GetResembleLyricList(struct soap *soap, _ns1__GetResembleLyricList *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetResembleLyricList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetResembleLyricList * SOAP_FMAC2 soap_instantiate__ns1__GetResembleLyricList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetResembleLyricList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetResembleLyricList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetResembleLyricList);
		if (size)
			*size = sizeof(_ns1__GetResembleLyricList);
		((_ns1__GetResembleLyricList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetResembleLyricList, n);
		if (size)
			*size = n * sizeof(_ns1__GetResembleLyricList);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetResembleLyricList*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetResembleLyricList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetResembleLyricList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetResembleLyricList %p -> %p\n", q, p));
	*(_ns1__GetResembleLyricList*)p = *(_ns1__GetResembleLyricList*)q;
}

void _ns1__UploadForeignLyricResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__UploadForeignLyricResponse::UploadForeignLyricResult);
	/* transient soap skipped */
}

void _ns1__UploadForeignLyricResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__UploadForeignLyricResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__UploadForeignLyricResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadForeignLyricResponse(struct soap *soap, const char *tag, int id, const _ns1__UploadForeignLyricResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__UploadForeignLyricResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:UploadForeignLyricResult");
	if (soap_out_bool(soap, "ns1:UploadForeignLyricResult", -1, &(a->_ns1__UploadForeignLyricResponse::UploadForeignLyricResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__UploadForeignLyricResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__UploadForeignLyricResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__UploadForeignLyricResponse * SOAP_FMAC4 soap_in__ns1__UploadForeignLyricResponse(struct soap *soap, const char *tag, _ns1__UploadForeignLyricResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__UploadForeignLyricResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__UploadForeignLyricResponse, sizeof(_ns1__UploadForeignLyricResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__UploadForeignLyricResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__UploadForeignLyricResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_UploadForeignLyricResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_UploadForeignLyricResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:UploadForeignLyricResult", &(a->_ns1__UploadForeignLyricResponse::UploadForeignLyricResult), "xsd:boolean"))
				{	soap_flag_UploadForeignLyricResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:UploadForeignLyricResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__UploadForeignLyricResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__UploadForeignLyricResponse, 0, sizeof(_ns1__UploadForeignLyricResponse), 0, soap_copy__ns1__UploadForeignLyricResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_UploadForeignLyricResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__UploadForeignLyricResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__UploadForeignLyricResponse);
	if (this->soap_out(soap, tag?tag:"ns1:UploadForeignLyricResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__UploadForeignLyricResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__UploadForeignLyricResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__UploadForeignLyricResponse * SOAP_FMAC4 soap_get__ns1__UploadForeignLyricResponse(struct soap *soap, _ns1__UploadForeignLyricResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__UploadForeignLyricResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__UploadForeignLyricResponse * SOAP_FMAC2 soap_instantiate__ns1__UploadForeignLyricResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__UploadForeignLyricResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__UploadForeignLyricResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__UploadForeignLyricResponse);
		if (size)
			*size = sizeof(_ns1__UploadForeignLyricResponse);
		((_ns1__UploadForeignLyricResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__UploadForeignLyricResponse, n);
		if (size)
			*size = n * sizeof(_ns1__UploadForeignLyricResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__UploadForeignLyricResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__UploadForeignLyricResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadForeignLyricResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__UploadForeignLyricResponse %p -> %p\n", q, p));
	*(_ns1__UploadForeignLyricResponse*)p = *(_ns1__UploadForeignLyricResponse*)q;
}

void _ns1__UploadForeignLyric::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__UploadForeignLyric::uploadInfo = NULL;
	/* transient soap skipped */
}

void _ns1__UploadForeignLyric::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__UploadForeignLyricInfo(soap, &this->_ns1__UploadForeignLyric::uploadInfo);
	/* transient soap skipped */
#endif
}

int _ns1__UploadForeignLyric::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__UploadForeignLyric(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadForeignLyric(struct soap *soap, const char *tag, int id, const _ns1__UploadForeignLyric *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__UploadForeignLyric), type))
		return soap->error;
	if (a->_ns1__UploadForeignLyric::uploadInfo)
	{	if (soap_out_PointerTons1__UploadForeignLyricInfo(soap, "ns1:uploadInfo", -1, &a->_ns1__UploadForeignLyric::uploadInfo, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:uploadInfo"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__UploadForeignLyric::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__UploadForeignLyric(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__UploadForeignLyric * SOAP_FMAC4 soap_in__ns1__UploadForeignLyric(struct soap *soap, const char *tag, _ns1__UploadForeignLyric *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__UploadForeignLyric *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__UploadForeignLyric, sizeof(_ns1__UploadForeignLyric), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__UploadForeignLyric)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__UploadForeignLyric *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_uploadInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_uploadInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__UploadForeignLyricInfo(soap, "ns1:uploadInfo", &(a->_ns1__UploadForeignLyric::uploadInfo), "ns1:UploadForeignLyricInfo"))
				{	soap_flag_uploadInfo1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__UploadForeignLyric *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__UploadForeignLyric, 0, sizeof(_ns1__UploadForeignLyric), 0, soap_copy__ns1__UploadForeignLyric);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_uploadInfo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__UploadForeignLyric::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__UploadForeignLyric);
	if (this->soap_out(soap, tag?tag:"ns1:UploadForeignLyric", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__UploadForeignLyric::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__UploadForeignLyric(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__UploadForeignLyric * SOAP_FMAC4 soap_get__ns1__UploadForeignLyric(struct soap *soap, _ns1__UploadForeignLyric *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__UploadForeignLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__UploadForeignLyric * SOAP_FMAC2 soap_instantiate__ns1__UploadForeignLyric(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__UploadForeignLyric(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__UploadForeignLyric, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__UploadForeignLyric);
		if (size)
			*size = sizeof(_ns1__UploadForeignLyric);
		((_ns1__UploadForeignLyric*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__UploadForeignLyric, n);
		if (size)
			*size = n * sizeof(_ns1__UploadForeignLyric);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__UploadForeignLyric*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__UploadForeignLyric*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadForeignLyric(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__UploadForeignLyric %p -> %p\n", q, p));
	*(_ns1__UploadForeignLyric*)p = *(_ns1__UploadForeignLyric*)q;
}

void _ns1__GetBroadcastingList2Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetBroadcastingList2Response::GetBroadcastingList2Result = NULL;
	/* transient soap skipped */
}

void _ns1__GetBroadcastingList2Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfGetBroadcastingListReturn(soap, &this->_ns1__GetBroadcastingList2Response::GetBroadcastingList2Result);
	/* transient soap skipped */
#endif
}

int _ns1__GetBroadcastingList2Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetBroadcastingList2Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetBroadcastingList2Response(struct soap *soap, const char *tag, int id, const _ns1__GetBroadcastingList2Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetBroadcastingList2Response), type))
		return soap->error;
	if (a->GetBroadcastingList2Result)
		soap_element_result(soap, "ns1:GetBroadcastingList2Result");
	if (soap_out_PointerTons1__ArrayOfGetBroadcastingListReturn(soap, "ns1:GetBroadcastingList2Result", -1, &(a->_ns1__GetBroadcastingList2Response::GetBroadcastingList2Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetBroadcastingList2Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetBroadcastingList2Response(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetBroadcastingList2Response * SOAP_FMAC4 soap_in__ns1__GetBroadcastingList2Response(struct soap *soap, const char *tag, _ns1__GetBroadcastingList2Response *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetBroadcastingList2Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetBroadcastingList2Response, sizeof(_ns1__GetBroadcastingList2Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetBroadcastingList2Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetBroadcastingList2Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetBroadcastingList2Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetBroadcastingList2Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfGetBroadcastingListReturn(soap, "ns1:GetBroadcastingList2Result", &(a->_ns1__GetBroadcastingList2Response::GetBroadcastingList2Result), "ns1:ArrayOfGetBroadcastingListReturn"))
				{	soap_flag_GetBroadcastingList2Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetBroadcastingList2Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetBroadcastingList2Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetBroadcastingList2Response, 0, sizeof(_ns1__GetBroadcastingList2Response), 0, soap_copy__ns1__GetBroadcastingList2Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetBroadcastingList2Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetBroadcastingList2Response);
	if (this->soap_out(soap, tag?tag:"ns1:GetBroadcastingList2Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetBroadcastingList2Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetBroadcastingList2Response(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetBroadcastingList2Response * SOAP_FMAC4 soap_get__ns1__GetBroadcastingList2Response(struct soap *soap, _ns1__GetBroadcastingList2Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetBroadcastingList2Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetBroadcastingList2Response * SOAP_FMAC2 soap_instantiate__ns1__GetBroadcastingList2Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetBroadcastingList2Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetBroadcastingList2Response, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetBroadcastingList2Response);
		if (size)
			*size = sizeof(_ns1__GetBroadcastingList2Response);
		((_ns1__GetBroadcastingList2Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetBroadcastingList2Response, n);
		if (size)
			*size = n * sizeof(_ns1__GetBroadcastingList2Response);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetBroadcastingList2Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetBroadcastingList2Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetBroadcastingList2Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetBroadcastingList2Response %p -> %p\n", q, p));
	*(_ns1__GetBroadcastingList2Response*)p = *(_ns1__GetBroadcastingList2Response*)q;
}

void _ns1__GetBroadcastingList2::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__GetBroadcastingList2::category);
	soap_default_float(soap, &this->_ns1__GetBroadcastingList2::version);
	/* transient soap skipped */
}

void _ns1__GetBroadcastingList2::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__GetBroadcastingList2::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetBroadcastingList2(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetBroadcastingList2(struct soap *soap, const char *tag, int id, const _ns1__GetBroadcastingList2 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetBroadcastingList2), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:category", -1, &(a->_ns1__GetBroadcastingList2::category), ""))
		return soap->error;
	if (soap_out_float(soap, "ns1:version", -1, &(a->_ns1__GetBroadcastingList2::version), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetBroadcastingList2::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetBroadcastingList2(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetBroadcastingList2 * SOAP_FMAC4 soap_in__ns1__GetBroadcastingList2(struct soap *soap, const char *tag, _ns1__GetBroadcastingList2 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetBroadcastingList2 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetBroadcastingList2, sizeof(_ns1__GetBroadcastingList2), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetBroadcastingList2)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetBroadcastingList2 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_category1 = 1;
	size_t soap_flag_version1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_category1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:category", &(a->_ns1__GetBroadcastingList2::category), "xsd:int"))
				{	soap_flag_category1--;
					continue;
				}
			if (soap_flag_version1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "ns1:version", &(a->_ns1__GetBroadcastingList2::version), "xsd:float"))
				{	soap_flag_version1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetBroadcastingList2 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetBroadcastingList2, 0, sizeof(_ns1__GetBroadcastingList2), 0, soap_copy__ns1__GetBroadcastingList2);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_category1 > 0 || soap_flag_version1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetBroadcastingList2::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetBroadcastingList2);
	if (this->soap_out(soap, tag?tag:"ns1:GetBroadcastingList2", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetBroadcastingList2::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetBroadcastingList2(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetBroadcastingList2 * SOAP_FMAC4 soap_get__ns1__GetBroadcastingList2(struct soap *soap, _ns1__GetBroadcastingList2 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetBroadcastingList2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetBroadcastingList2 * SOAP_FMAC2 soap_instantiate__ns1__GetBroadcastingList2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetBroadcastingList2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetBroadcastingList2, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetBroadcastingList2);
		if (size)
			*size = sizeof(_ns1__GetBroadcastingList2);
		((_ns1__GetBroadcastingList2*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetBroadcastingList2, n);
		if (size)
			*size = n * sizeof(_ns1__GetBroadcastingList2);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetBroadcastingList2*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetBroadcastingList2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetBroadcastingList2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetBroadcastingList2 %p -> %p\n", q, p));
	*(_ns1__GetBroadcastingList2*)p = *(_ns1__GetBroadcastingList2*)q;
}

void _ns1__GetBroadcastingListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetBroadcastingListResponse::GetBroadcastingListResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetBroadcastingListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfGetBroadcastingListReturn(soap, &this->_ns1__GetBroadcastingListResponse::GetBroadcastingListResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetBroadcastingListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetBroadcastingListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetBroadcastingListResponse(struct soap *soap, const char *tag, int id, const _ns1__GetBroadcastingListResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetBroadcastingListResponse), type))
		return soap->error;
	if (a->GetBroadcastingListResult)
		soap_element_result(soap, "ns1:GetBroadcastingListResult");
	if (soap_out_PointerTons1__ArrayOfGetBroadcastingListReturn(soap, "ns1:GetBroadcastingListResult", -1, &(a->_ns1__GetBroadcastingListResponse::GetBroadcastingListResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetBroadcastingListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetBroadcastingListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetBroadcastingListResponse * SOAP_FMAC4 soap_in__ns1__GetBroadcastingListResponse(struct soap *soap, const char *tag, _ns1__GetBroadcastingListResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetBroadcastingListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetBroadcastingListResponse, sizeof(_ns1__GetBroadcastingListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetBroadcastingListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetBroadcastingListResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetBroadcastingListResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetBroadcastingListResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfGetBroadcastingListReturn(soap, "ns1:GetBroadcastingListResult", &(a->_ns1__GetBroadcastingListResponse::GetBroadcastingListResult), "ns1:ArrayOfGetBroadcastingListReturn"))
				{	soap_flag_GetBroadcastingListResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetBroadcastingListResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetBroadcastingListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetBroadcastingListResponse, 0, sizeof(_ns1__GetBroadcastingListResponse), 0, soap_copy__ns1__GetBroadcastingListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetBroadcastingListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetBroadcastingListResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetBroadcastingListResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetBroadcastingListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetBroadcastingListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetBroadcastingListResponse * SOAP_FMAC4 soap_get__ns1__GetBroadcastingListResponse(struct soap *soap, _ns1__GetBroadcastingListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetBroadcastingListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetBroadcastingListResponse * SOAP_FMAC2 soap_instantiate__ns1__GetBroadcastingListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetBroadcastingListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetBroadcastingListResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetBroadcastingListResponse);
		if (size)
			*size = sizeof(_ns1__GetBroadcastingListResponse);
		((_ns1__GetBroadcastingListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetBroadcastingListResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetBroadcastingListResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetBroadcastingListResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetBroadcastingListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetBroadcastingListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetBroadcastingListResponse %p -> %p\n", q, p));
	*(_ns1__GetBroadcastingListResponse*)p = *(_ns1__GetBroadcastingListResponse*)q;
}

void _ns1__GetBroadcastingList::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__GetBroadcastingList::category);
	/* transient soap skipped */
}

void _ns1__GetBroadcastingList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__GetBroadcastingList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetBroadcastingList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetBroadcastingList(struct soap *soap, const char *tag, int id, const _ns1__GetBroadcastingList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetBroadcastingList), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:category", -1, &(a->_ns1__GetBroadcastingList::category), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetBroadcastingList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetBroadcastingList(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetBroadcastingList * SOAP_FMAC4 soap_in__ns1__GetBroadcastingList(struct soap *soap, const char *tag, _ns1__GetBroadcastingList *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetBroadcastingList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetBroadcastingList, sizeof(_ns1__GetBroadcastingList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetBroadcastingList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetBroadcastingList *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_category1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_category1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:category", &(a->_ns1__GetBroadcastingList::category), "xsd:int"))
				{	soap_flag_category1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetBroadcastingList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetBroadcastingList, 0, sizeof(_ns1__GetBroadcastingList), 0, soap_copy__ns1__GetBroadcastingList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_category1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetBroadcastingList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetBroadcastingList);
	if (this->soap_out(soap, tag?tag:"ns1:GetBroadcastingList", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetBroadcastingList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetBroadcastingList(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetBroadcastingList * SOAP_FMAC4 soap_get__ns1__GetBroadcastingList(struct soap *soap, _ns1__GetBroadcastingList *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetBroadcastingList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetBroadcastingList * SOAP_FMAC2 soap_instantiate__ns1__GetBroadcastingList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetBroadcastingList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetBroadcastingList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetBroadcastingList);
		if (size)
			*size = sizeof(_ns1__GetBroadcastingList);
		((_ns1__GetBroadcastingList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetBroadcastingList, n);
		if (size)
			*size = n * sizeof(_ns1__GetBroadcastingList);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetBroadcastingList*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetBroadcastingList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetBroadcastingList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetBroadcastingList %p -> %p\n", q, p));
	*(_ns1__GetBroadcastingList*)p = *(_ns1__GetBroadcastingList*)q;
}

void _ns1__CastGetExMetaDataList3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CastGetExMetaDataList3Response::CastGetExMetaDataList3Result = NULL;
	/* transient soap skipped */
}

void _ns1__CastGetExMetaDataList3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, &this->_ns1__CastGetExMetaDataList3Response::CastGetExMetaDataList3Result);
	/* transient soap skipped */
#endif
}

int _ns1__CastGetExMetaDataList3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CastGetExMetaDataList3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CastGetExMetaDataList3Response(struct soap *soap, const char *tag, int id, const _ns1__CastGetExMetaDataList3Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CastGetExMetaDataList3Response), type))
		return soap->error;
	if (a->CastGetExMetaDataList3Result)
		soap_element_result(soap, "ns1:CastGetExMetaDataList3Result");
	if (soap_out_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, "ns1:CastGetExMetaDataList3Result", -1, &(a->_ns1__CastGetExMetaDataList3Response::CastGetExMetaDataList3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CastGetExMetaDataList3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CastGetExMetaDataList3Response(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataList3Response * SOAP_FMAC4 soap_in__ns1__CastGetExMetaDataList3Response(struct soap *soap, const char *tag, _ns1__CastGetExMetaDataList3Response *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CastGetExMetaDataList3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CastGetExMetaDataList3Response, sizeof(_ns1__CastGetExMetaDataList3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CastGetExMetaDataList3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CastGetExMetaDataList3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CastGetExMetaDataList3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CastGetExMetaDataList3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, "ns1:CastGetExMetaDataList3Result", &(a->_ns1__CastGetExMetaDataList3Response::CastGetExMetaDataList3Result), "ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST3_RETURN"))
				{	soap_flag_CastGetExMetaDataList3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:CastGetExMetaDataList3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CastGetExMetaDataList3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CastGetExMetaDataList3Response, 0, sizeof(_ns1__CastGetExMetaDataList3Response), 0, soap_copy__ns1__CastGetExMetaDataList3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__CastGetExMetaDataList3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__CastGetExMetaDataList3Response);
	if (this->soap_out(soap, tag?tag:"ns1:CastGetExMetaDataList3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CastGetExMetaDataList3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CastGetExMetaDataList3Response(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataList3Response * SOAP_FMAC4 soap_get__ns1__CastGetExMetaDataList3Response(struct soap *soap, _ns1__CastGetExMetaDataList3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CastGetExMetaDataList3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CastGetExMetaDataList3Response * SOAP_FMAC2 soap_instantiate__ns1__CastGetExMetaDataList3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CastGetExMetaDataList3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CastGetExMetaDataList3Response, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CastGetExMetaDataList3Response);
		if (size)
			*size = sizeof(_ns1__CastGetExMetaDataList3Response);
		((_ns1__CastGetExMetaDataList3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CastGetExMetaDataList3Response, n);
		if (size)
			*size = n * sizeof(_ns1__CastGetExMetaDataList3Response);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CastGetExMetaDataList3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CastGetExMetaDataList3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CastGetExMetaDataList3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CastGetExMetaDataList3Response %p -> %p\n", q, p));
	*(_ns1__CastGetExMetaDataList3Response*)p = *(_ns1__CastGetExMetaDataList3Response*)q;
}

void _ns1__CastGetExMetaDataList3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__CastGetExMetaDataList3::nIgnore);
	/* transient soap skipped */
}

void _ns1__CastGetExMetaDataList3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__CastGetExMetaDataList3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CastGetExMetaDataList3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CastGetExMetaDataList3(struct soap *soap, const char *tag, int id, const _ns1__CastGetExMetaDataList3 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CastGetExMetaDataList3), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:nIgnore", -1, &(a->_ns1__CastGetExMetaDataList3::nIgnore), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CastGetExMetaDataList3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CastGetExMetaDataList3(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataList3 * SOAP_FMAC4 soap_in__ns1__CastGetExMetaDataList3(struct soap *soap, const char *tag, _ns1__CastGetExMetaDataList3 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CastGetExMetaDataList3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CastGetExMetaDataList3, sizeof(_ns1__CastGetExMetaDataList3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CastGetExMetaDataList3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CastGetExMetaDataList3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nIgnore1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nIgnore1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nIgnore", &(a->_ns1__CastGetExMetaDataList3::nIgnore), "xsd:int"))
				{	soap_flag_nIgnore1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CastGetExMetaDataList3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CastGetExMetaDataList3, 0, sizeof(_ns1__CastGetExMetaDataList3), 0, soap_copy__ns1__CastGetExMetaDataList3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nIgnore1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__CastGetExMetaDataList3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__CastGetExMetaDataList3);
	if (this->soap_out(soap, tag?tag:"ns1:CastGetExMetaDataList3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CastGetExMetaDataList3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CastGetExMetaDataList3(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataList3 * SOAP_FMAC4 soap_get__ns1__CastGetExMetaDataList3(struct soap *soap, _ns1__CastGetExMetaDataList3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CastGetExMetaDataList3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CastGetExMetaDataList3 * SOAP_FMAC2 soap_instantiate__ns1__CastGetExMetaDataList3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CastGetExMetaDataList3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CastGetExMetaDataList3, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CastGetExMetaDataList3);
		if (size)
			*size = sizeof(_ns1__CastGetExMetaDataList3);
		((_ns1__CastGetExMetaDataList3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CastGetExMetaDataList3, n);
		if (size)
			*size = n * sizeof(_ns1__CastGetExMetaDataList3);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CastGetExMetaDataList3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CastGetExMetaDataList3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CastGetExMetaDataList3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CastGetExMetaDataList3 %p -> %p\n", q, p));
	*(_ns1__CastGetExMetaDataList3*)p = *(_ns1__CastGetExMetaDataList3*)q;
}

void _ns1__CastGetExMetaDataList2Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CastGetExMetaDataList2Response::CastGetExMetaDataList2Result = NULL;
	/* transient soap skipped */
}

void _ns1__CastGetExMetaDataList2Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, &this->_ns1__CastGetExMetaDataList2Response::CastGetExMetaDataList2Result);
	/* transient soap skipped */
#endif
}

int _ns1__CastGetExMetaDataList2Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CastGetExMetaDataList2Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CastGetExMetaDataList2Response(struct soap *soap, const char *tag, int id, const _ns1__CastGetExMetaDataList2Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CastGetExMetaDataList2Response), type))
		return soap->error;
	if (a->CastGetExMetaDataList2Result)
		soap_element_result(soap, "ns1:CastGetExMetaDataList2Result");
	if (soap_out_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, "ns1:CastGetExMetaDataList2Result", -1, &(a->_ns1__CastGetExMetaDataList2Response::CastGetExMetaDataList2Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CastGetExMetaDataList2Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CastGetExMetaDataList2Response(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataList2Response * SOAP_FMAC4 soap_in__ns1__CastGetExMetaDataList2Response(struct soap *soap, const char *tag, _ns1__CastGetExMetaDataList2Response *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CastGetExMetaDataList2Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CastGetExMetaDataList2Response, sizeof(_ns1__CastGetExMetaDataList2Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CastGetExMetaDataList2Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CastGetExMetaDataList2Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CastGetExMetaDataList2Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CastGetExMetaDataList2Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, "ns1:CastGetExMetaDataList2Result", &(a->_ns1__CastGetExMetaDataList2Response::CastGetExMetaDataList2Result), "ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST2_RETURN"))
				{	soap_flag_CastGetExMetaDataList2Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:CastGetExMetaDataList2Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CastGetExMetaDataList2Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CastGetExMetaDataList2Response, 0, sizeof(_ns1__CastGetExMetaDataList2Response), 0, soap_copy__ns1__CastGetExMetaDataList2Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__CastGetExMetaDataList2Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__CastGetExMetaDataList2Response);
	if (this->soap_out(soap, tag?tag:"ns1:CastGetExMetaDataList2Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CastGetExMetaDataList2Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CastGetExMetaDataList2Response(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataList2Response * SOAP_FMAC4 soap_get__ns1__CastGetExMetaDataList2Response(struct soap *soap, _ns1__CastGetExMetaDataList2Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CastGetExMetaDataList2Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CastGetExMetaDataList2Response * SOAP_FMAC2 soap_instantiate__ns1__CastGetExMetaDataList2Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CastGetExMetaDataList2Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CastGetExMetaDataList2Response, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CastGetExMetaDataList2Response);
		if (size)
			*size = sizeof(_ns1__CastGetExMetaDataList2Response);
		((_ns1__CastGetExMetaDataList2Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CastGetExMetaDataList2Response, n);
		if (size)
			*size = n * sizeof(_ns1__CastGetExMetaDataList2Response);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CastGetExMetaDataList2Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CastGetExMetaDataList2Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CastGetExMetaDataList2Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CastGetExMetaDataList2Response %p -> %p\n", q, p));
	*(_ns1__CastGetExMetaDataList2Response*)p = *(_ns1__CastGetExMetaDataList2Response*)q;
}

void _ns1__CastGetExMetaDataList2::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__CastGetExMetaDataList2::nIgnore);
	/* transient soap skipped */
}

void _ns1__CastGetExMetaDataList2::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__CastGetExMetaDataList2::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CastGetExMetaDataList2(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CastGetExMetaDataList2(struct soap *soap, const char *tag, int id, const _ns1__CastGetExMetaDataList2 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CastGetExMetaDataList2), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:nIgnore", -1, &(a->_ns1__CastGetExMetaDataList2::nIgnore), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CastGetExMetaDataList2::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CastGetExMetaDataList2(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataList2 * SOAP_FMAC4 soap_in__ns1__CastGetExMetaDataList2(struct soap *soap, const char *tag, _ns1__CastGetExMetaDataList2 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CastGetExMetaDataList2 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CastGetExMetaDataList2, sizeof(_ns1__CastGetExMetaDataList2), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CastGetExMetaDataList2)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CastGetExMetaDataList2 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nIgnore1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nIgnore1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nIgnore", &(a->_ns1__CastGetExMetaDataList2::nIgnore), "xsd:int"))
				{	soap_flag_nIgnore1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CastGetExMetaDataList2 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CastGetExMetaDataList2, 0, sizeof(_ns1__CastGetExMetaDataList2), 0, soap_copy__ns1__CastGetExMetaDataList2);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nIgnore1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__CastGetExMetaDataList2::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__CastGetExMetaDataList2);
	if (this->soap_out(soap, tag?tag:"ns1:CastGetExMetaDataList2", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CastGetExMetaDataList2::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CastGetExMetaDataList2(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataList2 * SOAP_FMAC4 soap_get__ns1__CastGetExMetaDataList2(struct soap *soap, _ns1__CastGetExMetaDataList2 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CastGetExMetaDataList2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CastGetExMetaDataList2 * SOAP_FMAC2 soap_instantiate__ns1__CastGetExMetaDataList2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CastGetExMetaDataList2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CastGetExMetaDataList2, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CastGetExMetaDataList2);
		if (size)
			*size = sizeof(_ns1__CastGetExMetaDataList2);
		((_ns1__CastGetExMetaDataList2*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CastGetExMetaDataList2, n);
		if (size)
			*size = n * sizeof(_ns1__CastGetExMetaDataList2);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CastGetExMetaDataList2*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CastGetExMetaDataList2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CastGetExMetaDataList2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CastGetExMetaDataList2 %p -> %p\n", q, p));
	*(_ns1__CastGetExMetaDataList2*)p = *(_ns1__CastGetExMetaDataList2*)q;
}

void _ns1__CastGetExMetaDataListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CastGetExMetaDataListResponse::CastGetExMetaDataListResult = NULL;
	/* transient soap skipped */
}

void _ns1__CastGetExMetaDataListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, &this->_ns1__CastGetExMetaDataListResponse::CastGetExMetaDataListResult);
	/* transient soap skipped */
#endif
}

int _ns1__CastGetExMetaDataListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CastGetExMetaDataListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CastGetExMetaDataListResponse(struct soap *soap, const char *tag, int id, const _ns1__CastGetExMetaDataListResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CastGetExMetaDataListResponse), type))
		return soap->error;
	if (a->CastGetExMetaDataListResult)
		soap_element_result(soap, "ns1:CastGetExMetaDataListResult");
	if (soap_out_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, "ns1:CastGetExMetaDataListResult", -1, &(a->_ns1__CastGetExMetaDataListResponse::CastGetExMetaDataListResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CastGetExMetaDataListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CastGetExMetaDataListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataListResponse * SOAP_FMAC4 soap_in__ns1__CastGetExMetaDataListResponse(struct soap *soap, const char *tag, _ns1__CastGetExMetaDataListResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CastGetExMetaDataListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CastGetExMetaDataListResponse, sizeof(_ns1__CastGetExMetaDataListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CastGetExMetaDataListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CastGetExMetaDataListResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CastGetExMetaDataListResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CastGetExMetaDataListResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, "ns1:CastGetExMetaDataListResult", &(a->_ns1__CastGetExMetaDataListResponse::CastGetExMetaDataListResult), "ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST_RETURN"))
				{	soap_flag_CastGetExMetaDataListResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:CastGetExMetaDataListResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CastGetExMetaDataListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CastGetExMetaDataListResponse, 0, sizeof(_ns1__CastGetExMetaDataListResponse), 0, soap_copy__ns1__CastGetExMetaDataListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__CastGetExMetaDataListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__CastGetExMetaDataListResponse);
	if (this->soap_out(soap, tag?tag:"ns1:CastGetExMetaDataListResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CastGetExMetaDataListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CastGetExMetaDataListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataListResponse * SOAP_FMAC4 soap_get__ns1__CastGetExMetaDataListResponse(struct soap *soap, _ns1__CastGetExMetaDataListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CastGetExMetaDataListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CastGetExMetaDataListResponse * SOAP_FMAC2 soap_instantiate__ns1__CastGetExMetaDataListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CastGetExMetaDataListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CastGetExMetaDataListResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CastGetExMetaDataListResponse);
		if (size)
			*size = sizeof(_ns1__CastGetExMetaDataListResponse);
		((_ns1__CastGetExMetaDataListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CastGetExMetaDataListResponse, n);
		if (size)
			*size = n * sizeof(_ns1__CastGetExMetaDataListResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CastGetExMetaDataListResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CastGetExMetaDataListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CastGetExMetaDataListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CastGetExMetaDataListResponse %p -> %p\n", q, p));
	*(_ns1__CastGetExMetaDataListResponse*)p = *(_ns1__CastGetExMetaDataListResponse*)q;
}

void _ns1__CastGetExMetaDataList::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__CastGetExMetaDataList::nIgnore);
	/* transient soap skipped */
}

void _ns1__CastGetExMetaDataList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__CastGetExMetaDataList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CastGetExMetaDataList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CastGetExMetaDataList(struct soap *soap, const char *tag, int id, const _ns1__CastGetExMetaDataList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CastGetExMetaDataList), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:nIgnore", -1, &(a->_ns1__CastGetExMetaDataList::nIgnore), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CastGetExMetaDataList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CastGetExMetaDataList(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataList * SOAP_FMAC4 soap_in__ns1__CastGetExMetaDataList(struct soap *soap, const char *tag, _ns1__CastGetExMetaDataList *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CastGetExMetaDataList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CastGetExMetaDataList, sizeof(_ns1__CastGetExMetaDataList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CastGetExMetaDataList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CastGetExMetaDataList *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nIgnore1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nIgnore1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nIgnore", &(a->_ns1__CastGetExMetaDataList::nIgnore), "xsd:int"))
				{	soap_flag_nIgnore1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CastGetExMetaDataList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CastGetExMetaDataList, 0, sizeof(_ns1__CastGetExMetaDataList), 0, soap_copy__ns1__CastGetExMetaDataList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nIgnore1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__CastGetExMetaDataList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__CastGetExMetaDataList);
	if (this->soap_out(soap, tag?tag:"ns1:CastGetExMetaDataList", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CastGetExMetaDataList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CastGetExMetaDataList(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataList * SOAP_FMAC4 soap_get__ns1__CastGetExMetaDataList(struct soap *soap, _ns1__CastGetExMetaDataList *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CastGetExMetaDataList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CastGetExMetaDataList * SOAP_FMAC2 soap_instantiate__ns1__CastGetExMetaDataList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CastGetExMetaDataList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CastGetExMetaDataList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CastGetExMetaDataList);
		if (size)
			*size = sizeof(_ns1__CastGetExMetaDataList);
		((_ns1__CastGetExMetaDataList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CastGetExMetaDataList, n);
		if (size)
			*size = n * sizeof(_ns1__CastGetExMetaDataList);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CastGetExMetaDataList*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CastGetExMetaDataList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CastGetExMetaDataList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CastGetExMetaDataList %p -> %p\n", q, p));
	*(_ns1__CastGetExMetaDataList*)p = *(_ns1__CastGetExMetaDataList*)q;
}

void _ns1__CastGetExMetaDataResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CastGetExMetaDataResponse::CastGetExMetaDataResult = NULL;
	/* transient soap skipped */
}

void _ns1__CastGetExMetaDataResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(soap, &this->_ns1__CastGetExMetaDataResponse::CastGetExMetaDataResult);
	/* transient soap skipped */
#endif
}

int _ns1__CastGetExMetaDataResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CastGetExMetaDataResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CastGetExMetaDataResponse(struct soap *soap, const char *tag, int id, const _ns1__CastGetExMetaDataResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CastGetExMetaDataResponse), type))
		return soap->error;
	if (a->CastGetExMetaDataResult)
		soap_element_result(soap, "ns1:CastGetExMetaDataResult");
	if (a->_ns1__CastGetExMetaDataResponse::CastGetExMetaDataResult)
	{	if (soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(soap, "ns1:CastGetExMetaDataResult", -1, &a->_ns1__CastGetExMetaDataResponse::CastGetExMetaDataResult, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:CastGetExMetaDataResult"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CastGetExMetaDataResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CastGetExMetaDataResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataResponse * SOAP_FMAC4 soap_in__ns1__CastGetExMetaDataResponse(struct soap *soap, const char *tag, _ns1__CastGetExMetaDataResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CastGetExMetaDataResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CastGetExMetaDataResponse, sizeof(_ns1__CastGetExMetaDataResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CastGetExMetaDataResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CastGetExMetaDataResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CastGetExMetaDataResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CastGetExMetaDataResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(soap, "ns1:CastGetExMetaDataResult", &(a->_ns1__CastGetExMetaDataResponse::CastGetExMetaDataResult), "ns1:ST_CAST_GET_EX_METADATA_RETURN"))
				{	soap_flag_CastGetExMetaDataResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:CastGetExMetaDataResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CastGetExMetaDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CastGetExMetaDataResponse, 0, sizeof(_ns1__CastGetExMetaDataResponse), 0, soap_copy__ns1__CastGetExMetaDataResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_CastGetExMetaDataResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__CastGetExMetaDataResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__CastGetExMetaDataResponse);
	if (this->soap_out(soap, tag?tag:"ns1:CastGetExMetaDataResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CastGetExMetaDataResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CastGetExMetaDataResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataResponse * SOAP_FMAC4 soap_get__ns1__CastGetExMetaDataResponse(struct soap *soap, _ns1__CastGetExMetaDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CastGetExMetaDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CastGetExMetaDataResponse * SOAP_FMAC2 soap_instantiate__ns1__CastGetExMetaDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CastGetExMetaDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CastGetExMetaDataResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CastGetExMetaDataResponse);
		if (size)
			*size = sizeof(_ns1__CastGetExMetaDataResponse);
		((_ns1__CastGetExMetaDataResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CastGetExMetaDataResponse, n);
		if (size)
			*size = n * sizeof(_ns1__CastGetExMetaDataResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CastGetExMetaDataResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CastGetExMetaDataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CastGetExMetaDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CastGetExMetaDataResponse %p -> %p\n", q, p));
	*(_ns1__CastGetExMetaDataResponse*)p = *(_ns1__CastGetExMetaDataResponse*)q;
}

void _ns1__CastGetExMetaData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CastGetExMetaData::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__CastGetExMetaData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, &this->_ns1__CastGetExMetaData::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__CastGetExMetaData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CastGetExMetaData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CastGetExMetaData(struct soap *soap, const char *tag, int id, const _ns1__CastGetExMetaData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CastGetExMetaData), type))
		return soap->error;
	if (a->_ns1__CastGetExMetaData::stQuery)
	{	if (soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__CastGetExMetaData::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CastGetExMetaData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CastGetExMetaData(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaData * SOAP_FMAC4 soap_in__ns1__CastGetExMetaData(struct soap *soap, const char *tag, _ns1__CastGetExMetaData *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CastGetExMetaData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CastGetExMetaData, sizeof(_ns1__CastGetExMetaData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CastGetExMetaData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CastGetExMetaData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__CastGetExMetaData::stQuery), "ns1:ST_CAST_GET_EX_METADATA_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CastGetExMetaData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CastGetExMetaData, 0, sizeof(_ns1__CastGetExMetaData), 0, soap_copy__ns1__CastGetExMetaData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__CastGetExMetaData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__CastGetExMetaData);
	if (this->soap_out(soap, tag?tag:"ns1:CastGetExMetaData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CastGetExMetaData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CastGetExMetaData(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaData * SOAP_FMAC4 soap_get__ns1__CastGetExMetaData(struct soap *soap, _ns1__CastGetExMetaData *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CastGetExMetaData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CastGetExMetaData * SOAP_FMAC2 soap_instantiate__ns1__CastGetExMetaData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CastGetExMetaData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CastGetExMetaData, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CastGetExMetaData);
		if (size)
			*size = sizeof(_ns1__CastGetExMetaData);
		((_ns1__CastGetExMetaData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CastGetExMetaData, n);
		if (size)
			*size = n * sizeof(_ns1__CastGetExMetaData);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CastGetExMetaData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CastGetExMetaData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CastGetExMetaData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CastGetExMetaData %p -> %p\n", q, p));
	*(_ns1__CastGetExMetaData*)p = *(_ns1__CastGetExMetaData*)q;
}

void _ns1__CastRemoveExMetaDataResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CastRemoveExMetaDataResponse::CastRemoveExMetaDataResult = NULL;
	/* transient soap skipped */
}

void _ns1__CastRemoveExMetaDataResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__CastRemoveExMetaDataResponse::CastRemoveExMetaDataResult);
	/* transient soap skipped */
#endif
}

int _ns1__CastRemoveExMetaDataResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CastRemoveExMetaDataResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CastRemoveExMetaDataResponse(struct soap *soap, const char *tag, int id, const _ns1__CastRemoveExMetaDataResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CastRemoveExMetaDataResponse), type))
		return soap->error;
	if (a->CastRemoveExMetaDataResult)
		soap_element_result(soap, "ns1:CastRemoveExMetaDataResult");
	if (soap_out_PointerTostd__string(soap, "ns1:CastRemoveExMetaDataResult", -1, &(a->_ns1__CastRemoveExMetaDataResponse::CastRemoveExMetaDataResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CastRemoveExMetaDataResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CastRemoveExMetaDataResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CastRemoveExMetaDataResponse * SOAP_FMAC4 soap_in__ns1__CastRemoveExMetaDataResponse(struct soap *soap, const char *tag, _ns1__CastRemoveExMetaDataResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CastRemoveExMetaDataResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CastRemoveExMetaDataResponse, sizeof(_ns1__CastRemoveExMetaDataResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CastRemoveExMetaDataResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CastRemoveExMetaDataResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CastRemoveExMetaDataResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CastRemoveExMetaDataResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:CastRemoveExMetaDataResult", &(a->_ns1__CastRemoveExMetaDataResponse::CastRemoveExMetaDataResult), "xsd:string"))
				{	soap_flag_CastRemoveExMetaDataResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:CastRemoveExMetaDataResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CastRemoveExMetaDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CastRemoveExMetaDataResponse, 0, sizeof(_ns1__CastRemoveExMetaDataResponse), 0, soap_copy__ns1__CastRemoveExMetaDataResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__CastRemoveExMetaDataResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__CastRemoveExMetaDataResponse);
	if (this->soap_out(soap, tag?tag:"ns1:CastRemoveExMetaDataResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CastRemoveExMetaDataResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CastRemoveExMetaDataResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CastRemoveExMetaDataResponse * SOAP_FMAC4 soap_get__ns1__CastRemoveExMetaDataResponse(struct soap *soap, _ns1__CastRemoveExMetaDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CastRemoveExMetaDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CastRemoveExMetaDataResponse * SOAP_FMAC2 soap_instantiate__ns1__CastRemoveExMetaDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CastRemoveExMetaDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CastRemoveExMetaDataResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CastRemoveExMetaDataResponse);
		if (size)
			*size = sizeof(_ns1__CastRemoveExMetaDataResponse);
		((_ns1__CastRemoveExMetaDataResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CastRemoveExMetaDataResponse, n);
		if (size)
			*size = n * sizeof(_ns1__CastRemoveExMetaDataResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CastRemoveExMetaDataResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CastRemoveExMetaDataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CastRemoveExMetaDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CastRemoveExMetaDataResponse %p -> %p\n", q, p));
	*(_ns1__CastRemoveExMetaDataResponse*)p = *(_ns1__CastRemoveExMetaDataResponse*)q;
}

void _ns1__CastRemoveExMetaData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CastRemoveExMetaData::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__CastRemoveExMetaData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, &this->_ns1__CastRemoveExMetaData::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__CastRemoveExMetaData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CastRemoveExMetaData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CastRemoveExMetaData(struct soap *soap, const char *tag, int id, const _ns1__CastRemoveExMetaData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CastRemoveExMetaData), type))
		return soap->error;
	if (a->_ns1__CastRemoveExMetaData::stQuery)
	{	if (soap_out_PointerTons1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__CastRemoveExMetaData::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CastRemoveExMetaData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CastRemoveExMetaData(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CastRemoveExMetaData * SOAP_FMAC4 soap_in__ns1__CastRemoveExMetaData(struct soap *soap, const char *tag, _ns1__CastRemoveExMetaData *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CastRemoveExMetaData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CastRemoveExMetaData, sizeof(_ns1__CastRemoveExMetaData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CastRemoveExMetaData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CastRemoveExMetaData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__CastRemoveExMetaData::stQuery), "ns1:ST_CAST_REMOVE_EX_METADATA_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CastRemoveExMetaData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CastRemoveExMetaData, 0, sizeof(_ns1__CastRemoveExMetaData), 0, soap_copy__ns1__CastRemoveExMetaData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__CastRemoveExMetaData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__CastRemoveExMetaData);
	if (this->soap_out(soap, tag?tag:"ns1:CastRemoveExMetaData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CastRemoveExMetaData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CastRemoveExMetaData(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CastRemoveExMetaData * SOAP_FMAC4 soap_get__ns1__CastRemoveExMetaData(struct soap *soap, _ns1__CastRemoveExMetaData *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CastRemoveExMetaData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CastRemoveExMetaData * SOAP_FMAC2 soap_instantiate__ns1__CastRemoveExMetaData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CastRemoveExMetaData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CastRemoveExMetaData, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CastRemoveExMetaData);
		if (size)
			*size = sizeof(_ns1__CastRemoveExMetaData);
		((_ns1__CastRemoveExMetaData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CastRemoveExMetaData, n);
		if (size)
			*size = n * sizeof(_ns1__CastRemoveExMetaData);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CastRemoveExMetaData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CastRemoveExMetaData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CastRemoveExMetaData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CastRemoveExMetaData %p -> %p\n", q, p));
	*(_ns1__CastRemoveExMetaData*)p = *(_ns1__CastRemoveExMetaData*)q;
}

void _ns1__CastUploadExMetaData3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CastUploadExMetaData3Response::CastUploadExMetaData3Result = NULL;
	/* transient soap skipped */
}

void _ns1__CastUploadExMetaData3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__CastUploadExMetaData3Response::CastUploadExMetaData3Result);
	/* transient soap skipped */
#endif
}

int _ns1__CastUploadExMetaData3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CastUploadExMetaData3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CastUploadExMetaData3Response(struct soap *soap, const char *tag, int id, const _ns1__CastUploadExMetaData3Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CastUploadExMetaData3Response), type))
		return soap->error;
	if (a->CastUploadExMetaData3Result)
		soap_element_result(soap, "ns1:CastUploadExMetaData3Result");
	if (soap_out_PointerTostd__string(soap, "ns1:CastUploadExMetaData3Result", -1, &(a->_ns1__CastUploadExMetaData3Response::CastUploadExMetaData3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CastUploadExMetaData3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CastUploadExMetaData3Response(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CastUploadExMetaData3Response * SOAP_FMAC4 soap_in__ns1__CastUploadExMetaData3Response(struct soap *soap, const char *tag, _ns1__CastUploadExMetaData3Response *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CastUploadExMetaData3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CastUploadExMetaData3Response, sizeof(_ns1__CastUploadExMetaData3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CastUploadExMetaData3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CastUploadExMetaData3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CastUploadExMetaData3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CastUploadExMetaData3Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:CastUploadExMetaData3Result", &(a->_ns1__CastUploadExMetaData3Response::CastUploadExMetaData3Result), "xsd:string"))
				{	soap_flag_CastUploadExMetaData3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:CastUploadExMetaData3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CastUploadExMetaData3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CastUploadExMetaData3Response, 0, sizeof(_ns1__CastUploadExMetaData3Response), 0, soap_copy__ns1__CastUploadExMetaData3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__CastUploadExMetaData3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__CastUploadExMetaData3Response);
	if (this->soap_out(soap, tag?tag:"ns1:CastUploadExMetaData3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CastUploadExMetaData3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CastUploadExMetaData3Response(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CastUploadExMetaData3Response * SOAP_FMAC4 soap_get__ns1__CastUploadExMetaData3Response(struct soap *soap, _ns1__CastUploadExMetaData3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CastUploadExMetaData3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CastUploadExMetaData3Response * SOAP_FMAC2 soap_instantiate__ns1__CastUploadExMetaData3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CastUploadExMetaData3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CastUploadExMetaData3Response, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CastUploadExMetaData3Response);
		if (size)
			*size = sizeof(_ns1__CastUploadExMetaData3Response);
		((_ns1__CastUploadExMetaData3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CastUploadExMetaData3Response, n);
		if (size)
			*size = n * sizeof(_ns1__CastUploadExMetaData3Response);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CastUploadExMetaData3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CastUploadExMetaData3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CastUploadExMetaData3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CastUploadExMetaData3Response %p -> %p\n", q, p));
	*(_ns1__CastUploadExMetaData3Response*)p = *(_ns1__CastUploadExMetaData3Response*)q;
}

void _ns1__CastUploadExMetaData3::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CastUploadExMetaData3::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__CastUploadExMetaData3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(soap, &this->_ns1__CastUploadExMetaData3::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__CastUploadExMetaData3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CastUploadExMetaData3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CastUploadExMetaData3(struct soap *soap, const char *tag, int id, const _ns1__CastUploadExMetaData3 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CastUploadExMetaData3), type))
		return soap->error;
	if (a->_ns1__CastUploadExMetaData3::stQuery)
	{	if (soap_out_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__CastUploadExMetaData3::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CastUploadExMetaData3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CastUploadExMetaData3(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CastUploadExMetaData3 * SOAP_FMAC4 soap_in__ns1__CastUploadExMetaData3(struct soap *soap, const char *tag, _ns1__CastUploadExMetaData3 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CastUploadExMetaData3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CastUploadExMetaData3, sizeof(_ns1__CastUploadExMetaData3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CastUploadExMetaData3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CastUploadExMetaData3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__CastUploadExMetaData3::stQuery), "ns1:ST_CAST_UPLOAD_EX_METADATA3_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CastUploadExMetaData3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CastUploadExMetaData3, 0, sizeof(_ns1__CastUploadExMetaData3), 0, soap_copy__ns1__CastUploadExMetaData3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__CastUploadExMetaData3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__CastUploadExMetaData3);
	if (this->soap_out(soap, tag?tag:"ns1:CastUploadExMetaData3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CastUploadExMetaData3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CastUploadExMetaData3(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CastUploadExMetaData3 * SOAP_FMAC4 soap_get__ns1__CastUploadExMetaData3(struct soap *soap, _ns1__CastUploadExMetaData3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CastUploadExMetaData3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CastUploadExMetaData3 * SOAP_FMAC2 soap_instantiate__ns1__CastUploadExMetaData3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CastUploadExMetaData3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CastUploadExMetaData3, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CastUploadExMetaData3);
		if (size)
			*size = sizeof(_ns1__CastUploadExMetaData3);
		((_ns1__CastUploadExMetaData3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CastUploadExMetaData3, n);
		if (size)
			*size = n * sizeof(_ns1__CastUploadExMetaData3);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CastUploadExMetaData3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CastUploadExMetaData3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CastUploadExMetaData3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CastUploadExMetaData3 %p -> %p\n", q, p));
	*(_ns1__CastUploadExMetaData3*)p = *(_ns1__CastUploadExMetaData3*)q;
}

void _ns1__CastUploadExMetaData2Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CastUploadExMetaData2Response::CastUploadExMetaData2Result = NULL;
	/* transient soap skipped */
}

void _ns1__CastUploadExMetaData2Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__CastUploadExMetaData2Response::CastUploadExMetaData2Result);
	/* transient soap skipped */
#endif
}

int _ns1__CastUploadExMetaData2Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CastUploadExMetaData2Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CastUploadExMetaData2Response(struct soap *soap, const char *tag, int id, const _ns1__CastUploadExMetaData2Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CastUploadExMetaData2Response), type))
		return soap->error;
	if (a->CastUploadExMetaData2Result)
		soap_element_result(soap, "ns1:CastUploadExMetaData2Result");
	if (soap_out_PointerTostd__string(soap, "ns1:CastUploadExMetaData2Result", -1, &(a->_ns1__CastUploadExMetaData2Response::CastUploadExMetaData2Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CastUploadExMetaData2Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CastUploadExMetaData2Response(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CastUploadExMetaData2Response * SOAP_FMAC4 soap_in__ns1__CastUploadExMetaData2Response(struct soap *soap, const char *tag, _ns1__CastUploadExMetaData2Response *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CastUploadExMetaData2Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CastUploadExMetaData2Response, sizeof(_ns1__CastUploadExMetaData2Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CastUploadExMetaData2Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CastUploadExMetaData2Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CastUploadExMetaData2Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CastUploadExMetaData2Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:CastUploadExMetaData2Result", &(a->_ns1__CastUploadExMetaData2Response::CastUploadExMetaData2Result), "xsd:string"))
				{	soap_flag_CastUploadExMetaData2Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:CastUploadExMetaData2Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CastUploadExMetaData2Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CastUploadExMetaData2Response, 0, sizeof(_ns1__CastUploadExMetaData2Response), 0, soap_copy__ns1__CastUploadExMetaData2Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__CastUploadExMetaData2Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__CastUploadExMetaData2Response);
	if (this->soap_out(soap, tag?tag:"ns1:CastUploadExMetaData2Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CastUploadExMetaData2Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CastUploadExMetaData2Response(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CastUploadExMetaData2Response * SOAP_FMAC4 soap_get__ns1__CastUploadExMetaData2Response(struct soap *soap, _ns1__CastUploadExMetaData2Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CastUploadExMetaData2Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CastUploadExMetaData2Response * SOAP_FMAC2 soap_instantiate__ns1__CastUploadExMetaData2Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CastUploadExMetaData2Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CastUploadExMetaData2Response, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CastUploadExMetaData2Response);
		if (size)
			*size = sizeof(_ns1__CastUploadExMetaData2Response);
		((_ns1__CastUploadExMetaData2Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CastUploadExMetaData2Response, n);
		if (size)
			*size = n * sizeof(_ns1__CastUploadExMetaData2Response);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CastUploadExMetaData2Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CastUploadExMetaData2Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CastUploadExMetaData2Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CastUploadExMetaData2Response %p -> %p\n", q, p));
	*(_ns1__CastUploadExMetaData2Response*)p = *(_ns1__CastUploadExMetaData2Response*)q;
}

void _ns1__CastUploadExMetaData2::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CastUploadExMetaData2::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__CastUploadExMetaData2::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(soap, &this->_ns1__CastUploadExMetaData2::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__CastUploadExMetaData2::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CastUploadExMetaData2(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CastUploadExMetaData2(struct soap *soap, const char *tag, int id, const _ns1__CastUploadExMetaData2 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CastUploadExMetaData2), type))
		return soap->error;
	if (a->_ns1__CastUploadExMetaData2::stQuery)
	{	if (soap_out_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__CastUploadExMetaData2::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CastUploadExMetaData2::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CastUploadExMetaData2(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CastUploadExMetaData2 * SOAP_FMAC4 soap_in__ns1__CastUploadExMetaData2(struct soap *soap, const char *tag, _ns1__CastUploadExMetaData2 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CastUploadExMetaData2 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CastUploadExMetaData2, sizeof(_ns1__CastUploadExMetaData2), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CastUploadExMetaData2)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CastUploadExMetaData2 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__CastUploadExMetaData2::stQuery), "ns1:ST_CAST_UPLOAD_EX_METADATA2_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CastUploadExMetaData2 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CastUploadExMetaData2, 0, sizeof(_ns1__CastUploadExMetaData2), 0, soap_copy__ns1__CastUploadExMetaData2);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__CastUploadExMetaData2::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__CastUploadExMetaData2);
	if (this->soap_out(soap, tag?tag:"ns1:CastUploadExMetaData2", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CastUploadExMetaData2::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CastUploadExMetaData2(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CastUploadExMetaData2 * SOAP_FMAC4 soap_get__ns1__CastUploadExMetaData2(struct soap *soap, _ns1__CastUploadExMetaData2 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CastUploadExMetaData2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CastUploadExMetaData2 * SOAP_FMAC2 soap_instantiate__ns1__CastUploadExMetaData2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CastUploadExMetaData2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CastUploadExMetaData2, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CastUploadExMetaData2);
		if (size)
			*size = sizeof(_ns1__CastUploadExMetaData2);
		((_ns1__CastUploadExMetaData2*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CastUploadExMetaData2, n);
		if (size)
			*size = n * sizeof(_ns1__CastUploadExMetaData2);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CastUploadExMetaData2*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CastUploadExMetaData2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CastUploadExMetaData2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CastUploadExMetaData2 %p -> %p\n", q, p));
	*(_ns1__CastUploadExMetaData2*)p = *(_ns1__CastUploadExMetaData2*)q;
}

void _ns1__CastUploadExMetaDataResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CastUploadExMetaDataResponse::CastUploadExMetaDataResult = NULL;
	/* transient soap skipped */
}

void _ns1__CastUploadExMetaDataResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__CastUploadExMetaDataResponse::CastUploadExMetaDataResult);
	/* transient soap skipped */
#endif
}

int _ns1__CastUploadExMetaDataResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CastUploadExMetaDataResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CastUploadExMetaDataResponse(struct soap *soap, const char *tag, int id, const _ns1__CastUploadExMetaDataResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CastUploadExMetaDataResponse), type))
		return soap->error;
	if (a->CastUploadExMetaDataResult)
		soap_element_result(soap, "ns1:CastUploadExMetaDataResult");
	if (soap_out_PointerTostd__string(soap, "ns1:CastUploadExMetaDataResult", -1, &(a->_ns1__CastUploadExMetaDataResponse::CastUploadExMetaDataResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CastUploadExMetaDataResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CastUploadExMetaDataResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CastUploadExMetaDataResponse * SOAP_FMAC4 soap_in__ns1__CastUploadExMetaDataResponse(struct soap *soap, const char *tag, _ns1__CastUploadExMetaDataResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CastUploadExMetaDataResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CastUploadExMetaDataResponse, sizeof(_ns1__CastUploadExMetaDataResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CastUploadExMetaDataResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CastUploadExMetaDataResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CastUploadExMetaDataResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CastUploadExMetaDataResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:CastUploadExMetaDataResult", &(a->_ns1__CastUploadExMetaDataResponse::CastUploadExMetaDataResult), "xsd:string"))
				{	soap_flag_CastUploadExMetaDataResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:CastUploadExMetaDataResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CastUploadExMetaDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CastUploadExMetaDataResponse, 0, sizeof(_ns1__CastUploadExMetaDataResponse), 0, soap_copy__ns1__CastUploadExMetaDataResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__CastUploadExMetaDataResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__CastUploadExMetaDataResponse);
	if (this->soap_out(soap, tag?tag:"ns1:CastUploadExMetaDataResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CastUploadExMetaDataResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CastUploadExMetaDataResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CastUploadExMetaDataResponse * SOAP_FMAC4 soap_get__ns1__CastUploadExMetaDataResponse(struct soap *soap, _ns1__CastUploadExMetaDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CastUploadExMetaDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CastUploadExMetaDataResponse * SOAP_FMAC2 soap_instantiate__ns1__CastUploadExMetaDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CastUploadExMetaDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CastUploadExMetaDataResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CastUploadExMetaDataResponse);
		if (size)
			*size = sizeof(_ns1__CastUploadExMetaDataResponse);
		((_ns1__CastUploadExMetaDataResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CastUploadExMetaDataResponse, n);
		if (size)
			*size = n * sizeof(_ns1__CastUploadExMetaDataResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CastUploadExMetaDataResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CastUploadExMetaDataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CastUploadExMetaDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CastUploadExMetaDataResponse %p -> %p\n", q, p));
	*(_ns1__CastUploadExMetaDataResponse*)p = *(_ns1__CastUploadExMetaDataResponse*)q;
}

void _ns1__CastUploadExMetaData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CastUploadExMetaData::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__CastUploadExMetaData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, &this->_ns1__CastUploadExMetaData::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__CastUploadExMetaData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CastUploadExMetaData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CastUploadExMetaData(struct soap *soap, const char *tag, int id, const _ns1__CastUploadExMetaData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CastUploadExMetaData), type))
		return soap->error;
	if (a->_ns1__CastUploadExMetaData::stQuery)
	{	if (soap_out_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__CastUploadExMetaData::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CastUploadExMetaData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CastUploadExMetaData(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CastUploadExMetaData * SOAP_FMAC4 soap_in__ns1__CastUploadExMetaData(struct soap *soap, const char *tag, _ns1__CastUploadExMetaData *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CastUploadExMetaData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CastUploadExMetaData, sizeof(_ns1__CastUploadExMetaData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CastUploadExMetaData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CastUploadExMetaData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__CastUploadExMetaData::stQuery), "ns1:ST_CAST_UPLOAD_EX_METADATA_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CastUploadExMetaData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CastUploadExMetaData, 0, sizeof(_ns1__CastUploadExMetaData), 0, soap_copy__ns1__CastUploadExMetaData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__CastUploadExMetaData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__CastUploadExMetaData);
	if (this->soap_out(soap, tag?tag:"ns1:CastUploadExMetaData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CastUploadExMetaData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CastUploadExMetaData(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CastUploadExMetaData * SOAP_FMAC4 soap_get__ns1__CastUploadExMetaData(struct soap *soap, _ns1__CastUploadExMetaData *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CastUploadExMetaData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CastUploadExMetaData * SOAP_FMAC2 soap_instantiate__ns1__CastUploadExMetaData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CastUploadExMetaData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CastUploadExMetaData, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CastUploadExMetaData);
		if (size)
			*size = sizeof(_ns1__CastUploadExMetaData);
		((_ns1__CastUploadExMetaData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CastUploadExMetaData, n);
		if (size)
			*size = n * sizeof(_ns1__CastUploadExMetaData);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CastUploadExMetaData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CastUploadExMetaData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CastUploadExMetaData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CastUploadExMetaData %p -> %p\n", q, p));
	*(_ns1__CastUploadExMetaData*)p = *(_ns1__CastUploadExMetaData*)q;
}

void _ns1__AdminGetAlbaStatisticResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminGetAlbaStatisticResponse::AdminGetAlbaStatisticResult = NULL;
	/* transient soap skipped */
}

void _ns1__AdminGetAlbaStatisticResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, &this->_ns1__AdminGetAlbaStatisticResponse::AdminGetAlbaStatisticResult);
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetAlbaStatisticResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetAlbaStatisticResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetAlbaStatisticResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminGetAlbaStatisticResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetAlbaStatisticResponse), type))
		return soap->error;
	if (a->AdminGetAlbaStatisticResult)
		soap_element_result(soap, "ns1:AdminGetAlbaStatisticResult");
	if (soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, "ns1:AdminGetAlbaStatisticResult", -1, &(a->_ns1__AdminGetAlbaStatisticResponse::AdminGetAlbaStatisticResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetAlbaStatisticResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetAlbaStatisticResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetAlbaStatisticResponse * SOAP_FMAC4 soap_in__ns1__AdminGetAlbaStatisticResponse(struct soap *soap, const char *tag, _ns1__AdminGetAlbaStatisticResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetAlbaStatisticResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetAlbaStatisticResponse, sizeof(_ns1__AdminGetAlbaStatisticResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetAlbaStatisticResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetAlbaStatisticResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminGetAlbaStatisticResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminGetAlbaStatisticResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, "ns1:AdminGetAlbaStatisticResult", &(a->_ns1__AdminGetAlbaStatisticResponse::AdminGetAlbaStatisticResult), "ns1:ArrayOfST_GET_ALBA_STATISTIC_RETURN"))
				{	soap_flag_AdminGetAlbaStatisticResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminGetAlbaStatisticResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetAlbaStatisticResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetAlbaStatisticResponse, 0, sizeof(_ns1__AdminGetAlbaStatisticResponse), 0, soap_copy__ns1__AdminGetAlbaStatisticResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AdminGetAlbaStatisticResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetAlbaStatisticResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetAlbaStatisticResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetAlbaStatisticResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetAlbaStatisticResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetAlbaStatisticResponse * SOAP_FMAC4 soap_get__ns1__AdminGetAlbaStatisticResponse(struct soap *soap, _ns1__AdminGetAlbaStatisticResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetAlbaStatisticResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetAlbaStatisticResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminGetAlbaStatisticResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetAlbaStatisticResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetAlbaStatisticResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetAlbaStatisticResponse);
		if (size)
			*size = sizeof(_ns1__AdminGetAlbaStatisticResponse);
		((_ns1__AdminGetAlbaStatisticResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetAlbaStatisticResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetAlbaStatisticResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetAlbaStatisticResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetAlbaStatisticResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetAlbaStatisticResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetAlbaStatisticResponse %p -> %p\n", q, p));
	*(_ns1__AdminGetAlbaStatisticResponse*)p = *(_ns1__AdminGetAlbaStatisticResponse*)q;
}

void _ns1__AdminGetAlbaStatistic::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminGetAlbaStatistic::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__AdminGetAlbaStatistic::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(soap, &this->_ns1__AdminGetAlbaStatistic::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetAlbaStatistic::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetAlbaStatistic(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetAlbaStatistic(struct soap *soap, const char *tag, int id, const _ns1__AdminGetAlbaStatistic *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetAlbaStatistic), type))
		return soap->error;
	if (a->_ns1__AdminGetAlbaStatistic::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__AdminGetAlbaStatistic::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetAlbaStatistic::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetAlbaStatistic(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetAlbaStatistic * SOAP_FMAC4 soap_in__ns1__AdminGetAlbaStatistic(struct soap *soap, const char *tag, _ns1__AdminGetAlbaStatistic *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetAlbaStatistic *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetAlbaStatistic, sizeof(_ns1__AdminGetAlbaStatistic), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetAlbaStatistic)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetAlbaStatistic *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__AdminGetAlbaStatistic::stQuery), "ns1:ST_GET_ALBA_STATISTIC_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetAlbaStatistic *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetAlbaStatistic, 0, sizeof(_ns1__AdminGetAlbaStatistic), 0, soap_copy__ns1__AdminGetAlbaStatistic);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminGetAlbaStatistic::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetAlbaStatistic);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetAlbaStatistic", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetAlbaStatistic::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetAlbaStatistic(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetAlbaStatistic * SOAP_FMAC4 soap_get__ns1__AdminGetAlbaStatistic(struct soap *soap, _ns1__AdminGetAlbaStatistic *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetAlbaStatistic(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetAlbaStatistic * SOAP_FMAC2 soap_instantiate__ns1__AdminGetAlbaStatistic(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetAlbaStatistic(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetAlbaStatistic, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetAlbaStatistic);
		if (size)
			*size = sizeof(_ns1__AdminGetAlbaStatistic);
		((_ns1__AdminGetAlbaStatistic*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetAlbaStatistic, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetAlbaStatistic);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetAlbaStatistic*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetAlbaStatistic*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetAlbaStatistic(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetAlbaStatistic %p -> %p\n", q, p));
	*(_ns1__AdminGetAlbaStatistic*)p = *(_ns1__AdminGetAlbaStatistic*)q;
}

void _ns1__AdminGetCountReportResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminGetCountReportResponse::AdminGetCountReportResult = NULL;
	/* transient soap skipped */
}

void _ns1__AdminGetCountReportResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(soap, &this->_ns1__AdminGetCountReportResponse::AdminGetCountReportResult);
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetCountReportResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetCountReportResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetCountReportResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminGetCountReportResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetCountReportResponse), type))
		return soap->error;
	if (a->AdminGetCountReportResult)
		soap_element_result(soap, "ns1:AdminGetCountReportResult");
	if (a->_ns1__AdminGetCountReportResponse::AdminGetCountReportResult)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(soap, "ns1:AdminGetCountReportResult", -1, &a->_ns1__AdminGetCountReportResponse::AdminGetCountReportResult, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:AdminGetCountReportResult"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetCountReportResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetCountReportResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetCountReportResponse * SOAP_FMAC4 soap_in__ns1__AdminGetCountReportResponse(struct soap *soap, const char *tag, _ns1__AdminGetCountReportResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetCountReportResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetCountReportResponse, sizeof(_ns1__AdminGetCountReportResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetCountReportResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetCountReportResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminGetCountReportResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminGetCountReportResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(soap, "ns1:AdminGetCountReportResult", &(a->_ns1__AdminGetCountReportResponse::AdminGetCountReportResult), "ns1:ST_GET_COUNT_REPORT_RETURN"))
				{	soap_flag_AdminGetCountReportResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminGetCountReportResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetCountReportResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetCountReportResponse, 0, sizeof(_ns1__AdminGetCountReportResponse), 0, soap_copy__ns1__AdminGetCountReportResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AdminGetCountReportResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminGetCountReportResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetCountReportResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetCountReportResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetCountReportResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetCountReportResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetCountReportResponse * SOAP_FMAC4 soap_get__ns1__AdminGetCountReportResponse(struct soap *soap, _ns1__AdminGetCountReportResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetCountReportResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetCountReportResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminGetCountReportResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetCountReportResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetCountReportResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetCountReportResponse);
		if (size)
			*size = sizeof(_ns1__AdminGetCountReportResponse);
		((_ns1__AdminGetCountReportResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetCountReportResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetCountReportResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetCountReportResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetCountReportResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetCountReportResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetCountReportResponse %p -> %p\n", q, p));
	*(_ns1__AdminGetCountReportResponse*)p = *(_ns1__AdminGetCountReportResponse*)q;
}

void _ns1__AdminGetCountReport::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminGetCountReport::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__AdminGetCountReport::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(soap, &this->_ns1__AdminGetCountReport::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetCountReport::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetCountReport(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetCountReport(struct soap *soap, const char *tag, int id, const _ns1__AdminGetCountReport *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetCountReport), type))
		return soap->error;
	if (a->_ns1__AdminGetCountReport::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__AdminGetCountReport::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetCountReport::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetCountReport(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetCountReport * SOAP_FMAC4 soap_in__ns1__AdminGetCountReport(struct soap *soap, const char *tag, _ns1__AdminGetCountReport *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetCountReport *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetCountReport, sizeof(_ns1__AdminGetCountReport), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetCountReport)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetCountReport *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__AdminGetCountReport::stQuery), "ns1:ST_GET_COUNT_REPORT_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetCountReport *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetCountReport, 0, sizeof(_ns1__AdminGetCountReport), 0, soap_copy__ns1__AdminGetCountReport);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminGetCountReport::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetCountReport);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetCountReport", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetCountReport::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetCountReport(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetCountReport * SOAP_FMAC4 soap_get__ns1__AdminGetCountReport(struct soap *soap, _ns1__AdminGetCountReport *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetCountReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetCountReport * SOAP_FMAC2 soap_instantiate__ns1__AdminGetCountReport(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetCountReport(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetCountReport, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetCountReport);
		if (size)
			*size = sizeof(_ns1__AdminGetCountReport);
		((_ns1__AdminGetCountReport*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetCountReport, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetCountReport);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetCountReport*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetCountReport*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetCountReport(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetCountReport %p -> %p\n", q, p));
	*(_ns1__AdminGetCountReport*)p = *(_ns1__AdminGetCountReport*)q;
}

void _ns1__AdminGetCountModifyResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminGetCountModifyResponse::AdminGetCountModifyResult = NULL;
	/* transient soap skipped */
}

void _ns1__AdminGetCountModifyResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(soap, &this->_ns1__AdminGetCountModifyResponse::AdminGetCountModifyResult);
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetCountModifyResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetCountModifyResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetCountModifyResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminGetCountModifyResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetCountModifyResponse), type))
		return soap->error;
	if (a->AdminGetCountModifyResult)
		soap_element_result(soap, "ns1:AdminGetCountModifyResult");
	if (a->_ns1__AdminGetCountModifyResponse::AdminGetCountModifyResult)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(soap, "ns1:AdminGetCountModifyResult", -1, &a->_ns1__AdminGetCountModifyResponse::AdminGetCountModifyResult, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:AdminGetCountModifyResult"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetCountModifyResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetCountModifyResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetCountModifyResponse * SOAP_FMAC4 soap_in__ns1__AdminGetCountModifyResponse(struct soap *soap, const char *tag, _ns1__AdminGetCountModifyResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetCountModifyResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetCountModifyResponse, sizeof(_ns1__AdminGetCountModifyResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetCountModifyResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetCountModifyResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminGetCountModifyResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminGetCountModifyResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(soap, "ns1:AdminGetCountModifyResult", &(a->_ns1__AdminGetCountModifyResponse::AdminGetCountModifyResult), "ns1:ST_GET_COUNT_MODIFY_RETURN"))
				{	soap_flag_AdminGetCountModifyResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminGetCountModifyResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetCountModifyResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetCountModifyResponse, 0, sizeof(_ns1__AdminGetCountModifyResponse), 0, soap_copy__ns1__AdminGetCountModifyResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AdminGetCountModifyResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminGetCountModifyResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetCountModifyResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetCountModifyResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetCountModifyResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetCountModifyResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetCountModifyResponse * SOAP_FMAC4 soap_get__ns1__AdminGetCountModifyResponse(struct soap *soap, _ns1__AdminGetCountModifyResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetCountModifyResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetCountModifyResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminGetCountModifyResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetCountModifyResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetCountModifyResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetCountModifyResponse);
		if (size)
			*size = sizeof(_ns1__AdminGetCountModifyResponse);
		((_ns1__AdminGetCountModifyResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetCountModifyResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetCountModifyResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetCountModifyResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetCountModifyResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetCountModifyResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetCountModifyResponse %p -> %p\n", q, p));
	*(_ns1__AdminGetCountModifyResponse*)p = *(_ns1__AdminGetCountModifyResponse*)q;
}

void _ns1__AdminGetCountModify::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminGetCountModify::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__AdminGetCountModify::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(soap, &this->_ns1__AdminGetCountModify::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetCountModify::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetCountModify(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetCountModify(struct soap *soap, const char *tag, int id, const _ns1__AdminGetCountModify *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetCountModify), type))
		return soap->error;
	if (a->_ns1__AdminGetCountModify::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__AdminGetCountModify::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetCountModify::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetCountModify(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetCountModify * SOAP_FMAC4 soap_in__ns1__AdminGetCountModify(struct soap *soap, const char *tag, _ns1__AdminGetCountModify *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetCountModify *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetCountModify, sizeof(_ns1__AdminGetCountModify), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetCountModify)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetCountModify *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__AdminGetCountModify::stQuery), "ns1:ST_GET_COUNT_MODIFY_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetCountModify *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetCountModify, 0, sizeof(_ns1__AdminGetCountModify), 0, soap_copy__ns1__AdminGetCountModify);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminGetCountModify::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetCountModify);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetCountModify", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetCountModify::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetCountModify(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetCountModify * SOAP_FMAC4 soap_get__ns1__AdminGetCountModify(struct soap *soap, _ns1__AdminGetCountModify *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetCountModify(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetCountModify * SOAP_FMAC2 soap_instantiate__ns1__AdminGetCountModify(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetCountModify(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetCountModify, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetCountModify);
		if (size)
			*size = sizeof(_ns1__AdminGetCountModify);
		((_ns1__AdminGetCountModify*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetCountModify, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetCountModify);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetCountModify*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetCountModify*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetCountModify(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetCountModify %p -> %p\n", q, p));
	*(_ns1__AdminGetCountModify*)p = *(_ns1__AdminGetCountModify*)q;
}

void _ns1__AdminGetCountLyricResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminGetCountLyricResponse::AdminGetCountLyricResult = NULL;
	/* transient soap skipped */
}

void _ns1__AdminGetCountLyricResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(soap, &this->_ns1__AdminGetCountLyricResponse::AdminGetCountLyricResult);
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetCountLyricResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetCountLyricResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetCountLyricResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminGetCountLyricResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetCountLyricResponse), type))
		return soap->error;
	if (a->AdminGetCountLyricResult)
		soap_element_result(soap, "ns1:AdminGetCountLyricResult");
	if (a->_ns1__AdminGetCountLyricResponse::AdminGetCountLyricResult)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(soap, "ns1:AdminGetCountLyricResult", -1, &a->_ns1__AdminGetCountLyricResponse::AdminGetCountLyricResult, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:AdminGetCountLyricResult"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetCountLyricResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetCountLyricResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetCountLyricResponse * SOAP_FMAC4 soap_in__ns1__AdminGetCountLyricResponse(struct soap *soap, const char *tag, _ns1__AdminGetCountLyricResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetCountLyricResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetCountLyricResponse, sizeof(_ns1__AdminGetCountLyricResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetCountLyricResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetCountLyricResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminGetCountLyricResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminGetCountLyricResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(soap, "ns1:AdminGetCountLyricResult", &(a->_ns1__AdminGetCountLyricResponse::AdminGetCountLyricResult), "ns1:ST_GET_COUNT_LYRIC_RETURN"))
				{	soap_flag_AdminGetCountLyricResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminGetCountLyricResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetCountLyricResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetCountLyricResponse, 0, sizeof(_ns1__AdminGetCountLyricResponse), 0, soap_copy__ns1__AdminGetCountLyricResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AdminGetCountLyricResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminGetCountLyricResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetCountLyricResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetCountLyricResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetCountLyricResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetCountLyricResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetCountLyricResponse * SOAP_FMAC4 soap_get__ns1__AdminGetCountLyricResponse(struct soap *soap, _ns1__AdminGetCountLyricResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetCountLyricResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetCountLyricResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminGetCountLyricResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetCountLyricResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetCountLyricResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetCountLyricResponse);
		if (size)
			*size = sizeof(_ns1__AdminGetCountLyricResponse);
		((_ns1__AdminGetCountLyricResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetCountLyricResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetCountLyricResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetCountLyricResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetCountLyricResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetCountLyricResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetCountLyricResponse %p -> %p\n", q, p));
	*(_ns1__AdminGetCountLyricResponse*)p = *(_ns1__AdminGetCountLyricResponse*)q;
}

void _ns1__AdminGetCountLyric::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__AdminGetCountLyric::nIgnore);
	/* transient soap skipped */
}

void _ns1__AdminGetCountLyric::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetCountLyric::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetCountLyric(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetCountLyric(struct soap *soap, const char *tag, int id, const _ns1__AdminGetCountLyric *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetCountLyric), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:nIgnore", -1, &(a->_ns1__AdminGetCountLyric::nIgnore), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetCountLyric::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetCountLyric(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetCountLyric * SOAP_FMAC4 soap_in__ns1__AdminGetCountLyric(struct soap *soap, const char *tag, _ns1__AdminGetCountLyric *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetCountLyric *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetCountLyric, sizeof(_ns1__AdminGetCountLyric), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetCountLyric)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetCountLyric *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nIgnore1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nIgnore1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nIgnore", &(a->_ns1__AdminGetCountLyric::nIgnore), "xsd:int"))
				{	soap_flag_nIgnore1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetCountLyric *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetCountLyric, 0, sizeof(_ns1__AdminGetCountLyric), 0, soap_copy__ns1__AdminGetCountLyric);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nIgnore1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminGetCountLyric::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetCountLyric);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetCountLyric", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetCountLyric::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetCountLyric(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetCountLyric * SOAP_FMAC4 soap_get__ns1__AdminGetCountLyric(struct soap *soap, _ns1__AdminGetCountLyric *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetCountLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetCountLyric * SOAP_FMAC2 soap_instantiate__ns1__AdminGetCountLyric(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetCountLyric(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetCountLyric, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetCountLyric);
		if (size)
			*size = sizeof(_ns1__AdminGetCountLyric);
		((_ns1__AdminGetCountLyric*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetCountLyric, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetCountLyric);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetCountLyric*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetCountLyric*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetCountLyric(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetCountLyric %p -> %p\n", q, p));
	*(_ns1__AdminGetCountLyric*)p = *(_ns1__AdminGetCountLyric*)q;
}

void _ns1__AdminGetCountChecksumResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminGetCountChecksumResponse::AdminGetCountChecksumResult = NULL;
	/* transient soap skipped */
}

void _ns1__AdminGetCountChecksumResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(soap, &this->_ns1__AdminGetCountChecksumResponse::AdminGetCountChecksumResult);
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetCountChecksumResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetCountChecksumResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetCountChecksumResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminGetCountChecksumResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetCountChecksumResponse), type))
		return soap->error;
	if (a->AdminGetCountChecksumResult)
		soap_element_result(soap, "ns1:AdminGetCountChecksumResult");
	if (a->_ns1__AdminGetCountChecksumResponse::AdminGetCountChecksumResult)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(soap, "ns1:AdminGetCountChecksumResult", -1, &a->_ns1__AdminGetCountChecksumResponse::AdminGetCountChecksumResult, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:AdminGetCountChecksumResult"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetCountChecksumResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetCountChecksumResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetCountChecksumResponse * SOAP_FMAC4 soap_in__ns1__AdminGetCountChecksumResponse(struct soap *soap, const char *tag, _ns1__AdminGetCountChecksumResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetCountChecksumResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetCountChecksumResponse, sizeof(_ns1__AdminGetCountChecksumResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetCountChecksumResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetCountChecksumResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminGetCountChecksumResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminGetCountChecksumResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(soap, "ns1:AdminGetCountChecksumResult", &(a->_ns1__AdminGetCountChecksumResponse::AdminGetCountChecksumResult), "ns1:ST_GET_COUNT_CHECKSUM_RETURN"))
				{	soap_flag_AdminGetCountChecksumResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminGetCountChecksumResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetCountChecksumResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetCountChecksumResponse, 0, sizeof(_ns1__AdminGetCountChecksumResponse), 0, soap_copy__ns1__AdminGetCountChecksumResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AdminGetCountChecksumResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminGetCountChecksumResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetCountChecksumResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetCountChecksumResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetCountChecksumResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetCountChecksumResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetCountChecksumResponse * SOAP_FMAC4 soap_get__ns1__AdminGetCountChecksumResponse(struct soap *soap, _ns1__AdminGetCountChecksumResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetCountChecksumResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetCountChecksumResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminGetCountChecksumResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetCountChecksumResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetCountChecksumResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetCountChecksumResponse);
		if (size)
			*size = sizeof(_ns1__AdminGetCountChecksumResponse);
		((_ns1__AdminGetCountChecksumResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetCountChecksumResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetCountChecksumResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetCountChecksumResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetCountChecksumResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetCountChecksumResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetCountChecksumResponse %p -> %p\n", q, p));
	*(_ns1__AdminGetCountChecksumResponse*)p = *(_ns1__AdminGetCountChecksumResponse*)q;
}

void _ns1__AdminGetCountChecksum::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__AdminGetCountChecksum::nIgnore);
	/* transient soap skipped */
}

void _ns1__AdminGetCountChecksum::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetCountChecksum::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetCountChecksum(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetCountChecksum(struct soap *soap, const char *tag, int id, const _ns1__AdminGetCountChecksum *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetCountChecksum), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:nIgnore", -1, &(a->_ns1__AdminGetCountChecksum::nIgnore), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetCountChecksum::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetCountChecksum(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetCountChecksum * SOAP_FMAC4 soap_in__ns1__AdminGetCountChecksum(struct soap *soap, const char *tag, _ns1__AdminGetCountChecksum *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetCountChecksum *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetCountChecksum, sizeof(_ns1__AdminGetCountChecksum), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetCountChecksum)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetCountChecksum *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nIgnore1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nIgnore1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nIgnore", &(a->_ns1__AdminGetCountChecksum::nIgnore), "xsd:int"))
				{	soap_flag_nIgnore1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetCountChecksum *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetCountChecksum, 0, sizeof(_ns1__AdminGetCountChecksum), 0, soap_copy__ns1__AdminGetCountChecksum);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nIgnore1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminGetCountChecksum::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetCountChecksum);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetCountChecksum", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetCountChecksum::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetCountChecksum(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetCountChecksum * SOAP_FMAC4 soap_get__ns1__AdminGetCountChecksum(struct soap *soap, _ns1__AdminGetCountChecksum *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetCountChecksum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetCountChecksum * SOAP_FMAC2 soap_instantiate__ns1__AdminGetCountChecksum(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetCountChecksum(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetCountChecksum, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetCountChecksum);
		if (size)
			*size = sizeof(_ns1__AdminGetCountChecksum);
		((_ns1__AdminGetCountChecksum*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetCountChecksum, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetCountChecksum);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetCountChecksum*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetCountChecksum*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetCountChecksum(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetCountChecksum %p -> %p\n", q, p));
	*(_ns1__AdminGetCountChecksum*)p = *(_ns1__AdminGetCountChecksum*)q;
}

void _ns1__AdminGetCountInRegisterResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminGetCountInRegisterResponse::AdminGetCountInRegisterResult = NULL;
	/* transient soap skipped */
}

void _ns1__AdminGetCountInRegisterResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(soap, &this->_ns1__AdminGetCountInRegisterResponse::AdminGetCountInRegisterResult);
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetCountInRegisterResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetCountInRegisterResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetCountInRegisterResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminGetCountInRegisterResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetCountInRegisterResponse), type))
		return soap->error;
	if (a->AdminGetCountInRegisterResult)
		soap_element_result(soap, "ns1:AdminGetCountInRegisterResult");
	if (a->_ns1__AdminGetCountInRegisterResponse::AdminGetCountInRegisterResult)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(soap, "ns1:AdminGetCountInRegisterResult", -1, &a->_ns1__AdminGetCountInRegisterResponse::AdminGetCountInRegisterResult, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:AdminGetCountInRegisterResult"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetCountInRegisterResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetCountInRegisterResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetCountInRegisterResponse * SOAP_FMAC4 soap_in__ns1__AdminGetCountInRegisterResponse(struct soap *soap, const char *tag, _ns1__AdminGetCountInRegisterResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetCountInRegisterResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetCountInRegisterResponse, sizeof(_ns1__AdminGetCountInRegisterResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetCountInRegisterResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetCountInRegisterResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminGetCountInRegisterResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminGetCountInRegisterResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(soap, "ns1:AdminGetCountInRegisterResult", &(a->_ns1__AdminGetCountInRegisterResponse::AdminGetCountInRegisterResult), "ns1:ST_GET_COUNT_IN_REGISTER_RETURN"))
				{	soap_flag_AdminGetCountInRegisterResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminGetCountInRegisterResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetCountInRegisterResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetCountInRegisterResponse, 0, sizeof(_ns1__AdminGetCountInRegisterResponse), 0, soap_copy__ns1__AdminGetCountInRegisterResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AdminGetCountInRegisterResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminGetCountInRegisterResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetCountInRegisterResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetCountInRegisterResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetCountInRegisterResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetCountInRegisterResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetCountInRegisterResponse * SOAP_FMAC4 soap_get__ns1__AdminGetCountInRegisterResponse(struct soap *soap, _ns1__AdminGetCountInRegisterResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetCountInRegisterResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetCountInRegisterResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminGetCountInRegisterResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetCountInRegisterResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetCountInRegisterResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetCountInRegisterResponse);
		if (size)
			*size = sizeof(_ns1__AdminGetCountInRegisterResponse);
		((_ns1__AdminGetCountInRegisterResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetCountInRegisterResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetCountInRegisterResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetCountInRegisterResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetCountInRegisterResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetCountInRegisterResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetCountInRegisterResponse %p -> %p\n", q, p));
	*(_ns1__AdminGetCountInRegisterResponse*)p = *(_ns1__AdminGetCountInRegisterResponse*)q;
}

void _ns1__AdminGetCountInRegister::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminGetCountInRegister::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__AdminGetCountInRegister::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(soap, &this->_ns1__AdminGetCountInRegister::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetCountInRegister::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetCountInRegister(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetCountInRegister(struct soap *soap, const char *tag, int id, const _ns1__AdminGetCountInRegister *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetCountInRegister), type))
		return soap->error;
	if (a->_ns1__AdminGetCountInRegister::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__AdminGetCountInRegister::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetCountInRegister::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetCountInRegister(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetCountInRegister * SOAP_FMAC4 soap_in__ns1__AdminGetCountInRegister(struct soap *soap, const char *tag, _ns1__AdminGetCountInRegister *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetCountInRegister *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetCountInRegister, sizeof(_ns1__AdminGetCountInRegister), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetCountInRegister)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetCountInRegister *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__AdminGetCountInRegister::stQuery), "ns1:ST_GET_COUNT_IN_REGISTER_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetCountInRegister *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetCountInRegister, 0, sizeof(_ns1__AdminGetCountInRegister), 0, soap_copy__ns1__AdminGetCountInRegister);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminGetCountInRegister::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetCountInRegister);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetCountInRegister", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetCountInRegister::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetCountInRegister(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetCountInRegister * SOAP_FMAC4 soap_get__ns1__AdminGetCountInRegister(struct soap *soap, _ns1__AdminGetCountInRegister *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetCountInRegister(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetCountInRegister * SOAP_FMAC2 soap_instantiate__ns1__AdminGetCountInRegister(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetCountInRegister(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetCountInRegister, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetCountInRegister);
		if (size)
			*size = sizeof(_ns1__AdminGetCountInRegister);
		((_ns1__AdminGetCountInRegister*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetCountInRegister, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetCountInRegister);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetCountInRegister*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetCountInRegister*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetCountInRegister(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetCountInRegister %p -> %p\n", q, p));
	*(_ns1__AdminGetCountInRegister*)p = *(_ns1__AdminGetCountInRegister*)q;
}

void _ns1__AdminReportBlackListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminReportBlackListResponse::AdminReportBlackListResult = NULL;
	/* transient soap skipped */
}

void _ns1__AdminReportBlackListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__AdminReportBlackListResponse::AdminReportBlackListResult);
	/* transient soap skipped */
#endif
}

int _ns1__AdminReportBlackListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminReportBlackListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminReportBlackListResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminReportBlackListResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminReportBlackListResponse), type))
		return soap->error;
	if (a->AdminReportBlackListResult)
		soap_element_result(soap, "ns1:AdminReportBlackListResult");
	if (soap_out_PointerTostd__string(soap, "ns1:AdminReportBlackListResult", -1, &(a->_ns1__AdminReportBlackListResponse::AdminReportBlackListResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminReportBlackListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminReportBlackListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminReportBlackListResponse * SOAP_FMAC4 soap_in__ns1__AdminReportBlackListResponse(struct soap *soap, const char *tag, _ns1__AdminReportBlackListResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminReportBlackListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminReportBlackListResponse, sizeof(_ns1__AdminReportBlackListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminReportBlackListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminReportBlackListResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminReportBlackListResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminReportBlackListResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:AdminReportBlackListResult", &(a->_ns1__AdminReportBlackListResponse::AdminReportBlackListResult), "xsd:string"))
				{	soap_flag_AdminReportBlackListResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminReportBlackListResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminReportBlackListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminReportBlackListResponse, 0, sizeof(_ns1__AdminReportBlackListResponse), 0, soap_copy__ns1__AdminReportBlackListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AdminReportBlackListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminReportBlackListResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminReportBlackListResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminReportBlackListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminReportBlackListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminReportBlackListResponse * SOAP_FMAC4 soap_get__ns1__AdminReportBlackListResponse(struct soap *soap, _ns1__AdminReportBlackListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminReportBlackListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminReportBlackListResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminReportBlackListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminReportBlackListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminReportBlackListResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminReportBlackListResponse);
		if (size)
			*size = sizeof(_ns1__AdminReportBlackListResponse);
		((_ns1__AdminReportBlackListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminReportBlackListResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminReportBlackListResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminReportBlackListResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminReportBlackListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminReportBlackListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminReportBlackListResponse %p -> %p\n", q, p));
	*(_ns1__AdminReportBlackListResponse*)p = *(_ns1__AdminReportBlackListResponse*)q;
}

void _ns1__AdminReportBlackList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminReportBlackList::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__AdminReportBlackList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(soap, &this->_ns1__AdminReportBlackList::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__AdminReportBlackList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminReportBlackList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminReportBlackList(struct soap *soap, const char *tag, int id, const _ns1__AdminReportBlackList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminReportBlackList), type))
		return soap->error;
	if (a->_ns1__AdminReportBlackList::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__AdminReportBlackList::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminReportBlackList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminReportBlackList(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminReportBlackList * SOAP_FMAC4 soap_in__ns1__AdminReportBlackList(struct soap *soap, const char *tag, _ns1__AdminReportBlackList *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminReportBlackList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminReportBlackList, sizeof(_ns1__AdminReportBlackList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminReportBlackList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminReportBlackList *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__AdminReportBlackList::stQuery), "ns1:ST_REPORT_BLACKLIST_REPORT_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminReportBlackList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminReportBlackList, 0, sizeof(_ns1__AdminReportBlackList), 0, soap_copy__ns1__AdminReportBlackList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminReportBlackList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminReportBlackList);
	if (this->soap_out(soap, tag?tag:"ns1:AdminReportBlackList", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminReportBlackList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminReportBlackList(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminReportBlackList * SOAP_FMAC4 soap_get__ns1__AdminReportBlackList(struct soap *soap, _ns1__AdminReportBlackList *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminReportBlackList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminReportBlackList * SOAP_FMAC2 soap_instantiate__ns1__AdminReportBlackList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminReportBlackList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminReportBlackList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminReportBlackList);
		if (size)
			*size = sizeof(_ns1__AdminReportBlackList);
		((_ns1__AdminReportBlackList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminReportBlackList, n);
		if (size)
			*size = n * sizeof(_ns1__AdminReportBlackList);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminReportBlackList*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminReportBlackList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminReportBlackList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminReportBlackList %p -> %p\n", q, p));
	*(_ns1__AdminReportBlackList*)p = *(_ns1__AdminReportBlackList*)q;
}

void _ns1__AdminAdmitModifyLyricResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminAdmitModifyLyricResponse::AdminAdmitModifyLyricResult = NULL;
	/* transient soap skipped */
}

void _ns1__AdminAdmitModifyLyricResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__AdminAdmitModifyLyricResponse::AdminAdmitModifyLyricResult);
	/* transient soap skipped */
#endif
}

int _ns1__AdminAdmitModifyLyricResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminAdmitModifyLyricResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminAdmitModifyLyricResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminAdmitModifyLyricResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminAdmitModifyLyricResponse), type))
		return soap->error;
	if (a->AdminAdmitModifyLyricResult)
		soap_element_result(soap, "ns1:AdminAdmitModifyLyricResult");
	if (soap_out_PointerTostd__string(soap, "ns1:AdminAdmitModifyLyricResult", -1, &(a->_ns1__AdminAdmitModifyLyricResponse::AdminAdmitModifyLyricResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminAdmitModifyLyricResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminAdmitModifyLyricResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminAdmitModifyLyricResponse * SOAP_FMAC4 soap_in__ns1__AdminAdmitModifyLyricResponse(struct soap *soap, const char *tag, _ns1__AdminAdmitModifyLyricResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminAdmitModifyLyricResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminAdmitModifyLyricResponse, sizeof(_ns1__AdminAdmitModifyLyricResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminAdmitModifyLyricResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminAdmitModifyLyricResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminAdmitModifyLyricResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminAdmitModifyLyricResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:AdminAdmitModifyLyricResult", &(a->_ns1__AdminAdmitModifyLyricResponse::AdminAdmitModifyLyricResult), "xsd:string"))
				{	soap_flag_AdminAdmitModifyLyricResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminAdmitModifyLyricResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminAdmitModifyLyricResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminAdmitModifyLyricResponse, 0, sizeof(_ns1__AdminAdmitModifyLyricResponse), 0, soap_copy__ns1__AdminAdmitModifyLyricResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AdminAdmitModifyLyricResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminAdmitModifyLyricResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminAdmitModifyLyricResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminAdmitModifyLyricResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminAdmitModifyLyricResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminAdmitModifyLyricResponse * SOAP_FMAC4 soap_get__ns1__AdminAdmitModifyLyricResponse(struct soap *soap, _ns1__AdminAdmitModifyLyricResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminAdmitModifyLyricResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminAdmitModifyLyricResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminAdmitModifyLyricResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminAdmitModifyLyricResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminAdmitModifyLyricResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminAdmitModifyLyricResponse);
		if (size)
			*size = sizeof(_ns1__AdminAdmitModifyLyricResponse);
		((_ns1__AdminAdmitModifyLyricResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminAdmitModifyLyricResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminAdmitModifyLyricResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminAdmitModifyLyricResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminAdmitModifyLyricResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminAdmitModifyLyricResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminAdmitModifyLyricResponse %p -> %p\n", q, p));
	*(_ns1__AdminAdmitModifyLyricResponse*)p = *(_ns1__AdminAdmitModifyLyricResponse*)q;
}

void _ns1__AdminAdmitModifyLyric::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminAdmitModifyLyric::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__AdminAdmitModifyLyric::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(soap, &this->_ns1__AdminAdmitModifyLyric::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__AdminAdmitModifyLyric::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminAdmitModifyLyric(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminAdmitModifyLyric(struct soap *soap, const char *tag, int id, const _ns1__AdminAdmitModifyLyric *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminAdmitModifyLyric), type))
		return soap->error;
	if (a->_ns1__AdminAdmitModifyLyric::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__AdminAdmitModifyLyric::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminAdmitModifyLyric::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminAdmitModifyLyric(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminAdmitModifyLyric * SOAP_FMAC4 soap_in__ns1__AdminAdmitModifyLyric(struct soap *soap, const char *tag, _ns1__AdminAdmitModifyLyric *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminAdmitModifyLyric *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminAdmitModifyLyric, sizeof(_ns1__AdminAdmitModifyLyric), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminAdmitModifyLyric)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminAdmitModifyLyric *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__AdminAdmitModifyLyric::stQuery), "ns1:ST_ADMIT_MODIFY_LYRIC_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminAdmitModifyLyric *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminAdmitModifyLyric, 0, sizeof(_ns1__AdminAdmitModifyLyric), 0, soap_copy__ns1__AdminAdmitModifyLyric);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminAdmitModifyLyric::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminAdmitModifyLyric);
	if (this->soap_out(soap, tag?tag:"ns1:AdminAdmitModifyLyric", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminAdmitModifyLyric::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminAdmitModifyLyric(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminAdmitModifyLyric * SOAP_FMAC4 soap_get__ns1__AdminAdmitModifyLyric(struct soap *soap, _ns1__AdminAdmitModifyLyric *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminAdmitModifyLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminAdmitModifyLyric * SOAP_FMAC2 soap_instantiate__ns1__AdminAdmitModifyLyric(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminAdmitModifyLyric(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminAdmitModifyLyric, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminAdmitModifyLyric);
		if (size)
			*size = sizeof(_ns1__AdminAdmitModifyLyric);
		((_ns1__AdminAdmitModifyLyric*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminAdmitModifyLyric, n);
		if (size)
			*size = n * sizeof(_ns1__AdminAdmitModifyLyric);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminAdmitModifyLyric*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminAdmitModifyLyric*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminAdmitModifyLyric(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminAdmitModifyLyric %p -> %p\n", q, p));
	*(_ns1__AdminAdmitModifyLyric*)p = *(_ns1__AdminAdmitModifyLyric*)q;
}

void _ns1__AdminDeleteRecordResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminDeleteRecordResponse::AdminDeleteRecordResult = NULL;
	/* transient soap skipped */
}

void _ns1__AdminDeleteRecordResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__AdminDeleteRecordResponse::AdminDeleteRecordResult);
	/* transient soap skipped */
#endif
}

int _ns1__AdminDeleteRecordResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminDeleteRecordResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminDeleteRecordResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminDeleteRecordResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminDeleteRecordResponse), type))
		return soap->error;
	if (a->AdminDeleteRecordResult)
		soap_element_result(soap, "ns1:AdminDeleteRecordResult");
	if (soap_out_PointerTostd__string(soap, "ns1:AdminDeleteRecordResult", -1, &(a->_ns1__AdminDeleteRecordResponse::AdminDeleteRecordResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminDeleteRecordResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminDeleteRecordResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminDeleteRecordResponse * SOAP_FMAC4 soap_in__ns1__AdminDeleteRecordResponse(struct soap *soap, const char *tag, _ns1__AdminDeleteRecordResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminDeleteRecordResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminDeleteRecordResponse, sizeof(_ns1__AdminDeleteRecordResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminDeleteRecordResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminDeleteRecordResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminDeleteRecordResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminDeleteRecordResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:AdminDeleteRecordResult", &(a->_ns1__AdminDeleteRecordResponse::AdminDeleteRecordResult), "xsd:string"))
				{	soap_flag_AdminDeleteRecordResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminDeleteRecordResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminDeleteRecordResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminDeleteRecordResponse, 0, sizeof(_ns1__AdminDeleteRecordResponse), 0, soap_copy__ns1__AdminDeleteRecordResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AdminDeleteRecordResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminDeleteRecordResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminDeleteRecordResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminDeleteRecordResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminDeleteRecordResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminDeleteRecordResponse * SOAP_FMAC4 soap_get__ns1__AdminDeleteRecordResponse(struct soap *soap, _ns1__AdminDeleteRecordResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminDeleteRecordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminDeleteRecordResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminDeleteRecordResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminDeleteRecordResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminDeleteRecordResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminDeleteRecordResponse);
		if (size)
			*size = sizeof(_ns1__AdminDeleteRecordResponse);
		((_ns1__AdminDeleteRecordResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminDeleteRecordResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminDeleteRecordResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminDeleteRecordResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminDeleteRecordResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminDeleteRecordResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminDeleteRecordResponse %p -> %p\n", q, p));
	*(_ns1__AdminDeleteRecordResponse*)p = *(_ns1__AdminDeleteRecordResponse*)q;
}

void _ns1__AdminDeleteRecord::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminDeleteRecord::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__AdminDeleteRecord::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(soap, &this->_ns1__AdminDeleteRecord::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__AdminDeleteRecord::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminDeleteRecord(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminDeleteRecord(struct soap *soap, const char *tag, int id, const _ns1__AdminDeleteRecord *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminDeleteRecord), type))
		return soap->error;
	if (a->_ns1__AdminDeleteRecord::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__AdminDeleteRecord::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminDeleteRecord::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminDeleteRecord(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminDeleteRecord * SOAP_FMAC4 soap_in__ns1__AdminDeleteRecord(struct soap *soap, const char *tag, _ns1__AdminDeleteRecord *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminDeleteRecord *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminDeleteRecord, sizeof(_ns1__AdminDeleteRecord), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminDeleteRecord)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminDeleteRecord *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__AdminDeleteRecord::stQuery), "ns1:ST_DELETE_RECORD_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminDeleteRecord *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminDeleteRecord, 0, sizeof(_ns1__AdminDeleteRecord), 0, soap_copy__ns1__AdminDeleteRecord);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminDeleteRecord::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminDeleteRecord);
	if (this->soap_out(soap, tag?tag:"ns1:AdminDeleteRecord", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminDeleteRecord::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminDeleteRecord(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminDeleteRecord * SOAP_FMAC4 soap_get__ns1__AdminDeleteRecord(struct soap *soap, _ns1__AdminDeleteRecord *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminDeleteRecord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminDeleteRecord * SOAP_FMAC2 soap_instantiate__ns1__AdminDeleteRecord(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminDeleteRecord(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminDeleteRecord, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminDeleteRecord);
		if (size)
			*size = sizeof(_ns1__AdminDeleteRecord);
		((_ns1__AdminDeleteRecord*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminDeleteRecord, n);
		if (size)
			*size = n * sizeof(_ns1__AdminDeleteRecord);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminDeleteRecord*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminDeleteRecord*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminDeleteRecord(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminDeleteRecord %p -> %p\n", q, p));
	*(_ns1__AdminDeleteRecord*)p = *(_ns1__AdminDeleteRecord*)q;
}

void _ns1__MemberGetMemberLicenseListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MemberGetMemberLicenseListResponse::MemberGetMemberLicenseListResult = NULL;
	/* transient soap skipped */
}

void _ns1__MemberGetMemberLicenseListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, &this->_ns1__MemberGetMemberLicenseListResponse::MemberGetMemberLicenseListResult);
	/* transient soap skipped */
#endif
}

int _ns1__MemberGetMemberLicenseListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MemberGetMemberLicenseListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberGetMemberLicenseListResponse(struct soap *soap, const char *tag, int id, const _ns1__MemberGetMemberLicenseListResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MemberGetMemberLicenseListResponse), type))
		return soap->error;
	if (a->MemberGetMemberLicenseListResult)
		soap_element_result(soap, "ns1:MemberGetMemberLicenseListResult");
	if (soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, "ns1:MemberGetMemberLicenseListResult", -1, &(a->_ns1__MemberGetMemberLicenseListResponse::MemberGetMemberLicenseListResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MemberGetMemberLicenseListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MemberGetMemberLicenseListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MemberGetMemberLicenseListResponse * SOAP_FMAC4 soap_in__ns1__MemberGetMemberLicenseListResponse(struct soap *soap, const char *tag, _ns1__MemberGetMemberLicenseListResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MemberGetMemberLicenseListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MemberGetMemberLicenseListResponse, sizeof(_ns1__MemberGetMemberLicenseListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MemberGetMemberLicenseListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MemberGetMemberLicenseListResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_MemberGetMemberLicenseListResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MemberGetMemberLicenseListResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, "ns1:MemberGetMemberLicenseListResult", &(a->_ns1__MemberGetMemberLicenseListResponse::MemberGetMemberLicenseListResult), "ns1:ArrayOfST_GET_MEMBER_LICENSE_LIST_RETURN"))
				{	soap_flag_MemberGetMemberLicenseListResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:MemberGetMemberLicenseListResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MemberGetMemberLicenseListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MemberGetMemberLicenseListResponse, 0, sizeof(_ns1__MemberGetMemberLicenseListResponse), 0, soap_copy__ns1__MemberGetMemberLicenseListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__MemberGetMemberLicenseListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__MemberGetMemberLicenseListResponse);
	if (this->soap_out(soap, tag?tag:"ns1:MemberGetMemberLicenseListResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MemberGetMemberLicenseListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MemberGetMemberLicenseListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MemberGetMemberLicenseListResponse * SOAP_FMAC4 soap_get__ns1__MemberGetMemberLicenseListResponse(struct soap *soap, _ns1__MemberGetMemberLicenseListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MemberGetMemberLicenseListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MemberGetMemberLicenseListResponse * SOAP_FMAC2 soap_instantiate__ns1__MemberGetMemberLicenseListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MemberGetMemberLicenseListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MemberGetMemberLicenseListResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MemberGetMemberLicenseListResponse);
		if (size)
			*size = sizeof(_ns1__MemberGetMemberLicenseListResponse);
		((_ns1__MemberGetMemberLicenseListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MemberGetMemberLicenseListResponse, n);
		if (size)
			*size = n * sizeof(_ns1__MemberGetMemberLicenseListResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MemberGetMemberLicenseListResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MemberGetMemberLicenseListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MemberGetMemberLicenseListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MemberGetMemberLicenseListResponse %p -> %p\n", q, p));
	*(_ns1__MemberGetMemberLicenseListResponse*)p = *(_ns1__MemberGetMemberLicenseListResponse*)q;
}

void _ns1__MemberGetMemberLicenseList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MemberGetMemberLicenseList::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__MemberGetMemberLicenseList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(soap, &this->_ns1__MemberGetMemberLicenseList::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__MemberGetMemberLicenseList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MemberGetMemberLicenseList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberGetMemberLicenseList(struct soap *soap, const char *tag, int id, const _ns1__MemberGetMemberLicenseList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MemberGetMemberLicenseList), type))
		return soap->error;
	if (a->_ns1__MemberGetMemberLicenseList::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__MemberGetMemberLicenseList::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MemberGetMemberLicenseList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MemberGetMemberLicenseList(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MemberGetMemberLicenseList * SOAP_FMAC4 soap_in__ns1__MemberGetMemberLicenseList(struct soap *soap, const char *tag, _ns1__MemberGetMemberLicenseList *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MemberGetMemberLicenseList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MemberGetMemberLicenseList, sizeof(_ns1__MemberGetMemberLicenseList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MemberGetMemberLicenseList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MemberGetMemberLicenseList *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__MemberGetMemberLicenseList::stQuery), "ns1:ST_GET_MEMBER_LICENSE_LIST_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MemberGetMemberLicenseList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MemberGetMemberLicenseList, 0, sizeof(_ns1__MemberGetMemberLicenseList), 0, soap_copy__ns1__MemberGetMemberLicenseList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__MemberGetMemberLicenseList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__MemberGetMemberLicenseList);
	if (this->soap_out(soap, tag?tag:"ns1:MemberGetMemberLicenseList", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MemberGetMemberLicenseList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MemberGetMemberLicenseList(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MemberGetMemberLicenseList * SOAP_FMAC4 soap_get__ns1__MemberGetMemberLicenseList(struct soap *soap, _ns1__MemberGetMemberLicenseList *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MemberGetMemberLicenseList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MemberGetMemberLicenseList * SOAP_FMAC2 soap_instantiate__ns1__MemberGetMemberLicenseList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MemberGetMemberLicenseList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MemberGetMemberLicenseList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MemberGetMemberLicenseList);
		if (size)
			*size = sizeof(_ns1__MemberGetMemberLicenseList);
		((_ns1__MemberGetMemberLicenseList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MemberGetMemberLicenseList, n);
		if (size)
			*size = n * sizeof(_ns1__MemberGetMemberLicenseList);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MemberGetMemberLicenseList*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MemberGetMemberLicenseList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MemberGetMemberLicenseList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MemberGetMemberLicenseList %p -> %p\n", q, p));
	*(_ns1__MemberGetMemberLicenseList*)p = *(_ns1__MemberGetMemberLicenseList*)q;
}

void _ns1__MemberGetMemberListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MemberGetMemberListResponse::MemberGetMemberListResult = NULL;
	/* transient soap skipped */
}

void _ns1__MemberGetMemberListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, &this->_ns1__MemberGetMemberListResponse::MemberGetMemberListResult);
	/* transient soap skipped */
#endif
}

int _ns1__MemberGetMemberListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MemberGetMemberListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberGetMemberListResponse(struct soap *soap, const char *tag, int id, const _ns1__MemberGetMemberListResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MemberGetMemberListResponse), type))
		return soap->error;
	if (a->MemberGetMemberListResult)
		soap_element_result(soap, "ns1:MemberGetMemberListResult");
	if (soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, "ns1:MemberGetMemberListResult", -1, &(a->_ns1__MemberGetMemberListResponse::MemberGetMemberListResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MemberGetMemberListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MemberGetMemberListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MemberGetMemberListResponse * SOAP_FMAC4 soap_in__ns1__MemberGetMemberListResponse(struct soap *soap, const char *tag, _ns1__MemberGetMemberListResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MemberGetMemberListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MemberGetMemberListResponse, sizeof(_ns1__MemberGetMemberListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MemberGetMemberListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MemberGetMemberListResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_MemberGetMemberListResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MemberGetMemberListResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, "ns1:MemberGetMemberListResult", &(a->_ns1__MemberGetMemberListResponse::MemberGetMemberListResult), "ns1:ArrayOfST_GET_MEMBER_LIST_RETURN"))
				{	soap_flag_MemberGetMemberListResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:MemberGetMemberListResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MemberGetMemberListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MemberGetMemberListResponse, 0, sizeof(_ns1__MemberGetMemberListResponse), 0, soap_copy__ns1__MemberGetMemberListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__MemberGetMemberListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__MemberGetMemberListResponse);
	if (this->soap_out(soap, tag?tag:"ns1:MemberGetMemberListResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MemberGetMemberListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MemberGetMemberListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MemberGetMemberListResponse * SOAP_FMAC4 soap_get__ns1__MemberGetMemberListResponse(struct soap *soap, _ns1__MemberGetMemberListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MemberGetMemberListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MemberGetMemberListResponse * SOAP_FMAC2 soap_instantiate__ns1__MemberGetMemberListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MemberGetMemberListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MemberGetMemberListResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MemberGetMemberListResponse);
		if (size)
			*size = sizeof(_ns1__MemberGetMemberListResponse);
		((_ns1__MemberGetMemberListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MemberGetMemberListResponse, n);
		if (size)
			*size = n * sizeof(_ns1__MemberGetMemberListResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MemberGetMemberListResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MemberGetMemberListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MemberGetMemberListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MemberGetMemberListResponse %p -> %p\n", q, p));
	*(_ns1__MemberGetMemberListResponse*)p = *(_ns1__MemberGetMemberListResponse*)q;
}

void _ns1__MemberGetMemberList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MemberGetMemberList::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__MemberGetMemberList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(soap, &this->_ns1__MemberGetMemberList::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__MemberGetMemberList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MemberGetMemberList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberGetMemberList(struct soap *soap, const char *tag, int id, const _ns1__MemberGetMemberList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MemberGetMemberList), type))
		return soap->error;
	if (a->_ns1__MemberGetMemberList::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__MemberGetMemberList::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MemberGetMemberList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MemberGetMemberList(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MemberGetMemberList * SOAP_FMAC4 soap_in__ns1__MemberGetMemberList(struct soap *soap, const char *tag, _ns1__MemberGetMemberList *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MemberGetMemberList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MemberGetMemberList, sizeof(_ns1__MemberGetMemberList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MemberGetMemberList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MemberGetMemberList *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__MemberGetMemberList::stQuery), "ns1:ST_GET_MEMBER_LIST_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MemberGetMemberList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MemberGetMemberList, 0, sizeof(_ns1__MemberGetMemberList), 0, soap_copy__ns1__MemberGetMemberList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__MemberGetMemberList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__MemberGetMemberList);
	if (this->soap_out(soap, tag?tag:"ns1:MemberGetMemberList", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MemberGetMemberList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MemberGetMemberList(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MemberGetMemberList * SOAP_FMAC4 soap_get__ns1__MemberGetMemberList(struct soap *soap, _ns1__MemberGetMemberList *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MemberGetMemberList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MemberGetMemberList * SOAP_FMAC2 soap_instantiate__ns1__MemberGetMemberList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MemberGetMemberList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MemberGetMemberList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MemberGetMemberList);
		if (size)
			*size = sizeof(_ns1__MemberGetMemberList);
		((_ns1__MemberGetMemberList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MemberGetMemberList, n);
		if (size)
			*size = n * sizeof(_ns1__MemberGetMemberList);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MemberGetMemberList*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MemberGetMemberList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MemberGetMemberList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MemberGetMemberList %p -> %p\n", q, p));
	*(_ns1__MemberGetMemberList*)p = *(_ns1__MemberGetMemberList*)q;
}

void _ns1__MemberModifyMemberLicenseResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MemberModifyMemberLicenseResponse::MemberModifyMemberLicenseResult = NULL;
	/* transient soap skipped */
}

void _ns1__MemberModifyMemberLicenseResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__MemberModifyMemberLicenseResponse::MemberModifyMemberLicenseResult);
	/* transient soap skipped */
#endif
}

int _ns1__MemberModifyMemberLicenseResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MemberModifyMemberLicenseResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberModifyMemberLicenseResponse(struct soap *soap, const char *tag, int id, const _ns1__MemberModifyMemberLicenseResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MemberModifyMemberLicenseResponse), type))
		return soap->error;
	if (a->MemberModifyMemberLicenseResult)
		soap_element_result(soap, "ns1:MemberModifyMemberLicenseResult");
	if (soap_out_PointerTostd__string(soap, "ns1:MemberModifyMemberLicenseResult", -1, &(a->_ns1__MemberModifyMemberLicenseResponse::MemberModifyMemberLicenseResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MemberModifyMemberLicenseResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MemberModifyMemberLicenseResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MemberModifyMemberLicenseResponse * SOAP_FMAC4 soap_in__ns1__MemberModifyMemberLicenseResponse(struct soap *soap, const char *tag, _ns1__MemberModifyMemberLicenseResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MemberModifyMemberLicenseResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MemberModifyMemberLicenseResponse, sizeof(_ns1__MemberModifyMemberLicenseResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MemberModifyMemberLicenseResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MemberModifyMemberLicenseResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_MemberModifyMemberLicenseResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MemberModifyMemberLicenseResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:MemberModifyMemberLicenseResult", &(a->_ns1__MemberModifyMemberLicenseResponse::MemberModifyMemberLicenseResult), "xsd:string"))
				{	soap_flag_MemberModifyMemberLicenseResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:MemberModifyMemberLicenseResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MemberModifyMemberLicenseResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MemberModifyMemberLicenseResponse, 0, sizeof(_ns1__MemberModifyMemberLicenseResponse), 0, soap_copy__ns1__MemberModifyMemberLicenseResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__MemberModifyMemberLicenseResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__MemberModifyMemberLicenseResponse);
	if (this->soap_out(soap, tag?tag:"ns1:MemberModifyMemberLicenseResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MemberModifyMemberLicenseResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MemberModifyMemberLicenseResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MemberModifyMemberLicenseResponse * SOAP_FMAC4 soap_get__ns1__MemberModifyMemberLicenseResponse(struct soap *soap, _ns1__MemberModifyMemberLicenseResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MemberModifyMemberLicenseResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MemberModifyMemberLicenseResponse * SOAP_FMAC2 soap_instantiate__ns1__MemberModifyMemberLicenseResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MemberModifyMemberLicenseResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MemberModifyMemberLicenseResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MemberModifyMemberLicenseResponse);
		if (size)
			*size = sizeof(_ns1__MemberModifyMemberLicenseResponse);
		((_ns1__MemberModifyMemberLicenseResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MemberModifyMemberLicenseResponse, n);
		if (size)
			*size = n * sizeof(_ns1__MemberModifyMemberLicenseResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MemberModifyMemberLicenseResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MemberModifyMemberLicenseResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MemberModifyMemberLicenseResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MemberModifyMemberLicenseResponse %p -> %p\n", q, p));
	*(_ns1__MemberModifyMemberLicenseResponse*)p = *(_ns1__MemberModifyMemberLicenseResponse*)q;
}

void _ns1__MemberModifyMemberLicense::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MemberModifyMemberLicense::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__MemberModifyMemberLicense::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(soap, &this->_ns1__MemberModifyMemberLicense::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__MemberModifyMemberLicense::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MemberModifyMemberLicense(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberModifyMemberLicense(struct soap *soap, const char *tag, int id, const _ns1__MemberModifyMemberLicense *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MemberModifyMemberLicense), type))
		return soap->error;
	if (a->_ns1__MemberModifyMemberLicense::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__MemberModifyMemberLicense::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MemberModifyMemberLicense::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MemberModifyMemberLicense(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MemberModifyMemberLicense * SOAP_FMAC4 soap_in__ns1__MemberModifyMemberLicense(struct soap *soap, const char *tag, _ns1__MemberModifyMemberLicense *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MemberModifyMemberLicense *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MemberModifyMemberLicense, sizeof(_ns1__MemberModifyMemberLicense), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MemberModifyMemberLicense)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MemberModifyMemberLicense *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__MemberModifyMemberLicense::stQuery), "ns1:ST_MODIFY_MEMBER_LICENSE_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MemberModifyMemberLicense *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MemberModifyMemberLicense, 0, sizeof(_ns1__MemberModifyMemberLicense), 0, soap_copy__ns1__MemberModifyMemberLicense);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__MemberModifyMemberLicense::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__MemberModifyMemberLicense);
	if (this->soap_out(soap, tag?tag:"ns1:MemberModifyMemberLicense", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MemberModifyMemberLicense::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MemberModifyMemberLicense(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MemberModifyMemberLicense * SOAP_FMAC4 soap_get__ns1__MemberModifyMemberLicense(struct soap *soap, _ns1__MemberModifyMemberLicense *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MemberModifyMemberLicense(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MemberModifyMemberLicense * SOAP_FMAC2 soap_instantiate__ns1__MemberModifyMemberLicense(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MemberModifyMemberLicense(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MemberModifyMemberLicense, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MemberModifyMemberLicense);
		if (size)
			*size = sizeof(_ns1__MemberModifyMemberLicense);
		((_ns1__MemberModifyMemberLicense*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MemberModifyMemberLicense, n);
		if (size)
			*size = n * sizeof(_ns1__MemberModifyMemberLicense);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MemberModifyMemberLicense*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MemberModifyMemberLicense*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MemberModifyMemberLicense(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MemberModifyMemberLicense %p -> %p\n", q, p));
	*(_ns1__MemberModifyMemberLicense*)p = *(_ns1__MemberModifyMemberLicense*)q;
}

void _ns1__MemberApplyRegistrationResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MemberApplyRegistrationResponse::MemberApplyRegistrationResult = NULL;
	/* transient soap skipped */
}

void _ns1__MemberApplyRegistrationResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__MemberApplyRegistrationResponse::MemberApplyRegistrationResult);
	/* transient soap skipped */
#endif
}

int _ns1__MemberApplyRegistrationResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MemberApplyRegistrationResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberApplyRegistrationResponse(struct soap *soap, const char *tag, int id, const _ns1__MemberApplyRegistrationResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MemberApplyRegistrationResponse), type))
		return soap->error;
	if (a->MemberApplyRegistrationResult)
		soap_element_result(soap, "ns1:MemberApplyRegistrationResult");
	if (soap_out_PointerTostd__string(soap, "ns1:MemberApplyRegistrationResult", -1, &(a->_ns1__MemberApplyRegistrationResponse::MemberApplyRegistrationResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MemberApplyRegistrationResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MemberApplyRegistrationResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MemberApplyRegistrationResponse * SOAP_FMAC4 soap_in__ns1__MemberApplyRegistrationResponse(struct soap *soap, const char *tag, _ns1__MemberApplyRegistrationResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MemberApplyRegistrationResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MemberApplyRegistrationResponse, sizeof(_ns1__MemberApplyRegistrationResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MemberApplyRegistrationResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MemberApplyRegistrationResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_MemberApplyRegistrationResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MemberApplyRegistrationResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:MemberApplyRegistrationResult", &(a->_ns1__MemberApplyRegistrationResponse::MemberApplyRegistrationResult), "xsd:string"))
				{	soap_flag_MemberApplyRegistrationResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:MemberApplyRegistrationResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MemberApplyRegistrationResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MemberApplyRegistrationResponse, 0, sizeof(_ns1__MemberApplyRegistrationResponse), 0, soap_copy__ns1__MemberApplyRegistrationResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__MemberApplyRegistrationResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__MemberApplyRegistrationResponse);
	if (this->soap_out(soap, tag?tag:"ns1:MemberApplyRegistrationResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MemberApplyRegistrationResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MemberApplyRegistrationResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MemberApplyRegistrationResponse * SOAP_FMAC4 soap_get__ns1__MemberApplyRegistrationResponse(struct soap *soap, _ns1__MemberApplyRegistrationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MemberApplyRegistrationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MemberApplyRegistrationResponse * SOAP_FMAC2 soap_instantiate__ns1__MemberApplyRegistrationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MemberApplyRegistrationResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MemberApplyRegistrationResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MemberApplyRegistrationResponse);
		if (size)
			*size = sizeof(_ns1__MemberApplyRegistrationResponse);
		((_ns1__MemberApplyRegistrationResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MemberApplyRegistrationResponse, n);
		if (size)
			*size = n * sizeof(_ns1__MemberApplyRegistrationResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MemberApplyRegistrationResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MemberApplyRegistrationResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MemberApplyRegistrationResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MemberApplyRegistrationResponse %p -> %p\n", q, p));
	*(_ns1__MemberApplyRegistrationResponse*)p = *(_ns1__MemberApplyRegistrationResponse*)q;
}

void _ns1__MemberApplyRegistration::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MemberApplyRegistration::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__MemberApplyRegistration::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(soap, &this->_ns1__MemberApplyRegistration::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__MemberApplyRegistration::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MemberApplyRegistration(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberApplyRegistration(struct soap *soap, const char *tag, int id, const _ns1__MemberApplyRegistration *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MemberApplyRegistration), type))
		return soap->error;
	if (a->_ns1__MemberApplyRegistration::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__MemberApplyRegistration::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MemberApplyRegistration::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MemberApplyRegistration(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MemberApplyRegistration * SOAP_FMAC4 soap_in__ns1__MemberApplyRegistration(struct soap *soap, const char *tag, _ns1__MemberApplyRegistration *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MemberApplyRegistration *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MemberApplyRegistration, sizeof(_ns1__MemberApplyRegistration), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MemberApplyRegistration)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MemberApplyRegistration *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__MemberApplyRegistration::stQuery), "ns1:ST_APPLY_REGISTRATION_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MemberApplyRegistration *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MemberApplyRegistration, 0, sizeof(_ns1__MemberApplyRegistration), 0, soap_copy__ns1__MemberApplyRegistration);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__MemberApplyRegistration::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__MemberApplyRegistration);
	if (this->soap_out(soap, tag?tag:"ns1:MemberApplyRegistration", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MemberApplyRegistration::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MemberApplyRegistration(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MemberApplyRegistration * SOAP_FMAC4 soap_get__ns1__MemberApplyRegistration(struct soap *soap, _ns1__MemberApplyRegistration *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MemberApplyRegistration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MemberApplyRegistration * SOAP_FMAC2 soap_instantiate__ns1__MemberApplyRegistration(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MemberApplyRegistration(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MemberApplyRegistration, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MemberApplyRegistration);
		if (size)
			*size = sizeof(_ns1__MemberApplyRegistration);
		((_ns1__MemberApplyRegistration*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MemberApplyRegistration, n);
		if (size)
			*size = n * sizeof(_ns1__MemberApplyRegistration);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MemberApplyRegistration*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MemberApplyRegistration*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MemberApplyRegistration(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MemberApplyRegistration %p -> %p\n", q, p));
	*(_ns1__MemberApplyRegistration*)p = *(_ns1__MemberApplyRegistration*)q;
}

void _ns1__MemberLogoutResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MemberLogoutResponse::MemberLogoutResult = NULL;
	/* transient soap skipped */
}

void _ns1__MemberLogoutResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__MemberLogoutResponse::MemberLogoutResult);
	/* transient soap skipped */
#endif
}

int _ns1__MemberLogoutResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MemberLogoutResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberLogoutResponse(struct soap *soap, const char *tag, int id, const _ns1__MemberLogoutResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MemberLogoutResponse), type))
		return soap->error;
	if (a->MemberLogoutResult)
		soap_element_result(soap, "ns1:MemberLogoutResult");
	if (soap_out_PointerTostd__string(soap, "ns1:MemberLogoutResult", -1, &(a->_ns1__MemberLogoutResponse::MemberLogoutResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MemberLogoutResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MemberLogoutResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MemberLogoutResponse * SOAP_FMAC4 soap_in__ns1__MemberLogoutResponse(struct soap *soap, const char *tag, _ns1__MemberLogoutResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MemberLogoutResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MemberLogoutResponse, sizeof(_ns1__MemberLogoutResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MemberLogoutResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MemberLogoutResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_MemberLogoutResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MemberLogoutResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:MemberLogoutResult", &(a->_ns1__MemberLogoutResponse::MemberLogoutResult), "xsd:string"))
				{	soap_flag_MemberLogoutResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:MemberLogoutResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MemberLogoutResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MemberLogoutResponse, 0, sizeof(_ns1__MemberLogoutResponse), 0, soap_copy__ns1__MemberLogoutResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__MemberLogoutResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__MemberLogoutResponse);
	if (this->soap_out(soap, tag?tag:"ns1:MemberLogoutResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MemberLogoutResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MemberLogoutResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MemberLogoutResponse * SOAP_FMAC4 soap_get__ns1__MemberLogoutResponse(struct soap *soap, _ns1__MemberLogoutResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MemberLogoutResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MemberLogoutResponse * SOAP_FMAC2 soap_instantiate__ns1__MemberLogoutResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MemberLogoutResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MemberLogoutResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MemberLogoutResponse);
		if (size)
			*size = sizeof(_ns1__MemberLogoutResponse);
		((_ns1__MemberLogoutResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MemberLogoutResponse, n);
		if (size)
			*size = n * sizeof(_ns1__MemberLogoutResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MemberLogoutResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MemberLogoutResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MemberLogoutResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MemberLogoutResponse %p -> %p\n", q, p));
	*(_ns1__MemberLogoutResponse*)p = *(_ns1__MemberLogoutResponse*)q;
}

void _ns1__MemberLogout::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MemberLogout::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__MemberLogout::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(soap, &this->_ns1__MemberLogout::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__MemberLogout::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MemberLogout(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberLogout(struct soap *soap, const char *tag, int id, const _ns1__MemberLogout *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MemberLogout), type))
		return soap->error;
	if (a->_ns1__MemberLogout::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__MemberLogout::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MemberLogout::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MemberLogout(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MemberLogout * SOAP_FMAC4 soap_in__ns1__MemberLogout(struct soap *soap, const char *tag, _ns1__MemberLogout *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MemberLogout *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MemberLogout, sizeof(_ns1__MemberLogout), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MemberLogout)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MemberLogout *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__MemberLogout::stQuery), "ns1:ST_MEMBER_LOGOUT_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MemberLogout *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MemberLogout, 0, sizeof(_ns1__MemberLogout), 0, soap_copy__ns1__MemberLogout);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__MemberLogout::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__MemberLogout);
	if (this->soap_out(soap, tag?tag:"ns1:MemberLogout", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MemberLogout::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MemberLogout(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MemberLogout * SOAP_FMAC4 soap_get__ns1__MemberLogout(struct soap *soap, _ns1__MemberLogout *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MemberLogout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MemberLogout * SOAP_FMAC2 soap_instantiate__ns1__MemberLogout(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MemberLogout(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MemberLogout, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MemberLogout);
		if (size)
			*size = sizeof(_ns1__MemberLogout);
		((_ns1__MemberLogout*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MemberLogout, n);
		if (size)
			*size = n * sizeof(_ns1__MemberLogout);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MemberLogout*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MemberLogout*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MemberLogout(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MemberLogout %p -> %p\n", q, p));
	*(_ns1__MemberLogout*)p = *(_ns1__MemberLogout*)q;
}

void _ns1__MemberLoginResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MemberLoginResponse::MemberLoginResult = NULL;
	/* transient soap skipped */
}

void _ns1__MemberLoginResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__MemberLoginResponse::MemberLoginResult);
	/* transient soap skipped */
#endif
}

int _ns1__MemberLoginResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MemberLoginResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberLoginResponse(struct soap *soap, const char *tag, int id, const _ns1__MemberLoginResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MemberLoginResponse), type))
		return soap->error;
	if (a->MemberLoginResult)
		soap_element_result(soap, "ns1:MemberLoginResult");
	if (soap_out_PointerTostd__string(soap, "ns1:MemberLoginResult", -1, &(a->_ns1__MemberLoginResponse::MemberLoginResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MemberLoginResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MemberLoginResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MemberLoginResponse * SOAP_FMAC4 soap_in__ns1__MemberLoginResponse(struct soap *soap, const char *tag, _ns1__MemberLoginResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MemberLoginResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MemberLoginResponse, sizeof(_ns1__MemberLoginResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MemberLoginResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MemberLoginResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_MemberLoginResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MemberLoginResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:MemberLoginResult", &(a->_ns1__MemberLoginResponse::MemberLoginResult), "xsd:string"))
				{	soap_flag_MemberLoginResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:MemberLoginResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MemberLoginResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MemberLoginResponse, 0, sizeof(_ns1__MemberLoginResponse), 0, soap_copy__ns1__MemberLoginResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__MemberLoginResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__MemberLoginResponse);
	if (this->soap_out(soap, tag?tag:"ns1:MemberLoginResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MemberLoginResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MemberLoginResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MemberLoginResponse * SOAP_FMAC4 soap_get__ns1__MemberLoginResponse(struct soap *soap, _ns1__MemberLoginResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MemberLoginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MemberLoginResponse * SOAP_FMAC2 soap_instantiate__ns1__MemberLoginResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MemberLoginResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MemberLoginResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MemberLoginResponse);
		if (size)
			*size = sizeof(_ns1__MemberLoginResponse);
		((_ns1__MemberLoginResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MemberLoginResponse, n);
		if (size)
			*size = n * sizeof(_ns1__MemberLoginResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MemberLoginResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MemberLoginResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MemberLoginResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MemberLoginResponse %p -> %p\n", q, p));
	*(_ns1__MemberLoginResponse*)p = *(_ns1__MemberLoginResponse*)q;
}

void _ns1__MemberLogin::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MemberLogin::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__MemberLogin::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(soap, &this->_ns1__MemberLogin::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__MemberLogin::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MemberLogin(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberLogin(struct soap *soap, const char *tag, int id, const _ns1__MemberLogin *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MemberLogin), type))
		return soap->error;
	if (a->_ns1__MemberLogin::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__MemberLogin::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MemberLogin::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MemberLogin(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MemberLogin * SOAP_FMAC4 soap_in__ns1__MemberLogin(struct soap *soap, const char *tag, _ns1__MemberLogin *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MemberLogin *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MemberLogin, sizeof(_ns1__MemberLogin), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MemberLogin)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MemberLogin *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__MemberLogin::stQuery), "ns1:ST_MEMBER_LOGIN_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MemberLogin *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MemberLogin, 0, sizeof(_ns1__MemberLogin), 0, soap_copy__ns1__MemberLogin);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__MemberLogin::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__MemberLogin);
	if (this->soap_out(soap, tag?tag:"ns1:MemberLogin", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MemberLogin::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MemberLogin(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MemberLogin * SOAP_FMAC4 soap_get__ns1__MemberLogin(struct soap *soap, _ns1__MemberLogin *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MemberLogin(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MemberLogin * SOAP_FMAC2 soap_instantiate__ns1__MemberLogin(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MemberLogin(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MemberLogin, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MemberLogin);
		if (size)
			*size = sizeof(_ns1__MemberLogin);
		((_ns1__MemberLogin*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MemberLogin, n);
		if (size)
			*size = n * sizeof(_ns1__MemberLogin);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MemberLogin*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MemberLogin*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MemberLogin(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MemberLogin %p -> %p\n", q, p));
	*(_ns1__MemberLogin*)p = *(_ns1__MemberLogin*)q;
}

void _ns1__MemberRemoveMemberResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MemberRemoveMemberResponse::MemberRemoveMemberResult = NULL;
	/* transient soap skipped */
}

void _ns1__MemberRemoveMemberResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__MemberRemoveMemberResponse::MemberRemoveMemberResult);
	/* transient soap skipped */
#endif
}

int _ns1__MemberRemoveMemberResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MemberRemoveMemberResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberRemoveMemberResponse(struct soap *soap, const char *tag, int id, const _ns1__MemberRemoveMemberResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MemberRemoveMemberResponse), type))
		return soap->error;
	if (a->MemberRemoveMemberResult)
		soap_element_result(soap, "ns1:MemberRemoveMemberResult");
	if (soap_out_PointerTostd__string(soap, "ns1:MemberRemoveMemberResult", -1, &(a->_ns1__MemberRemoveMemberResponse::MemberRemoveMemberResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MemberRemoveMemberResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MemberRemoveMemberResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MemberRemoveMemberResponse * SOAP_FMAC4 soap_in__ns1__MemberRemoveMemberResponse(struct soap *soap, const char *tag, _ns1__MemberRemoveMemberResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MemberRemoveMemberResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MemberRemoveMemberResponse, sizeof(_ns1__MemberRemoveMemberResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MemberRemoveMemberResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MemberRemoveMemberResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_MemberRemoveMemberResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MemberRemoveMemberResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:MemberRemoveMemberResult", &(a->_ns1__MemberRemoveMemberResponse::MemberRemoveMemberResult), "xsd:string"))
				{	soap_flag_MemberRemoveMemberResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:MemberRemoveMemberResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MemberRemoveMemberResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MemberRemoveMemberResponse, 0, sizeof(_ns1__MemberRemoveMemberResponse), 0, soap_copy__ns1__MemberRemoveMemberResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__MemberRemoveMemberResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__MemberRemoveMemberResponse);
	if (this->soap_out(soap, tag?tag:"ns1:MemberRemoveMemberResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MemberRemoveMemberResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MemberRemoveMemberResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MemberRemoveMemberResponse * SOAP_FMAC4 soap_get__ns1__MemberRemoveMemberResponse(struct soap *soap, _ns1__MemberRemoveMemberResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MemberRemoveMemberResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MemberRemoveMemberResponse * SOAP_FMAC2 soap_instantiate__ns1__MemberRemoveMemberResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MemberRemoveMemberResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MemberRemoveMemberResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MemberRemoveMemberResponse);
		if (size)
			*size = sizeof(_ns1__MemberRemoveMemberResponse);
		((_ns1__MemberRemoveMemberResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MemberRemoveMemberResponse, n);
		if (size)
			*size = n * sizeof(_ns1__MemberRemoveMemberResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MemberRemoveMemberResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MemberRemoveMemberResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MemberRemoveMemberResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MemberRemoveMemberResponse %p -> %p\n", q, p));
	*(_ns1__MemberRemoveMemberResponse*)p = *(_ns1__MemberRemoveMemberResponse*)q;
}

void _ns1__MemberRemoveMember::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MemberRemoveMember::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__MemberRemoveMember::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(soap, &this->_ns1__MemberRemoveMember::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__MemberRemoveMember::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MemberRemoveMember(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberRemoveMember(struct soap *soap, const char *tag, int id, const _ns1__MemberRemoveMember *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MemberRemoveMember), type))
		return soap->error;
	if (a->_ns1__MemberRemoveMember::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__MemberRemoveMember::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MemberRemoveMember::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MemberRemoveMember(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MemberRemoveMember * SOAP_FMAC4 soap_in__ns1__MemberRemoveMember(struct soap *soap, const char *tag, _ns1__MemberRemoveMember *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MemberRemoveMember *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MemberRemoveMember, sizeof(_ns1__MemberRemoveMember), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MemberRemoveMember)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MemberRemoveMember *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__MemberRemoveMember::stQuery), "ns1:ST_MEMBER_REMOVEMEMBER_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MemberRemoveMember *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MemberRemoveMember, 0, sizeof(_ns1__MemberRemoveMember), 0, soap_copy__ns1__MemberRemoveMember);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__MemberRemoveMember::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__MemberRemoveMember);
	if (this->soap_out(soap, tag?tag:"ns1:MemberRemoveMember", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MemberRemoveMember::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MemberRemoveMember(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MemberRemoveMember * SOAP_FMAC4 soap_get__ns1__MemberRemoveMember(struct soap *soap, _ns1__MemberRemoveMember *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MemberRemoveMember(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MemberRemoveMember * SOAP_FMAC2 soap_instantiate__ns1__MemberRemoveMember(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MemberRemoveMember(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MemberRemoveMember, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MemberRemoveMember);
		if (size)
			*size = sizeof(_ns1__MemberRemoveMember);
		((_ns1__MemberRemoveMember*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MemberRemoveMember, n);
		if (size)
			*size = n * sizeof(_ns1__MemberRemoveMember);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MemberRemoveMember*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MemberRemoveMember*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MemberRemoveMember(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MemberRemoveMember %p -> %p\n", q, p));
	*(_ns1__MemberRemoveMember*)p = *(_ns1__MemberRemoveMember*)q;
}

void _ns1__MemberModifyMemberResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MemberModifyMemberResponse::MemberModifyMemberResult = NULL;
	/* transient soap skipped */
}

void _ns1__MemberModifyMemberResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__MemberModifyMemberResponse::MemberModifyMemberResult);
	/* transient soap skipped */
#endif
}

int _ns1__MemberModifyMemberResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MemberModifyMemberResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberModifyMemberResponse(struct soap *soap, const char *tag, int id, const _ns1__MemberModifyMemberResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MemberModifyMemberResponse), type))
		return soap->error;
	if (a->MemberModifyMemberResult)
		soap_element_result(soap, "ns1:MemberModifyMemberResult");
	if (soap_out_PointerTostd__string(soap, "ns1:MemberModifyMemberResult", -1, &(a->_ns1__MemberModifyMemberResponse::MemberModifyMemberResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MemberModifyMemberResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MemberModifyMemberResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MemberModifyMemberResponse * SOAP_FMAC4 soap_in__ns1__MemberModifyMemberResponse(struct soap *soap, const char *tag, _ns1__MemberModifyMemberResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MemberModifyMemberResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MemberModifyMemberResponse, sizeof(_ns1__MemberModifyMemberResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MemberModifyMemberResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MemberModifyMemberResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_MemberModifyMemberResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MemberModifyMemberResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:MemberModifyMemberResult", &(a->_ns1__MemberModifyMemberResponse::MemberModifyMemberResult), "xsd:string"))
				{	soap_flag_MemberModifyMemberResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:MemberModifyMemberResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MemberModifyMemberResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MemberModifyMemberResponse, 0, sizeof(_ns1__MemberModifyMemberResponse), 0, soap_copy__ns1__MemberModifyMemberResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__MemberModifyMemberResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__MemberModifyMemberResponse);
	if (this->soap_out(soap, tag?tag:"ns1:MemberModifyMemberResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MemberModifyMemberResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MemberModifyMemberResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MemberModifyMemberResponse * SOAP_FMAC4 soap_get__ns1__MemberModifyMemberResponse(struct soap *soap, _ns1__MemberModifyMemberResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MemberModifyMemberResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MemberModifyMemberResponse * SOAP_FMAC2 soap_instantiate__ns1__MemberModifyMemberResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MemberModifyMemberResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MemberModifyMemberResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MemberModifyMemberResponse);
		if (size)
			*size = sizeof(_ns1__MemberModifyMemberResponse);
		((_ns1__MemberModifyMemberResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MemberModifyMemberResponse, n);
		if (size)
			*size = n * sizeof(_ns1__MemberModifyMemberResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MemberModifyMemberResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MemberModifyMemberResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MemberModifyMemberResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MemberModifyMemberResponse %p -> %p\n", q, p));
	*(_ns1__MemberModifyMemberResponse*)p = *(_ns1__MemberModifyMemberResponse*)q;
}

void _ns1__MemberModifyMember::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MemberModifyMember::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__MemberModifyMember::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(soap, &this->_ns1__MemberModifyMember::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__MemberModifyMember::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MemberModifyMember(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberModifyMember(struct soap *soap, const char *tag, int id, const _ns1__MemberModifyMember *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MemberModifyMember), type))
		return soap->error;
	if (a->_ns1__MemberModifyMember::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__MemberModifyMember::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MemberModifyMember::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MemberModifyMember(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MemberModifyMember * SOAP_FMAC4 soap_in__ns1__MemberModifyMember(struct soap *soap, const char *tag, _ns1__MemberModifyMember *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MemberModifyMember *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MemberModifyMember, sizeof(_ns1__MemberModifyMember), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MemberModifyMember)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MemberModifyMember *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__MemberModifyMember::stQuery), "ns1:ST_MEMBER_MODIFYMEMBER_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MemberModifyMember *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MemberModifyMember, 0, sizeof(_ns1__MemberModifyMember), 0, soap_copy__ns1__MemberModifyMember);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__MemberModifyMember::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__MemberModifyMember);
	if (this->soap_out(soap, tag?tag:"ns1:MemberModifyMember", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MemberModifyMember::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MemberModifyMember(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MemberModifyMember * SOAP_FMAC4 soap_get__ns1__MemberModifyMember(struct soap *soap, _ns1__MemberModifyMember *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MemberModifyMember(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MemberModifyMember * SOAP_FMAC2 soap_instantiate__ns1__MemberModifyMember(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MemberModifyMember(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MemberModifyMember, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MemberModifyMember);
		if (size)
			*size = sizeof(_ns1__MemberModifyMember);
		((_ns1__MemberModifyMember*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MemberModifyMember, n);
		if (size)
			*size = n * sizeof(_ns1__MemberModifyMember);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MemberModifyMember*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MemberModifyMember*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MemberModifyMember(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MemberModifyMember %p -> %p\n", q, p));
	*(_ns1__MemberModifyMember*)p = *(_ns1__MemberModifyMember*)q;
}

void _ns1__MemberAddMemberResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MemberAddMemberResponse::MemberAddMemberResult = NULL;
	/* transient soap skipped */
}

void _ns1__MemberAddMemberResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__MemberAddMemberResponse::MemberAddMemberResult);
	/* transient soap skipped */
#endif
}

int _ns1__MemberAddMemberResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MemberAddMemberResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberAddMemberResponse(struct soap *soap, const char *tag, int id, const _ns1__MemberAddMemberResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MemberAddMemberResponse), type))
		return soap->error;
	if (a->MemberAddMemberResult)
		soap_element_result(soap, "ns1:MemberAddMemberResult");
	if (soap_out_PointerTostd__string(soap, "ns1:MemberAddMemberResult", -1, &(a->_ns1__MemberAddMemberResponse::MemberAddMemberResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MemberAddMemberResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MemberAddMemberResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MemberAddMemberResponse * SOAP_FMAC4 soap_in__ns1__MemberAddMemberResponse(struct soap *soap, const char *tag, _ns1__MemberAddMemberResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MemberAddMemberResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MemberAddMemberResponse, sizeof(_ns1__MemberAddMemberResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MemberAddMemberResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MemberAddMemberResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_MemberAddMemberResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MemberAddMemberResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:MemberAddMemberResult", &(a->_ns1__MemberAddMemberResponse::MemberAddMemberResult), "xsd:string"))
				{	soap_flag_MemberAddMemberResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:MemberAddMemberResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MemberAddMemberResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MemberAddMemberResponse, 0, sizeof(_ns1__MemberAddMemberResponse), 0, soap_copy__ns1__MemberAddMemberResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__MemberAddMemberResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__MemberAddMemberResponse);
	if (this->soap_out(soap, tag?tag:"ns1:MemberAddMemberResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MemberAddMemberResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MemberAddMemberResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MemberAddMemberResponse * SOAP_FMAC4 soap_get__ns1__MemberAddMemberResponse(struct soap *soap, _ns1__MemberAddMemberResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MemberAddMemberResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MemberAddMemberResponse * SOAP_FMAC2 soap_instantiate__ns1__MemberAddMemberResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MemberAddMemberResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MemberAddMemberResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MemberAddMemberResponse);
		if (size)
			*size = sizeof(_ns1__MemberAddMemberResponse);
		((_ns1__MemberAddMemberResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MemberAddMemberResponse, n);
		if (size)
			*size = n * sizeof(_ns1__MemberAddMemberResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MemberAddMemberResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MemberAddMemberResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MemberAddMemberResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MemberAddMemberResponse %p -> %p\n", q, p));
	*(_ns1__MemberAddMemberResponse*)p = *(_ns1__MemberAddMemberResponse*)q;
}

void _ns1__MemberAddMember::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MemberAddMember::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__MemberAddMember::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(soap, &this->_ns1__MemberAddMember::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__MemberAddMember::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MemberAddMember(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberAddMember(struct soap *soap, const char *tag, int id, const _ns1__MemberAddMember *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MemberAddMember), type))
		return soap->error;
	if (a->_ns1__MemberAddMember::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__MemberAddMember::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__MemberAddMember::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__MemberAddMember(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MemberAddMember * SOAP_FMAC4 soap_in__ns1__MemberAddMember(struct soap *soap, const char *tag, _ns1__MemberAddMember *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MemberAddMember *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MemberAddMember, sizeof(_ns1__MemberAddMember), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__MemberAddMember)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__MemberAddMember *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__MemberAddMember::stQuery), "ns1:ST_MEMBER_ADDMEMBER_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MemberAddMember *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MemberAddMember, 0, sizeof(_ns1__MemberAddMember), 0, soap_copy__ns1__MemberAddMember);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__MemberAddMember::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__MemberAddMember);
	if (this->soap_out(soap, tag?tag:"ns1:MemberAddMember", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MemberAddMember::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MemberAddMember(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MemberAddMember * SOAP_FMAC4 soap_get__ns1__MemberAddMember(struct soap *soap, _ns1__MemberAddMember *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MemberAddMember(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__MemberAddMember * SOAP_FMAC2 soap_instantiate__ns1__MemberAddMember(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MemberAddMember(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__MemberAddMember, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__MemberAddMember);
		if (size)
			*size = sizeof(_ns1__MemberAddMember);
		((_ns1__MemberAddMember*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__MemberAddMember, n);
		if (size)
			*size = n * sizeof(_ns1__MemberAddMember);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__MemberAddMember*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__MemberAddMember*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__MemberAddMember(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__MemberAddMember %p -> %p\n", q, p));
	*(_ns1__MemberAddMember*)p = *(_ns1__MemberAddMember*)q;
}

void _ns1__AdminGetRegisterListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminGetRegisterListResponse::AdminGetRegisterListResult = NULL;
	/* transient soap skipped */
}

void _ns1__AdminGetRegisterListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, &this->_ns1__AdminGetRegisterListResponse::AdminGetRegisterListResult);
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetRegisterListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetRegisterListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetRegisterListResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminGetRegisterListResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetRegisterListResponse), type))
		return soap->error;
	if (a->AdminGetRegisterListResult)
		soap_element_result(soap, "ns1:AdminGetRegisterListResult");
	if (soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, "ns1:AdminGetRegisterListResult", -1, &(a->_ns1__AdminGetRegisterListResponse::AdminGetRegisterListResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetRegisterListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetRegisterListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetRegisterListResponse * SOAP_FMAC4 soap_in__ns1__AdminGetRegisterListResponse(struct soap *soap, const char *tag, _ns1__AdminGetRegisterListResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetRegisterListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetRegisterListResponse, sizeof(_ns1__AdminGetRegisterListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetRegisterListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetRegisterListResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminGetRegisterListResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminGetRegisterListResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, "ns1:AdminGetRegisterListResult", &(a->_ns1__AdminGetRegisterListResponse::AdminGetRegisterListResult), "ns1:ArrayOfST_GET_REGISTER_LIST_RETURN"))
				{	soap_flag_AdminGetRegisterListResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminGetRegisterListResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetRegisterListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetRegisterListResponse, 0, sizeof(_ns1__AdminGetRegisterListResponse), 0, soap_copy__ns1__AdminGetRegisterListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AdminGetRegisterListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetRegisterListResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetRegisterListResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetRegisterListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetRegisterListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetRegisterListResponse * SOAP_FMAC4 soap_get__ns1__AdminGetRegisterListResponse(struct soap *soap, _ns1__AdminGetRegisterListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetRegisterListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetRegisterListResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminGetRegisterListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetRegisterListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetRegisterListResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetRegisterListResponse);
		if (size)
			*size = sizeof(_ns1__AdminGetRegisterListResponse);
		((_ns1__AdminGetRegisterListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetRegisterListResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetRegisterListResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetRegisterListResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetRegisterListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetRegisterListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetRegisterListResponse %p -> %p\n", q, p));
	*(_ns1__AdminGetRegisterListResponse*)p = *(_ns1__AdminGetRegisterListResponse*)q;
}

void _ns1__AdminGetRegisterList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminGetRegisterList::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__AdminGetRegisterList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(soap, &this->_ns1__AdminGetRegisterList::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetRegisterList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetRegisterList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetRegisterList(struct soap *soap, const char *tag, int id, const _ns1__AdminGetRegisterList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetRegisterList), type))
		return soap->error;
	if (a->_ns1__AdminGetRegisterList::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__AdminGetRegisterList::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetRegisterList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetRegisterList(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetRegisterList * SOAP_FMAC4 soap_in__ns1__AdminGetRegisterList(struct soap *soap, const char *tag, _ns1__AdminGetRegisterList *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetRegisterList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetRegisterList, sizeof(_ns1__AdminGetRegisterList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetRegisterList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetRegisterList *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__AdminGetRegisterList::stQuery), "ns1:ST_GET_REGISTER_LIST_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetRegisterList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetRegisterList, 0, sizeof(_ns1__AdminGetRegisterList), 0, soap_copy__ns1__AdminGetRegisterList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminGetRegisterList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetRegisterList);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetRegisterList", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetRegisterList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetRegisterList(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetRegisterList * SOAP_FMAC4 soap_get__ns1__AdminGetRegisterList(struct soap *soap, _ns1__AdminGetRegisterList *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetRegisterList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetRegisterList * SOAP_FMAC2 soap_instantiate__ns1__AdminGetRegisterList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetRegisterList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetRegisterList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetRegisterList);
		if (size)
			*size = sizeof(_ns1__AdminGetRegisterList);
		((_ns1__AdminGetRegisterList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetRegisterList, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetRegisterList);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetRegisterList*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetRegisterList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetRegisterList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetRegisterList %p -> %p\n", q, p));
	*(_ns1__AdminGetRegisterList*)p = *(_ns1__AdminGetRegisterList*)q;
}

void _ns1__AdminGetModifyListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminGetModifyListResponse::AdminGetModifyListResult = NULL;
	/* transient soap skipped */
}

void _ns1__AdminGetModifyListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, &this->_ns1__AdminGetModifyListResponse::AdminGetModifyListResult);
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetModifyListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetModifyListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetModifyListResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminGetModifyListResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetModifyListResponse), type))
		return soap->error;
	if (a->AdminGetModifyListResult)
		soap_element_result(soap, "ns1:AdminGetModifyListResult");
	if (soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, "ns1:AdminGetModifyListResult", -1, &(a->_ns1__AdminGetModifyListResponse::AdminGetModifyListResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetModifyListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetModifyListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetModifyListResponse * SOAP_FMAC4 soap_in__ns1__AdminGetModifyListResponse(struct soap *soap, const char *tag, _ns1__AdminGetModifyListResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetModifyListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetModifyListResponse, sizeof(_ns1__AdminGetModifyListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetModifyListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetModifyListResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminGetModifyListResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminGetModifyListResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, "ns1:AdminGetModifyListResult", &(a->_ns1__AdminGetModifyListResponse::AdminGetModifyListResult), "ns1:ArrayOfST_GET_MODIFY_LIST_RETURN"))
				{	soap_flag_AdminGetModifyListResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminGetModifyListResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetModifyListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetModifyListResponse, 0, sizeof(_ns1__AdminGetModifyListResponse), 0, soap_copy__ns1__AdminGetModifyListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AdminGetModifyListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetModifyListResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetModifyListResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetModifyListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetModifyListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetModifyListResponse * SOAP_FMAC4 soap_get__ns1__AdminGetModifyListResponse(struct soap *soap, _ns1__AdminGetModifyListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetModifyListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetModifyListResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminGetModifyListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetModifyListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetModifyListResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetModifyListResponse);
		if (size)
			*size = sizeof(_ns1__AdminGetModifyListResponse);
		((_ns1__AdminGetModifyListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetModifyListResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetModifyListResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetModifyListResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetModifyListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetModifyListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetModifyListResponse %p -> %p\n", q, p));
	*(_ns1__AdminGetModifyListResponse*)p = *(_ns1__AdminGetModifyListResponse*)q;
}

void _ns1__AdminGetModifyList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminGetModifyList::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__AdminGetModifyList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(soap, &this->_ns1__AdminGetModifyList::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetModifyList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetModifyList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetModifyList(struct soap *soap, const char *tag, int id, const _ns1__AdminGetModifyList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetModifyList), type))
		return soap->error;
	if (a->_ns1__AdminGetModifyList::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__AdminGetModifyList::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetModifyList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetModifyList(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetModifyList * SOAP_FMAC4 soap_in__ns1__AdminGetModifyList(struct soap *soap, const char *tag, _ns1__AdminGetModifyList *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetModifyList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetModifyList, sizeof(_ns1__AdminGetModifyList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetModifyList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetModifyList *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__AdminGetModifyList::stQuery), "ns1:ST_GET_MODIFY_LIST_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetModifyList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetModifyList, 0, sizeof(_ns1__AdminGetModifyList), 0, soap_copy__ns1__AdminGetModifyList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminGetModifyList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetModifyList);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetModifyList", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetModifyList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetModifyList(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetModifyList * SOAP_FMAC4 soap_get__ns1__AdminGetModifyList(struct soap *soap, _ns1__AdminGetModifyList *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetModifyList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetModifyList * SOAP_FMAC2 soap_instantiate__ns1__AdminGetModifyList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetModifyList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetModifyList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetModifyList);
		if (size)
			*size = sizeof(_ns1__AdminGetModifyList);
		((_ns1__AdminGetModifyList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetModifyList, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetModifyList);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetModifyList*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetModifyList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetModifyList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetModifyList %p -> %p\n", q, p));
	*(_ns1__AdminGetModifyList*)p = *(_ns1__AdminGetModifyList*)q;
}

void _ns1__AdminGetReportFaultListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminGetReportFaultListResponse::AdminGetReportFaultListResult = NULL;
	/* transient soap skipped */
}

void _ns1__AdminGetReportFaultListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, &this->_ns1__AdminGetReportFaultListResponse::AdminGetReportFaultListResult);
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetReportFaultListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetReportFaultListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetReportFaultListResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminGetReportFaultListResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetReportFaultListResponse), type))
		return soap->error;
	if (a->AdminGetReportFaultListResult)
		soap_element_result(soap, "ns1:AdminGetReportFaultListResult");
	if (soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, "ns1:AdminGetReportFaultListResult", -1, &(a->_ns1__AdminGetReportFaultListResponse::AdminGetReportFaultListResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetReportFaultListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetReportFaultListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetReportFaultListResponse * SOAP_FMAC4 soap_in__ns1__AdminGetReportFaultListResponse(struct soap *soap, const char *tag, _ns1__AdminGetReportFaultListResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetReportFaultListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetReportFaultListResponse, sizeof(_ns1__AdminGetReportFaultListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetReportFaultListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetReportFaultListResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminGetReportFaultListResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminGetReportFaultListResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, "ns1:AdminGetReportFaultListResult", &(a->_ns1__AdminGetReportFaultListResponse::AdminGetReportFaultListResult), "ns1:ArrayOfST_GET_REPORTFAULT_LIST_RETURN"))
				{	soap_flag_AdminGetReportFaultListResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminGetReportFaultListResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetReportFaultListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetReportFaultListResponse, 0, sizeof(_ns1__AdminGetReportFaultListResponse), 0, soap_copy__ns1__AdminGetReportFaultListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AdminGetReportFaultListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetReportFaultListResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetReportFaultListResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetReportFaultListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetReportFaultListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetReportFaultListResponse * SOAP_FMAC4 soap_get__ns1__AdminGetReportFaultListResponse(struct soap *soap, _ns1__AdminGetReportFaultListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetReportFaultListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetReportFaultListResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminGetReportFaultListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetReportFaultListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetReportFaultListResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetReportFaultListResponse);
		if (size)
			*size = sizeof(_ns1__AdminGetReportFaultListResponse);
		((_ns1__AdminGetReportFaultListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetReportFaultListResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetReportFaultListResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetReportFaultListResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetReportFaultListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetReportFaultListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetReportFaultListResponse %p -> %p\n", q, p));
	*(_ns1__AdminGetReportFaultListResponse*)p = *(_ns1__AdminGetReportFaultListResponse*)q;
}

void _ns1__AdminGetReportFaultList::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__AdminGetReportFaultList::nIgnore);
	/* transient soap skipped */
}

void _ns1__AdminGetReportFaultList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetReportFaultList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetReportFaultList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetReportFaultList(struct soap *soap, const char *tag, int id, const _ns1__AdminGetReportFaultList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetReportFaultList), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:nIgnore", -1, &(a->_ns1__AdminGetReportFaultList::nIgnore), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetReportFaultList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetReportFaultList(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetReportFaultList * SOAP_FMAC4 soap_in__ns1__AdminGetReportFaultList(struct soap *soap, const char *tag, _ns1__AdminGetReportFaultList *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetReportFaultList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetReportFaultList, sizeof(_ns1__AdminGetReportFaultList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetReportFaultList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetReportFaultList *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nIgnore1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nIgnore1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nIgnore", &(a->_ns1__AdminGetReportFaultList::nIgnore), "xsd:int"))
				{	soap_flag_nIgnore1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetReportFaultList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetReportFaultList, 0, sizeof(_ns1__AdminGetReportFaultList), 0, soap_copy__ns1__AdminGetReportFaultList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nIgnore1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminGetReportFaultList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetReportFaultList);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetReportFaultList", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetReportFaultList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetReportFaultList(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetReportFaultList * SOAP_FMAC4 soap_get__ns1__AdminGetReportFaultList(struct soap *soap, _ns1__AdminGetReportFaultList *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetReportFaultList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetReportFaultList * SOAP_FMAC2 soap_instantiate__ns1__AdminGetReportFaultList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetReportFaultList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetReportFaultList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetReportFaultList);
		if (size)
			*size = sizeof(_ns1__AdminGetReportFaultList);
		((_ns1__AdminGetReportFaultList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetReportFaultList, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetReportFaultList);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetReportFaultList*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetReportFaultList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetReportFaultList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetReportFaultList %p -> %p\n", q, p));
	*(_ns1__AdminGetReportFaultList*)p = *(_ns1__AdminGetReportFaultList*)q;
}

void _ns1__AdminGetLyricListByIDResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminGetLyricListByIDResponse::AdminGetLyricListByIDResult = NULL;
	/* transient soap skipped */
}

void _ns1__AdminGetLyricListByIDResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, &this->_ns1__AdminGetLyricListByIDResponse::AdminGetLyricListByIDResult);
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetLyricListByIDResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetLyricListByIDResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetLyricListByIDResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminGetLyricListByIDResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetLyricListByIDResponse), type))
		return soap->error;
	if (a->AdminGetLyricListByIDResult)
		soap_element_result(soap, "ns1:AdminGetLyricListByIDResult");
	if (soap_out_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, "ns1:AdminGetLyricListByIDResult", -1, &(a->_ns1__AdminGetLyricListByIDResponse::AdminGetLyricListByIDResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetLyricListByIDResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetLyricListByIDResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetLyricListByIDResponse * SOAP_FMAC4 soap_in__ns1__AdminGetLyricListByIDResponse(struct soap *soap, const char *tag, _ns1__AdminGetLyricListByIDResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetLyricListByIDResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetLyricListByIDResponse, sizeof(_ns1__AdminGetLyricListByIDResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetLyricListByIDResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetLyricListByIDResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminGetLyricListByIDResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminGetLyricListByIDResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, "ns1:AdminGetLyricListByIDResult", &(a->_ns1__AdminGetLyricListByIDResponse::AdminGetLyricListByIDResult), "ns1:ArrayOfST_GET_LYRIC_LIST_RETURN"))
				{	soap_flag_AdminGetLyricListByIDResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminGetLyricListByIDResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetLyricListByIDResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetLyricListByIDResponse, 0, sizeof(_ns1__AdminGetLyricListByIDResponse), 0, soap_copy__ns1__AdminGetLyricListByIDResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AdminGetLyricListByIDResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetLyricListByIDResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetLyricListByIDResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetLyricListByIDResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetLyricListByIDResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetLyricListByIDResponse * SOAP_FMAC4 soap_get__ns1__AdminGetLyricListByIDResponse(struct soap *soap, _ns1__AdminGetLyricListByIDResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetLyricListByIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetLyricListByIDResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminGetLyricListByIDResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetLyricListByIDResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetLyricListByIDResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetLyricListByIDResponse);
		if (size)
			*size = sizeof(_ns1__AdminGetLyricListByIDResponse);
		((_ns1__AdminGetLyricListByIDResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetLyricListByIDResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetLyricListByIDResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetLyricListByIDResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetLyricListByIDResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetLyricListByIDResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetLyricListByIDResponse %p -> %p\n", q, p));
	*(_ns1__AdminGetLyricListByIDResponse*)p = *(_ns1__AdminGetLyricListByIDResponse*)q;
}

void _ns1__AdminGetLyricListByID::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__AdminGetLyricListByID::infoIDLo);
	soap_default_int(soap, &this->_ns1__AdminGetLyricListByID::infoIDHi);
	/* transient soap skipped */
}

void _ns1__AdminGetLyricListByID::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetLyricListByID::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetLyricListByID(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetLyricListByID(struct soap *soap, const char *tag, int id, const _ns1__AdminGetLyricListByID *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetLyricListByID), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:infoIDLo", -1, &(a->_ns1__AdminGetLyricListByID::infoIDLo), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:infoIDHi", -1, &(a->_ns1__AdminGetLyricListByID::infoIDHi), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetLyricListByID::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetLyricListByID(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetLyricListByID * SOAP_FMAC4 soap_in__ns1__AdminGetLyricListByID(struct soap *soap, const char *tag, _ns1__AdminGetLyricListByID *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetLyricListByID *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetLyricListByID, sizeof(_ns1__AdminGetLyricListByID), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetLyricListByID)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetLyricListByID *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_infoIDLo1 = 1;
	size_t soap_flag_infoIDHi1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_infoIDLo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:infoIDLo", &(a->_ns1__AdminGetLyricListByID::infoIDLo), "xsd:int"))
				{	soap_flag_infoIDLo1--;
					continue;
				}
			if (soap_flag_infoIDHi1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:infoIDHi", &(a->_ns1__AdminGetLyricListByID::infoIDHi), "xsd:int"))
				{	soap_flag_infoIDHi1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetLyricListByID *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetLyricListByID, 0, sizeof(_ns1__AdminGetLyricListByID), 0, soap_copy__ns1__AdminGetLyricListByID);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_infoIDLo1 > 0 || soap_flag_infoIDHi1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminGetLyricListByID::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetLyricListByID);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetLyricListByID", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetLyricListByID::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetLyricListByID(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetLyricListByID * SOAP_FMAC4 soap_get__ns1__AdminGetLyricListByID(struct soap *soap, _ns1__AdminGetLyricListByID *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetLyricListByID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetLyricListByID * SOAP_FMAC2 soap_instantiate__ns1__AdminGetLyricListByID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetLyricListByID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetLyricListByID, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetLyricListByID);
		if (size)
			*size = sizeof(_ns1__AdminGetLyricListByID);
		((_ns1__AdminGetLyricListByID*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetLyricListByID, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetLyricListByID);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetLyricListByID*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetLyricListByID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetLyricListByID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetLyricListByID %p -> %p\n", q, p));
	*(_ns1__AdminGetLyricListByID*)p = *(_ns1__AdminGetLyricListByID*)q;
}

void _ns1__AdminGetLyricListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminGetLyricListResponse::AdminGetLyricListResult = NULL;
	/* transient soap skipped */
}

void _ns1__AdminGetLyricListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, &this->_ns1__AdminGetLyricListResponse::AdminGetLyricListResult);
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetLyricListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetLyricListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetLyricListResponse(struct soap *soap, const char *tag, int id, const _ns1__AdminGetLyricListResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetLyricListResponse), type))
		return soap->error;
	if (a->AdminGetLyricListResult)
		soap_element_result(soap, "ns1:AdminGetLyricListResult");
	if (soap_out_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, "ns1:AdminGetLyricListResult", -1, &(a->_ns1__AdminGetLyricListResponse::AdminGetLyricListResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetLyricListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetLyricListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetLyricListResponse * SOAP_FMAC4 soap_in__ns1__AdminGetLyricListResponse(struct soap *soap, const char *tag, _ns1__AdminGetLyricListResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetLyricListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetLyricListResponse, sizeof(_ns1__AdminGetLyricListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetLyricListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetLyricListResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AdminGetLyricListResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdminGetLyricListResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, "ns1:AdminGetLyricListResult", &(a->_ns1__AdminGetLyricListResponse::AdminGetLyricListResult), "ns1:ArrayOfST_GET_LYRIC_LIST_RETURN"))
				{	soap_flag_AdminGetLyricListResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AdminGetLyricListResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetLyricListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetLyricListResponse, 0, sizeof(_ns1__AdminGetLyricListResponse), 0, soap_copy__ns1__AdminGetLyricListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AdminGetLyricListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetLyricListResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetLyricListResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetLyricListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetLyricListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetLyricListResponse * SOAP_FMAC4 soap_get__ns1__AdminGetLyricListResponse(struct soap *soap, _ns1__AdminGetLyricListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetLyricListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetLyricListResponse * SOAP_FMAC2 soap_instantiate__ns1__AdminGetLyricListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetLyricListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetLyricListResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetLyricListResponse);
		if (size)
			*size = sizeof(_ns1__AdminGetLyricListResponse);
		((_ns1__AdminGetLyricListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetLyricListResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetLyricListResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetLyricListResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetLyricListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetLyricListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetLyricListResponse %p -> %p\n", q, p));
	*(_ns1__AdminGetLyricListResponse*)p = *(_ns1__AdminGetLyricListResponse*)q;
}

void _ns1__AdminGetLyricList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AdminGetLyricList::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__AdminGetLyricList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(soap, &this->_ns1__AdminGetLyricList::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__AdminGetLyricList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AdminGetLyricList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AdminGetLyricList(struct soap *soap, const char *tag, int id, const _ns1__AdminGetLyricList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AdminGetLyricList), type))
		return soap->error;
	if (a->_ns1__AdminGetLyricList::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__AdminGetLyricList::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AdminGetLyricList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AdminGetLyricList(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AdminGetLyricList * SOAP_FMAC4 soap_in__ns1__AdminGetLyricList(struct soap *soap, const char *tag, _ns1__AdminGetLyricList *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AdminGetLyricList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AdminGetLyricList, sizeof(_ns1__AdminGetLyricList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AdminGetLyricList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AdminGetLyricList *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__AdminGetLyricList::stQuery), "ns1:ST_GET_LYRIC_LIST_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AdminGetLyricList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AdminGetLyricList, 0, sizeof(_ns1__AdminGetLyricList), 0, soap_copy__ns1__AdminGetLyricList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__AdminGetLyricList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AdminGetLyricList);
	if (this->soap_out(soap, tag?tag:"ns1:AdminGetLyricList", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AdminGetLyricList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AdminGetLyricList(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AdminGetLyricList * SOAP_FMAC4 soap_get__ns1__AdminGetLyricList(struct soap *soap, _ns1__AdminGetLyricList *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AdminGetLyricList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AdminGetLyricList * SOAP_FMAC2 soap_instantiate__ns1__AdminGetLyricList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AdminGetLyricList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AdminGetLyricList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AdminGetLyricList);
		if (size)
			*size = sizeof(_ns1__AdminGetLyricList);
		((_ns1__AdminGetLyricList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AdminGetLyricList, n);
		if (size)
			*size = n * sizeof(_ns1__AdminGetLyricList);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AdminGetLyricList*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AdminGetLyricList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AdminGetLyricList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AdminGetLyricList %p -> %p\n", q, p));
	*(_ns1__AdminGetLyricList*)p = *(_ns1__AdminGetLyricList*)q;
}

void _ns1__GetSongIDResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetSongIDResponse::GetSongIDResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetSongIDResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetSongIDResponse::GetSongIDResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetSongIDResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetSongIDResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSongIDResponse(struct soap *soap, const char *tag, int id, const _ns1__GetSongIDResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetSongIDResponse), type))
		return soap->error;
	if (a->GetSongIDResult)
		soap_element_result(soap, "ns1:GetSongIDResult");
	if (soap_out_PointerTostd__string(soap, "ns1:GetSongIDResult", -1, &(a->_ns1__GetSongIDResponse::GetSongIDResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetSongIDResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetSongIDResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetSongIDResponse * SOAP_FMAC4 soap_in__ns1__GetSongIDResponse(struct soap *soap, const char *tag, _ns1__GetSongIDResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetSongIDResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetSongIDResponse, sizeof(_ns1__GetSongIDResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetSongIDResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetSongIDResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetSongIDResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetSongIDResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:GetSongIDResult", &(a->_ns1__GetSongIDResponse::GetSongIDResult), "xsd:string"))
				{	soap_flag_GetSongIDResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetSongIDResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetSongIDResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetSongIDResponse, 0, sizeof(_ns1__GetSongIDResponse), 0, soap_copy__ns1__GetSongIDResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetSongIDResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetSongIDResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetSongIDResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetSongIDResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetSongIDResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetSongIDResponse * SOAP_FMAC4 soap_get__ns1__GetSongIDResponse(struct soap *soap, _ns1__GetSongIDResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetSongIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetSongIDResponse * SOAP_FMAC2 soap_instantiate__ns1__GetSongIDResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetSongIDResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetSongIDResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetSongIDResponse);
		if (size)
			*size = sizeof(_ns1__GetSongIDResponse);
		((_ns1__GetSongIDResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetSongIDResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetSongIDResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetSongIDResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetSongIDResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetSongIDResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetSongIDResponse %p -> %p\n", q, p));
	*(_ns1__GetSongIDResponse*)p = *(_ns1__GetSongIDResponse*)q;
}

void _ns1__GetSongID::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetSongID::encData = NULL;
	this->_ns1__GetSongID::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__GetSongID::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetSongID::encData);
	soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, &this->_ns1__GetSongID::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__GetSongID::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetSongID(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSongID(struct soap *soap, const char *tag, int id, const _ns1__GetSongID *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetSongID), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:encData", -1, &(a->_ns1__GetSongID::encData), ""))
		return soap->error;
	if (a->_ns1__GetSongID::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__GetSongID::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetSongID::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetSongID(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetSongID * SOAP_FMAC4 soap_in__ns1__GetSongID(struct soap *soap, const char *tag, _ns1__GetSongID *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetSongID *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetSongID, sizeof(_ns1__GetSongID), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetSongID)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetSongID *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_encData1 = 1;
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_encData1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:encData", &(a->_ns1__GetSongID::encData), "xsd:string"))
				{	soap_flag_encData1--;
					continue;
				}
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__GetSongID::stQuery), "ns1:ST_GET_LYRIC5_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetSongID *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetSongID, 0, sizeof(_ns1__GetSongID), 0, soap_copy__ns1__GetSongID);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetSongID::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetSongID);
	if (this->soap_out(soap, tag?tag:"ns1:GetSongID", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetSongID::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetSongID(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetSongID * SOAP_FMAC4 soap_get__ns1__GetSongID(struct soap *soap, _ns1__GetSongID *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetSongID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetSongID * SOAP_FMAC2 soap_instantiate__ns1__GetSongID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetSongID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetSongID, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetSongID);
		if (size)
			*size = sizeof(_ns1__GetSongID);
		((_ns1__GetSongID*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetSongID, n);
		if (size)
			*size = n * sizeof(_ns1__GetSongID);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetSongID*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetSongID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetSongID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetSongID %p -> %p\n", q, p));
	*(_ns1__GetSongID*)p = *(_ns1__GetSongID*)q;
}

void _ns1__GetLyric8Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetLyric8Response::GetLyric8Result = NULL;
	/* transient soap skipped */
}

void _ns1__GetLyric8Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, &this->_ns1__GetLyric8Response::GetLyric8Result);
	/* transient soap skipped */
#endif
}

int _ns1__GetLyric8Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLyric8Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLyric8Response(struct soap *soap, const char *tag, int id, const _ns1__GetLyric8Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLyric8Response), type))
		return soap->error;
	if (a->GetLyric8Result)
		soap_element_result(soap, "ns1:GetLyric8Result");
	if (a->_ns1__GetLyric8Response::GetLyric8Result)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, "ns1:GetLyric8Result", -1, &a->_ns1__GetLyric8Response::GetLyric8Result, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:GetLyric8Result"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLyric8Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLyric8Response(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLyric8Response * SOAP_FMAC4 soap_in__ns1__GetLyric8Response(struct soap *soap, const char *tag, _ns1__GetLyric8Response *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLyric8Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLyric8Response, sizeof(_ns1__GetLyric8Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLyric8Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLyric8Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetLyric8Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetLyric8Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, "ns1:GetLyric8Result", &(a->_ns1__GetLyric8Response::GetLyric8Result), "ns1:ST_GET_LYRIC5_RETURN"))
				{	soap_flag_GetLyric8Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetLyric8Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLyric8Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLyric8Response, 0, sizeof(_ns1__GetLyric8Response), 0, soap_copy__ns1__GetLyric8Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetLyric8Result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetLyric8Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLyric8Response);
	if (this->soap_out(soap, tag?tag:"ns1:GetLyric8Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLyric8Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLyric8Response(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLyric8Response * SOAP_FMAC4 soap_get__ns1__GetLyric8Response(struct soap *soap, _ns1__GetLyric8Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLyric8Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLyric8Response * SOAP_FMAC2 soap_instantiate__ns1__GetLyric8Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLyric8Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLyric8Response, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetLyric8Response);
		if (size)
			*size = sizeof(_ns1__GetLyric8Response);
		((_ns1__GetLyric8Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetLyric8Response, n);
		if (size)
			*size = n * sizeof(_ns1__GetLyric8Response);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLyric8Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLyric8Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLyric8Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLyric8Response %p -> %p\n", q, p));
	*(_ns1__GetLyric8Response*)p = *(_ns1__GetLyric8Response*)q;
}

void _ns1__GetLyric8::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetLyric8::encData = NULL;
	this->_ns1__GetLyric8::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__GetLyric8::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetLyric8::encData);
	soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, &this->_ns1__GetLyric8::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__GetLyric8::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLyric8(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLyric8(struct soap *soap, const char *tag, int id, const _ns1__GetLyric8 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLyric8), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:encData", -1, &(a->_ns1__GetLyric8::encData), ""))
		return soap->error;
	if (a->_ns1__GetLyric8::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__GetLyric8::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLyric8::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLyric8(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLyric8 * SOAP_FMAC4 soap_in__ns1__GetLyric8(struct soap *soap, const char *tag, _ns1__GetLyric8 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLyric8 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLyric8, sizeof(_ns1__GetLyric8), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLyric8)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLyric8 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_encData1 = 1;
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_encData1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:encData", &(a->_ns1__GetLyric8::encData), "xsd:string"))
				{	soap_flag_encData1--;
					continue;
				}
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__GetLyric8::stQuery), "ns1:ST_GET_LYRIC5_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLyric8 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLyric8, 0, sizeof(_ns1__GetLyric8), 0, soap_copy__ns1__GetLyric8);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetLyric8::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLyric8);
	if (this->soap_out(soap, tag?tag:"ns1:GetLyric8", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLyric8::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLyric8(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLyric8 * SOAP_FMAC4 soap_get__ns1__GetLyric8(struct soap *soap, _ns1__GetLyric8 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLyric8(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLyric8 * SOAP_FMAC2 soap_instantiate__ns1__GetLyric8(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLyric8(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLyric8, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetLyric8);
		if (size)
			*size = sizeof(_ns1__GetLyric8);
		((_ns1__GetLyric8*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetLyric8, n);
		if (size)
			*size = n * sizeof(_ns1__GetLyric8);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLyric8*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLyric8*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLyric8(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLyric8 %p -> %p\n", q, p));
	*(_ns1__GetLyric8*)p = *(_ns1__GetLyric8*)q;
}

void _ns1__GetLyric7Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetLyric7Response::GetLyric7Result = NULL;
	/* transient soap skipped */
}

void _ns1__GetLyric7Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, &this->_ns1__GetLyric7Response::GetLyric7Result);
	/* transient soap skipped */
#endif
}

int _ns1__GetLyric7Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLyric7Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLyric7Response(struct soap *soap, const char *tag, int id, const _ns1__GetLyric7Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLyric7Response), type))
		return soap->error;
	if (a->GetLyric7Result)
		soap_element_result(soap, "ns1:GetLyric7Result");
	if (a->_ns1__GetLyric7Response::GetLyric7Result)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, "ns1:GetLyric7Result", -1, &a->_ns1__GetLyric7Response::GetLyric7Result, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:GetLyric7Result"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLyric7Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLyric7Response(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLyric7Response * SOAP_FMAC4 soap_in__ns1__GetLyric7Response(struct soap *soap, const char *tag, _ns1__GetLyric7Response *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLyric7Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLyric7Response, sizeof(_ns1__GetLyric7Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLyric7Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLyric7Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetLyric7Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetLyric7Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, "ns1:GetLyric7Result", &(a->_ns1__GetLyric7Response::GetLyric7Result), "ns1:ST_GET_LYRIC5_RETURN"))
				{	soap_flag_GetLyric7Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetLyric7Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLyric7Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLyric7Response, 0, sizeof(_ns1__GetLyric7Response), 0, soap_copy__ns1__GetLyric7Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetLyric7Result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetLyric7Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLyric7Response);
	if (this->soap_out(soap, tag?tag:"ns1:GetLyric7Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLyric7Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLyric7Response(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLyric7Response * SOAP_FMAC4 soap_get__ns1__GetLyric7Response(struct soap *soap, _ns1__GetLyric7Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLyric7Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLyric7Response * SOAP_FMAC2 soap_instantiate__ns1__GetLyric7Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLyric7Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLyric7Response, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetLyric7Response);
		if (size)
			*size = sizeof(_ns1__GetLyric7Response);
		((_ns1__GetLyric7Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetLyric7Response, n);
		if (size)
			*size = n * sizeof(_ns1__GetLyric7Response);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLyric7Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLyric7Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLyric7Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLyric7Response %p -> %p\n", q, p));
	*(_ns1__GetLyric7Response*)p = *(_ns1__GetLyric7Response*)q;
}

void _ns1__GetLyric7::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetLyric7::encData = NULL;
	this->_ns1__GetLyric7::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__GetLyric7::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetLyric7::encData);
	soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, &this->_ns1__GetLyric7::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__GetLyric7::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLyric7(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLyric7(struct soap *soap, const char *tag, int id, const _ns1__GetLyric7 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLyric7), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:encData", -1, &(a->_ns1__GetLyric7::encData), ""))
		return soap->error;
	if (a->_ns1__GetLyric7::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__GetLyric7::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLyric7::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLyric7(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLyric7 * SOAP_FMAC4 soap_in__ns1__GetLyric7(struct soap *soap, const char *tag, _ns1__GetLyric7 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLyric7 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLyric7, sizeof(_ns1__GetLyric7), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLyric7)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLyric7 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_encData1 = 1;
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_encData1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:encData", &(a->_ns1__GetLyric7::encData), "xsd:string"))
				{	soap_flag_encData1--;
					continue;
				}
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__GetLyric7::stQuery), "ns1:ST_GET_LYRIC5_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLyric7 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLyric7, 0, sizeof(_ns1__GetLyric7), 0, soap_copy__ns1__GetLyric7);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetLyric7::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLyric7);
	if (this->soap_out(soap, tag?tag:"ns1:GetLyric7", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLyric7::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLyric7(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLyric7 * SOAP_FMAC4 soap_get__ns1__GetLyric7(struct soap *soap, _ns1__GetLyric7 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLyric7(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLyric7 * SOAP_FMAC2 soap_instantiate__ns1__GetLyric7(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLyric7(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLyric7, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetLyric7);
		if (size)
			*size = sizeof(_ns1__GetLyric7);
		((_ns1__GetLyric7*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetLyric7, n);
		if (size)
			*size = n * sizeof(_ns1__GetLyric7);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLyric7*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLyric7*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLyric7(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLyric7 %p -> %p\n", q, p));
	*(_ns1__GetLyric7*)p = *(_ns1__GetLyric7*)q;
}

void _ns1__GetLyric6Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetLyric6Response::GetLyric6Result = NULL;
	soap_default_bool(soap, &this->_ns1__GetLyric6Response::requestAudioInfo);
	/* transient soap skipped */
}

void _ns1__GetLyric6Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, &this->_ns1__GetLyric6Response::GetLyric6Result);
	/* transient soap skipped */
#endif
}

int _ns1__GetLyric6Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLyric6Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLyric6Response(struct soap *soap, const char *tag, int id, const _ns1__GetLyric6Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLyric6Response), type))
		return soap->error;
	if (a->GetLyric6Result)
		soap_element_result(soap, "ns1:GetLyric6Result");
	if (a->_ns1__GetLyric6Response::GetLyric6Result)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, "ns1:GetLyric6Result", -1, &a->_ns1__GetLyric6Response::GetLyric6Result, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:GetLyric6Result"))
		return soap->error;
	if (soap_out_bool(soap, "ns1:requestAudioInfo", -1, &(a->_ns1__GetLyric6Response::requestAudioInfo), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLyric6Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLyric6Response(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLyric6Response * SOAP_FMAC4 soap_in__ns1__GetLyric6Response(struct soap *soap, const char *tag, _ns1__GetLyric6Response *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLyric6Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLyric6Response, sizeof(_ns1__GetLyric6Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLyric6Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLyric6Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetLyric6Result1 = 1;
	size_t soap_flag_requestAudioInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetLyric6Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, "ns1:GetLyric6Result", &(a->_ns1__GetLyric6Response::GetLyric6Result), "ns1:ST_GET_LYRIC5_RETURN"))
				{	soap_flag_GetLyric6Result1--;
					continue;
				}
			if (soap_flag_requestAudioInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:requestAudioInfo", &(a->_ns1__GetLyric6Response::requestAudioInfo), "xsd:boolean"))
				{	soap_flag_requestAudioInfo1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetLyric6Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLyric6Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLyric6Response, 0, sizeof(_ns1__GetLyric6Response), 0, soap_copy__ns1__GetLyric6Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetLyric6Result1 > 0 || soap_flag_requestAudioInfo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetLyric6Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLyric6Response);
	if (this->soap_out(soap, tag?tag:"ns1:GetLyric6Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLyric6Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLyric6Response(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLyric6Response * SOAP_FMAC4 soap_get__ns1__GetLyric6Response(struct soap *soap, _ns1__GetLyric6Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLyric6Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLyric6Response * SOAP_FMAC2 soap_instantiate__ns1__GetLyric6Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLyric6Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLyric6Response, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetLyric6Response);
		if (size)
			*size = sizeof(_ns1__GetLyric6Response);
		((_ns1__GetLyric6Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetLyric6Response, n);
		if (size)
			*size = n * sizeof(_ns1__GetLyric6Response);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLyric6Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLyric6Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLyric6Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLyric6Response %p -> %p\n", q, p));
	*(_ns1__GetLyric6Response*)p = *(_ns1__GetLyric6Response*)q;
}

void _ns1__GetLyric6::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetLyric6::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__GetLyric6::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, &this->_ns1__GetLyric6::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__GetLyric6::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLyric6(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLyric6(struct soap *soap, const char *tag, int id, const _ns1__GetLyric6 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLyric6), type))
		return soap->error;
	if (a->_ns1__GetLyric6::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__GetLyric6::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLyric6::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLyric6(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLyric6 * SOAP_FMAC4 soap_in__ns1__GetLyric6(struct soap *soap, const char *tag, _ns1__GetLyric6 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLyric6 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLyric6, sizeof(_ns1__GetLyric6), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLyric6)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLyric6 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__GetLyric6::stQuery), "ns1:ST_GET_LYRIC5_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLyric6 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLyric6, 0, sizeof(_ns1__GetLyric6), 0, soap_copy__ns1__GetLyric6);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetLyric6::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLyric6);
	if (this->soap_out(soap, tag?tag:"ns1:GetLyric6", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLyric6::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLyric6(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLyric6 * SOAP_FMAC4 soap_get__ns1__GetLyric6(struct soap *soap, _ns1__GetLyric6 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLyric6(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLyric6 * SOAP_FMAC2 soap_instantiate__ns1__GetLyric6(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLyric6(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLyric6, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetLyric6);
		if (size)
			*size = sizeof(_ns1__GetLyric6);
		((_ns1__GetLyric6*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetLyric6, n);
		if (size)
			*size = n * sizeof(_ns1__GetLyric6);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLyric6*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLyric6*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLyric6(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLyric6 %p -> %p\n", q, p));
	*(_ns1__GetLyric6*)p = *(_ns1__GetLyric6*)q;
}

void _ns1__GetLyric5Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetLyric5Response::GetLyric5Result = NULL;
	/* transient soap skipped */
}

void _ns1__GetLyric5Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, &this->_ns1__GetLyric5Response::GetLyric5Result);
	/* transient soap skipped */
#endif
}

int _ns1__GetLyric5Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLyric5Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLyric5Response(struct soap *soap, const char *tag, int id, const _ns1__GetLyric5Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLyric5Response), type))
		return soap->error;
	if (a->GetLyric5Result)
		soap_element_result(soap, "ns1:GetLyric5Result");
	if (a->_ns1__GetLyric5Response::GetLyric5Result)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, "ns1:GetLyric5Result", -1, &a->_ns1__GetLyric5Response::GetLyric5Result, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:GetLyric5Result"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLyric5Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLyric5Response(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLyric5Response * SOAP_FMAC4 soap_in__ns1__GetLyric5Response(struct soap *soap, const char *tag, _ns1__GetLyric5Response *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLyric5Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLyric5Response, sizeof(_ns1__GetLyric5Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLyric5Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLyric5Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetLyric5Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetLyric5Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, "ns1:GetLyric5Result", &(a->_ns1__GetLyric5Response::GetLyric5Result), "ns1:ST_GET_LYRIC5_RETURN"))
				{	soap_flag_GetLyric5Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetLyric5Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLyric5Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLyric5Response, 0, sizeof(_ns1__GetLyric5Response), 0, soap_copy__ns1__GetLyric5Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetLyric5Result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetLyric5Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLyric5Response);
	if (this->soap_out(soap, tag?tag:"ns1:GetLyric5Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLyric5Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLyric5Response(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLyric5Response * SOAP_FMAC4 soap_get__ns1__GetLyric5Response(struct soap *soap, _ns1__GetLyric5Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLyric5Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLyric5Response * SOAP_FMAC2 soap_instantiate__ns1__GetLyric5Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLyric5Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLyric5Response, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetLyric5Response);
		if (size)
			*size = sizeof(_ns1__GetLyric5Response);
		((_ns1__GetLyric5Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetLyric5Response, n);
		if (size)
			*size = n * sizeof(_ns1__GetLyric5Response);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLyric5Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLyric5Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLyric5Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLyric5Response %p -> %p\n", q, p));
	*(_ns1__GetLyric5Response*)p = *(_ns1__GetLyric5Response*)q;
}

void _ns1__GetLyric5::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetLyric5::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__GetLyric5::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, &this->_ns1__GetLyric5::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__GetLyric5::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLyric5(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLyric5(struct soap *soap, const char *tag, int id, const _ns1__GetLyric5 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLyric5), type))
		return soap->error;
	if (a->_ns1__GetLyric5::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__GetLyric5::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLyric5::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLyric5(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLyric5 * SOAP_FMAC4 soap_in__ns1__GetLyric5(struct soap *soap, const char *tag, _ns1__GetLyric5 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLyric5 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLyric5, sizeof(_ns1__GetLyric5), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLyric5)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLyric5 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__GetLyric5::stQuery), "ns1:ST_GET_LYRIC5_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLyric5 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLyric5, 0, sizeof(_ns1__GetLyric5), 0, soap_copy__ns1__GetLyric5);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetLyric5::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLyric5);
	if (this->soap_out(soap, tag?tag:"ns1:GetLyric5", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLyric5::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLyric5(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLyric5 * SOAP_FMAC4 soap_get__ns1__GetLyric5(struct soap *soap, _ns1__GetLyric5 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLyric5(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLyric5 * SOAP_FMAC2 soap_instantiate__ns1__GetLyric5(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLyric5(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLyric5, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetLyric5);
		if (size)
			*size = sizeof(_ns1__GetLyric5);
		((_ns1__GetLyric5*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetLyric5, n);
		if (size)
			*size = n * sizeof(_ns1__GetLyric5);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLyric5*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLyric5*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLyric5(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLyric5 %p -> %p\n", q, p));
	*(_ns1__GetLyric5*)p = *(_ns1__GetLyric5*)q;
}

void _ns1__GetLyric4Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetLyric4Response::GetLyric4Result = NULL;
	/* transient soap skipped */
}

void _ns1__GetLyric4Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(soap, &this->_ns1__GetLyric4Response::GetLyric4Result);
	/* transient soap skipped */
#endif
}

int _ns1__GetLyric4Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLyric4Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLyric4Response(struct soap *soap, const char *tag, int id, const _ns1__GetLyric4Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLyric4Response), type))
		return soap->error;
	if (a->GetLyric4Result)
		soap_element_result(soap, "ns1:GetLyric4Result");
	if (a->_ns1__GetLyric4Response::GetLyric4Result)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(soap, "ns1:GetLyric4Result", -1, &a->_ns1__GetLyric4Response::GetLyric4Result, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:GetLyric4Result"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLyric4Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLyric4Response(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLyric4Response * SOAP_FMAC4 soap_in__ns1__GetLyric4Response(struct soap *soap, const char *tag, _ns1__GetLyric4Response *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLyric4Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLyric4Response, sizeof(_ns1__GetLyric4Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLyric4Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLyric4Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetLyric4Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetLyric4Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(soap, "ns1:GetLyric4Result", &(a->_ns1__GetLyric4Response::GetLyric4Result), "ns1:ST_GET_LYRIC4_RETURN"))
				{	soap_flag_GetLyric4Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetLyric4Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLyric4Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLyric4Response, 0, sizeof(_ns1__GetLyric4Response), 0, soap_copy__ns1__GetLyric4Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetLyric4Result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetLyric4Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLyric4Response);
	if (this->soap_out(soap, tag?tag:"ns1:GetLyric4Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLyric4Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLyric4Response(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLyric4Response * SOAP_FMAC4 soap_get__ns1__GetLyric4Response(struct soap *soap, _ns1__GetLyric4Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLyric4Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLyric4Response * SOAP_FMAC2 soap_instantiate__ns1__GetLyric4Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLyric4Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLyric4Response, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetLyric4Response);
		if (size)
			*size = sizeof(_ns1__GetLyric4Response);
		((_ns1__GetLyric4Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetLyric4Response, n);
		if (size)
			*size = n * sizeof(_ns1__GetLyric4Response);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLyric4Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLyric4Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLyric4Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLyric4Response %p -> %p\n", q, p));
	*(_ns1__GetLyric4Response*)p = *(_ns1__GetLyric4Response*)q;
}

void _ns1__GetLyric4::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetLyric4::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__GetLyric4::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(soap, &this->_ns1__GetLyric4::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__GetLyric4::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLyric4(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLyric4(struct soap *soap, const char *tag, int id, const _ns1__GetLyric4 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLyric4), type))
		return soap->error;
	if (a->_ns1__GetLyric4::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__GetLyric4::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLyric4::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLyric4(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLyric4 * SOAP_FMAC4 soap_in__ns1__GetLyric4(struct soap *soap, const char *tag, _ns1__GetLyric4 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLyric4 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLyric4, sizeof(_ns1__GetLyric4), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLyric4)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLyric4 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__GetLyric4::stQuery), "ns1:ST_GET_LYRIC4_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLyric4 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLyric4, 0, sizeof(_ns1__GetLyric4), 0, soap_copy__ns1__GetLyric4);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetLyric4::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLyric4);
	if (this->soap_out(soap, tag?tag:"ns1:GetLyric4", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLyric4::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLyric4(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLyric4 * SOAP_FMAC4 soap_get__ns1__GetLyric4(struct soap *soap, _ns1__GetLyric4 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLyric4(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLyric4 * SOAP_FMAC2 soap_instantiate__ns1__GetLyric4(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLyric4(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLyric4, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetLyric4);
		if (size)
			*size = sizeof(_ns1__GetLyric4);
		((_ns1__GetLyric4*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetLyric4, n);
		if (size)
			*size = n * sizeof(_ns1__GetLyric4);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLyric4*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLyric4*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLyric4(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLyric4 %p -> %p\n", q, p));
	*(_ns1__GetLyric4*)p = *(_ns1__GetLyric4*)q;
}

void _ns1__GetLyric3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetLyric3Response::GetLyric3Result = NULL;
	/* transient soap skipped */
}

void _ns1__GetLyric3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(soap, &this->_ns1__GetLyric3Response::GetLyric3Result);
	/* transient soap skipped */
#endif
}

int _ns1__GetLyric3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLyric3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLyric3Response(struct soap *soap, const char *tag, int id, const _ns1__GetLyric3Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLyric3Response), type))
		return soap->error;
	if (a->GetLyric3Result)
		soap_element_result(soap, "ns1:GetLyric3Result");
	if (a->_ns1__GetLyric3Response::GetLyric3Result)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(soap, "ns1:GetLyric3Result", -1, &a->_ns1__GetLyric3Response::GetLyric3Result, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:GetLyric3Result"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLyric3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLyric3Response(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLyric3Response * SOAP_FMAC4 soap_in__ns1__GetLyric3Response(struct soap *soap, const char *tag, _ns1__GetLyric3Response *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLyric3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLyric3Response, sizeof(_ns1__GetLyric3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLyric3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLyric3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetLyric3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetLyric3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(soap, "ns1:GetLyric3Result", &(a->_ns1__GetLyric3Response::GetLyric3Result), "ns1:ST_GET_LYRIC3_RETURN"))
				{	soap_flag_GetLyric3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetLyric3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLyric3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLyric3Response, 0, sizeof(_ns1__GetLyric3Response), 0, soap_copy__ns1__GetLyric3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetLyric3Result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetLyric3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLyric3Response);
	if (this->soap_out(soap, tag?tag:"ns1:GetLyric3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLyric3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLyric3Response(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLyric3Response * SOAP_FMAC4 soap_get__ns1__GetLyric3Response(struct soap *soap, _ns1__GetLyric3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLyric3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLyric3Response * SOAP_FMAC2 soap_instantiate__ns1__GetLyric3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLyric3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLyric3Response, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetLyric3Response);
		if (size)
			*size = sizeof(_ns1__GetLyric3Response);
		((_ns1__GetLyric3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetLyric3Response, n);
		if (size)
			*size = n * sizeof(_ns1__GetLyric3Response);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLyric3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLyric3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLyric3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLyric3Response %p -> %p\n", q, p));
	*(_ns1__GetLyric3Response*)p = *(_ns1__GetLyric3Response*)q;
}

void _ns1__GetLyric3::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetLyric3::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__GetLyric3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(soap, &this->_ns1__GetLyric3::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__GetLyric3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLyric3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLyric3(struct soap *soap, const char *tag, int id, const _ns1__GetLyric3 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLyric3), type))
		return soap->error;
	if (a->_ns1__GetLyric3::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__GetLyric3::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLyric3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLyric3(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLyric3 * SOAP_FMAC4 soap_in__ns1__GetLyric3(struct soap *soap, const char *tag, _ns1__GetLyric3 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLyric3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLyric3, sizeof(_ns1__GetLyric3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLyric3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLyric3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__GetLyric3::stQuery), "ns1:ST_GET_LYRIC3_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLyric3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLyric3, 0, sizeof(_ns1__GetLyric3), 0, soap_copy__ns1__GetLyric3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetLyric3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLyric3);
	if (this->soap_out(soap, tag?tag:"ns1:GetLyric3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLyric3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLyric3(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLyric3 * SOAP_FMAC4 soap_get__ns1__GetLyric3(struct soap *soap, _ns1__GetLyric3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLyric3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLyric3 * SOAP_FMAC2 soap_instantiate__ns1__GetLyric3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLyric3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLyric3, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetLyric3);
		if (size)
			*size = sizeof(_ns1__GetLyric3);
		((_ns1__GetLyric3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetLyric3, n);
		if (size)
			*size = n * sizeof(_ns1__GetLyric3);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLyric3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLyric3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLyric3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLyric3 %p -> %p\n", q, p));
	*(_ns1__GetLyric3*)p = *(_ns1__GetLyric3*)q;
}

void _ns1__IsReportedFaultLyricResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__IsReportedFaultLyricResponse::IsReportedFaultLyricResult = NULL;
	/* transient soap skipped */
}

void _ns1__IsReportedFaultLyricResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__IsReportedFaultLyricResponse::IsReportedFaultLyricResult);
	/* transient soap skipped */
#endif
}

int _ns1__IsReportedFaultLyricResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__IsReportedFaultLyricResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__IsReportedFaultLyricResponse(struct soap *soap, const char *tag, int id, const _ns1__IsReportedFaultLyricResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__IsReportedFaultLyricResponse), type))
		return soap->error;
	if (a->IsReportedFaultLyricResult)
		soap_element_result(soap, "ns1:IsReportedFaultLyricResult");
	if (soap_out_PointerTostd__string(soap, "ns1:IsReportedFaultLyricResult", -1, &(a->_ns1__IsReportedFaultLyricResponse::IsReportedFaultLyricResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__IsReportedFaultLyricResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__IsReportedFaultLyricResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__IsReportedFaultLyricResponse * SOAP_FMAC4 soap_in__ns1__IsReportedFaultLyricResponse(struct soap *soap, const char *tag, _ns1__IsReportedFaultLyricResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__IsReportedFaultLyricResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__IsReportedFaultLyricResponse, sizeof(_ns1__IsReportedFaultLyricResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__IsReportedFaultLyricResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__IsReportedFaultLyricResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_IsReportedFaultLyricResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_IsReportedFaultLyricResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:IsReportedFaultLyricResult", &(a->_ns1__IsReportedFaultLyricResponse::IsReportedFaultLyricResult), "xsd:string"))
				{	soap_flag_IsReportedFaultLyricResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:IsReportedFaultLyricResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__IsReportedFaultLyricResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__IsReportedFaultLyricResponse, 0, sizeof(_ns1__IsReportedFaultLyricResponse), 0, soap_copy__ns1__IsReportedFaultLyricResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__IsReportedFaultLyricResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__IsReportedFaultLyricResponse);
	if (this->soap_out(soap, tag?tag:"ns1:IsReportedFaultLyricResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__IsReportedFaultLyricResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__IsReportedFaultLyricResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__IsReportedFaultLyricResponse * SOAP_FMAC4 soap_get__ns1__IsReportedFaultLyricResponse(struct soap *soap, _ns1__IsReportedFaultLyricResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__IsReportedFaultLyricResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__IsReportedFaultLyricResponse * SOAP_FMAC2 soap_instantiate__ns1__IsReportedFaultLyricResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__IsReportedFaultLyricResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__IsReportedFaultLyricResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__IsReportedFaultLyricResponse);
		if (size)
			*size = sizeof(_ns1__IsReportedFaultLyricResponse);
		((_ns1__IsReportedFaultLyricResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__IsReportedFaultLyricResponse, n);
		if (size)
			*size = n * sizeof(_ns1__IsReportedFaultLyricResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__IsReportedFaultLyricResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__IsReportedFaultLyricResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__IsReportedFaultLyricResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__IsReportedFaultLyricResponse %p -> %p\n", q, p));
	*(_ns1__IsReportedFaultLyricResponse*)p = *(_ns1__IsReportedFaultLyricResponse*)q;
}

void _ns1__IsReportedFaultLyric::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__IsReportedFaultLyric::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__IsReportedFaultLyric::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(soap, &this->_ns1__IsReportedFaultLyric::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__IsReportedFaultLyric::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__IsReportedFaultLyric(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__IsReportedFaultLyric(struct soap *soap, const char *tag, int id, const _ns1__IsReportedFaultLyric *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__IsReportedFaultLyric), type))
		return soap->error;
	if (a->_ns1__IsReportedFaultLyric::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__IsReportedFaultLyric::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__IsReportedFaultLyric::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__IsReportedFaultLyric(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__IsReportedFaultLyric * SOAP_FMAC4 soap_in__ns1__IsReportedFaultLyric(struct soap *soap, const char *tag, _ns1__IsReportedFaultLyric *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__IsReportedFaultLyric *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__IsReportedFaultLyric, sizeof(_ns1__IsReportedFaultLyric), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__IsReportedFaultLyric)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__IsReportedFaultLyric *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__IsReportedFaultLyric::stQuery), "ns1:ST_IS_REPORTED_FAULT_LYRIC_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__IsReportedFaultLyric *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__IsReportedFaultLyric, 0, sizeof(_ns1__IsReportedFaultLyric), 0, soap_copy__ns1__IsReportedFaultLyric);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__IsReportedFaultLyric::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__IsReportedFaultLyric);
	if (this->soap_out(soap, tag?tag:"ns1:IsReportedFaultLyric", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__IsReportedFaultLyric::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__IsReportedFaultLyric(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__IsReportedFaultLyric * SOAP_FMAC4 soap_get__ns1__IsReportedFaultLyric(struct soap *soap, _ns1__IsReportedFaultLyric *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__IsReportedFaultLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__IsReportedFaultLyric * SOAP_FMAC2 soap_instantiate__ns1__IsReportedFaultLyric(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__IsReportedFaultLyric(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__IsReportedFaultLyric, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__IsReportedFaultLyric);
		if (size)
			*size = sizeof(_ns1__IsReportedFaultLyric);
		((_ns1__IsReportedFaultLyric*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__IsReportedFaultLyric, n);
		if (size)
			*size = n * sizeof(_ns1__IsReportedFaultLyric);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__IsReportedFaultLyric*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__IsReportedFaultLyric*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__IsReportedFaultLyric(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__IsReportedFaultLyric %p -> %p\n", q, p));
	*(_ns1__IsReportedFaultLyric*)p = *(_ns1__IsReportedFaultLyric*)q;
}

void _ns1__IsReportedRecommendationLyricResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__IsReportedRecommendationLyricResponse::IsReportedRecommendationLyricResult = NULL;
	/* transient soap skipped */
}

void _ns1__IsReportedRecommendationLyricResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__IsReportedRecommendationLyricResponse::IsReportedRecommendationLyricResult);
	/* transient soap skipped */
#endif
}

int _ns1__IsReportedRecommendationLyricResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__IsReportedRecommendationLyricResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__IsReportedRecommendationLyricResponse(struct soap *soap, const char *tag, int id, const _ns1__IsReportedRecommendationLyricResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__IsReportedRecommendationLyricResponse), type))
		return soap->error;
	if (a->IsReportedRecommendationLyricResult)
		soap_element_result(soap, "ns1:IsReportedRecommendationLyricResult");
	if (soap_out_PointerTostd__string(soap, "ns1:IsReportedRecommendationLyricResult", -1, &(a->_ns1__IsReportedRecommendationLyricResponse::IsReportedRecommendationLyricResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__IsReportedRecommendationLyricResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__IsReportedRecommendationLyricResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__IsReportedRecommendationLyricResponse * SOAP_FMAC4 soap_in__ns1__IsReportedRecommendationLyricResponse(struct soap *soap, const char *tag, _ns1__IsReportedRecommendationLyricResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__IsReportedRecommendationLyricResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__IsReportedRecommendationLyricResponse, sizeof(_ns1__IsReportedRecommendationLyricResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__IsReportedRecommendationLyricResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__IsReportedRecommendationLyricResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_IsReportedRecommendationLyricResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_IsReportedRecommendationLyricResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:IsReportedRecommendationLyricResult", &(a->_ns1__IsReportedRecommendationLyricResponse::IsReportedRecommendationLyricResult), "xsd:string"))
				{	soap_flag_IsReportedRecommendationLyricResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:IsReportedRecommendationLyricResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__IsReportedRecommendationLyricResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__IsReportedRecommendationLyricResponse, 0, sizeof(_ns1__IsReportedRecommendationLyricResponse), 0, soap_copy__ns1__IsReportedRecommendationLyricResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__IsReportedRecommendationLyricResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__IsReportedRecommendationLyricResponse);
	if (this->soap_out(soap, tag?tag:"ns1:IsReportedRecommendationLyricResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__IsReportedRecommendationLyricResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__IsReportedRecommendationLyricResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__IsReportedRecommendationLyricResponse * SOAP_FMAC4 soap_get__ns1__IsReportedRecommendationLyricResponse(struct soap *soap, _ns1__IsReportedRecommendationLyricResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__IsReportedRecommendationLyricResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__IsReportedRecommendationLyricResponse * SOAP_FMAC2 soap_instantiate__ns1__IsReportedRecommendationLyricResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__IsReportedRecommendationLyricResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__IsReportedRecommendationLyricResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__IsReportedRecommendationLyricResponse);
		if (size)
			*size = sizeof(_ns1__IsReportedRecommendationLyricResponse);
		((_ns1__IsReportedRecommendationLyricResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__IsReportedRecommendationLyricResponse, n);
		if (size)
			*size = n * sizeof(_ns1__IsReportedRecommendationLyricResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__IsReportedRecommendationLyricResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__IsReportedRecommendationLyricResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__IsReportedRecommendationLyricResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__IsReportedRecommendationLyricResponse %p -> %p\n", q, p));
	*(_ns1__IsReportedRecommendationLyricResponse*)p = *(_ns1__IsReportedRecommendationLyricResponse*)q;
}

void _ns1__IsReportedRecommendationLyric::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__IsReportedRecommendationLyric::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__IsReportedRecommendationLyric::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, &this->_ns1__IsReportedRecommendationLyric::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__IsReportedRecommendationLyric::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__IsReportedRecommendationLyric(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__IsReportedRecommendationLyric(struct soap *soap, const char *tag, int id, const _ns1__IsReportedRecommendationLyric *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__IsReportedRecommendationLyric), type))
		return soap->error;
	if (a->_ns1__IsReportedRecommendationLyric::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__IsReportedRecommendationLyric::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__IsReportedRecommendationLyric::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__IsReportedRecommendationLyric(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__IsReportedRecommendationLyric * SOAP_FMAC4 soap_in__ns1__IsReportedRecommendationLyric(struct soap *soap, const char *tag, _ns1__IsReportedRecommendationLyric *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__IsReportedRecommendationLyric *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__IsReportedRecommendationLyric, sizeof(_ns1__IsReportedRecommendationLyric), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__IsReportedRecommendationLyric)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__IsReportedRecommendationLyric *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__IsReportedRecommendationLyric::stQuery), "ns1:ST_IS_REPORTED_RECOMMENDATION_LYRIC_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__IsReportedRecommendationLyric *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__IsReportedRecommendationLyric, 0, sizeof(_ns1__IsReportedRecommendationLyric), 0, soap_copy__ns1__IsReportedRecommendationLyric);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__IsReportedRecommendationLyric::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__IsReportedRecommendationLyric);
	if (this->soap_out(soap, tag?tag:"ns1:IsReportedRecommendationLyric", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__IsReportedRecommendationLyric::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__IsReportedRecommendationLyric(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__IsReportedRecommendationLyric * SOAP_FMAC4 soap_get__ns1__IsReportedRecommendationLyric(struct soap *soap, _ns1__IsReportedRecommendationLyric *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__IsReportedRecommendationLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__IsReportedRecommendationLyric * SOAP_FMAC2 soap_instantiate__ns1__IsReportedRecommendationLyric(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__IsReportedRecommendationLyric(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__IsReportedRecommendationLyric, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__IsReportedRecommendationLyric);
		if (size)
			*size = sizeof(_ns1__IsReportedRecommendationLyric);
		((_ns1__IsReportedRecommendationLyric*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__IsReportedRecommendationLyric, n);
		if (size)
			*size = n * sizeof(_ns1__IsReportedRecommendationLyric);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__IsReportedRecommendationLyric*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__IsReportedRecommendationLyric*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__IsReportedRecommendationLyric(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__IsReportedRecommendationLyric %p -> %p\n", q, p));
	*(_ns1__IsReportedRecommendationLyric*)p = *(_ns1__IsReportedRecommendationLyric*)q;
}

void _ns1__ReportRecommendationLyricResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ReportRecommendationLyricResponse::ReportRecommendationLyricResult = NULL;
	/* transient soap skipped */
}

void _ns1__ReportRecommendationLyricResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__ReportRecommendationLyricResponse::ReportRecommendationLyricResult);
	/* transient soap skipped */
#endif
}

int _ns1__ReportRecommendationLyricResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ReportRecommendationLyricResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportRecommendationLyricResponse(struct soap *soap, const char *tag, int id, const _ns1__ReportRecommendationLyricResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ReportRecommendationLyricResponse), type))
		return soap->error;
	if (a->ReportRecommendationLyricResult)
		soap_element_result(soap, "ns1:ReportRecommendationLyricResult");
	if (soap_out_PointerTostd__string(soap, "ns1:ReportRecommendationLyricResult", -1, &(a->_ns1__ReportRecommendationLyricResponse::ReportRecommendationLyricResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__ReportRecommendationLyricResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ReportRecommendationLyricResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ReportRecommendationLyricResponse * SOAP_FMAC4 soap_in__ns1__ReportRecommendationLyricResponse(struct soap *soap, const char *tag, _ns1__ReportRecommendationLyricResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ReportRecommendationLyricResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ReportRecommendationLyricResponse, sizeof(_ns1__ReportRecommendationLyricResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__ReportRecommendationLyricResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__ReportRecommendationLyricResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ReportRecommendationLyricResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ReportRecommendationLyricResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:ReportRecommendationLyricResult", &(a->_ns1__ReportRecommendationLyricResponse::ReportRecommendationLyricResult), "xsd:string"))
				{	soap_flag_ReportRecommendationLyricResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:ReportRecommendationLyricResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ReportRecommendationLyricResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ReportRecommendationLyricResponse, 0, sizeof(_ns1__ReportRecommendationLyricResponse), 0, soap_copy__ns1__ReportRecommendationLyricResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__ReportRecommendationLyricResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__ReportRecommendationLyricResponse);
	if (this->soap_out(soap, tag?tag:"ns1:ReportRecommendationLyricResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ReportRecommendationLyricResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ReportRecommendationLyricResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ReportRecommendationLyricResponse * SOAP_FMAC4 soap_get__ns1__ReportRecommendationLyricResponse(struct soap *soap, _ns1__ReportRecommendationLyricResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ReportRecommendationLyricResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__ReportRecommendationLyricResponse * SOAP_FMAC2 soap_instantiate__ns1__ReportRecommendationLyricResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ReportRecommendationLyricResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__ReportRecommendationLyricResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__ReportRecommendationLyricResponse);
		if (size)
			*size = sizeof(_ns1__ReportRecommendationLyricResponse);
		((_ns1__ReportRecommendationLyricResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__ReportRecommendationLyricResponse, n);
		if (size)
			*size = n * sizeof(_ns1__ReportRecommendationLyricResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__ReportRecommendationLyricResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__ReportRecommendationLyricResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__ReportRecommendationLyricResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__ReportRecommendationLyricResponse %p -> %p\n", q, p));
	*(_ns1__ReportRecommendationLyricResponse*)p = *(_ns1__ReportRecommendationLyricResponse*)q;
}

void _ns1__ReportRecommendationLyric::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ReportRecommendationLyric::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__ReportRecommendationLyric::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, &this->_ns1__ReportRecommendationLyric::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__ReportRecommendationLyric::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ReportRecommendationLyric(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportRecommendationLyric(struct soap *soap, const char *tag, int id, const _ns1__ReportRecommendationLyric *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ReportRecommendationLyric), type))
		return soap->error;
	if (a->_ns1__ReportRecommendationLyric::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__ReportRecommendationLyric::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__ReportRecommendationLyric::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ReportRecommendationLyric(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ReportRecommendationLyric * SOAP_FMAC4 soap_in__ns1__ReportRecommendationLyric(struct soap *soap, const char *tag, _ns1__ReportRecommendationLyric *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ReportRecommendationLyric *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ReportRecommendationLyric, sizeof(_ns1__ReportRecommendationLyric), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__ReportRecommendationLyric)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__ReportRecommendationLyric *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__ReportRecommendationLyric::stQuery), "ns1:ST_REPORT_RECOMMENDATION_LYRIC_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ReportRecommendationLyric *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ReportRecommendationLyric, 0, sizeof(_ns1__ReportRecommendationLyric), 0, soap_copy__ns1__ReportRecommendationLyric);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__ReportRecommendationLyric::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__ReportRecommendationLyric);
	if (this->soap_out(soap, tag?tag:"ns1:ReportRecommendationLyric", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ReportRecommendationLyric::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ReportRecommendationLyric(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ReportRecommendationLyric * SOAP_FMAC4 soap_get__ns1__ReportRecommendationLyric(struct soap *soap, _ns1__ReportRecommendationLyric *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ReportRecommendationLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__ReportRecommendationLyric * SOAP_FMAC2 soap_instantiate__ns1__ReportRecommendationLyric(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ReportRecommendationLyric(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__ReportRecommendationLyric, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__ReportRecommendationLyric);
		if (size)
			*size = sizeof(_ns1__ReportRecommendationLyric);
		((_ns1__ReportRecommendationLyric*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__ReportRecommendationLyric, n);
		if (size)
			*size = n * sizeof(_ns1__ReportRecommendationLyric);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__ReportRecommendationLyric*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__ReportRecommendationLyric*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__ReportRecommendationLyric(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__ReportRecommendationLyric %p -> %p\n", q, p));
	*(_ns1__ReportRecommendationLyric*)p = *(_ns1__ReportRecommendationLyric*)q;
}

void _ns1__ReportFaultLyric2Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ReportFaultLyric2Response::ReportFaultLyric2Result = NULL;
	/* transient soap skipped */
}

void _ns1__ReportFaultLyric2Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__ReportFaultLyric2Response::ReportFaultLyric2Result);
	/* transient soap skipped */
#endif
}

int _ns1__ReportFaultLyric2Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ReportFaultLyric2Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportFaultLyric2Response(struct soap *soap, const char *tag, int id, const _ns1__ReportFaultLyric2Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ReportFaultLyric2Response), type))
		return soap->error;
	if (a->ReportFaultLyric2Result)
		soap_element_result(soap, "ns1:ReportFaultLyric2Result");
	if (soap_out_PointerTostd__string(soap, "ns1:ReportFaultLyric2Result", -1, &(a->_ns1__ReportFaultLyric2Response::ReportFaultLyric2Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__ReportFaultLyric2Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ReportFaultLyric2Response(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ReportFaultLyric2Response * SOAP_FMAC4 soap_in__ns1__ReportFaultLyric2Response(struct soap *soap, const char *tag, _ns1__ReportFaultLyric2Response *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ReportFaultLyric2Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ReportFaultLyric2Response, sizeof(_ns1__ReportFaultLyric2Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__ReportFaultLyric2Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__ReportFaultLyric2Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ReportFaultLyric2Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ReportFaultLyric2Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:ReportFaultLyric2Result", &(a->_ns1__ReportFaultLyric2Response::ReportFaultLyric2Result), "xsd:string"))
				{	soap_flag_ReportFaultLyric2Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:ReportFaultLyric2Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ReportFaultLyric2Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ReportFaultLyric2Response, 0, sizeof(_ns1__ReportFaultLyric2Response), 0, soap_copy__ns1__ReportFaultLyric2Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__ReportFaultLyric2Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__ReportFaultLyric2Response);
	if (this->soap_out(soap, tag?tag:"ns1:ReportFaultLyric2Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ReportFaultLyric2Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ReportFaultLyric2Response(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ReportFaultLyric2Response * SOAP_FMAC4 soap_get__ns1__ReportFaultLyric2Response(struct soap *soap, _ns1__ReportFaultLyric2Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ReportFaultLyric2Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__ReportFaultLyric2Response * SOAP_FMAC2 soap_instantiate__ns1__ReportFaultLyric2Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ReportFaultLyric2Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__ReportFaultLyric2Response, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__ReportFaultLyric2Response);
		if (size)
			*size = sizeof(_ns1__ReportFaultLyric2Response);
		((_ns1__ReportFaultLyric2Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__ReportFaultLyric2Response, n);
		if (size)
			*size = n * sizeof(_ns1__ReportFaultLyric2Response);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__ReportFaultLyric2Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__ReportFaultLyric2Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__ReportFaultLyric2Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__ReportFaultLyric2Response %p -> %p\n", q, p));
	*(_ns1__ReportFaultLyric2Response*)p = *(_ns1__ReportFaultLyric2Response*)q;
}

void _ns1__ReportFaultLyric2::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ReportFaultLyric2::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__ReportFaultLyric2::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(soap, &this->_ns1__ReportFaultLyric2::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__ReportFaultLyric2::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ReportFaultLyric2(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportFaultLyric2(struct soap *soap, const char *tag, int id, const _ns1__ReportFaultLyric2 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ReportFaultLyric2), type))
		return soap->error;
	if (a->_ns1__ReportFaultLyric2::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__ReportFaultLyric2::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__ReportFaultLyric2::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ReportFaultLyric2(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ReportFaultLyric2 * SOAP_FMAC4 soap_in__ns1__ReportFaultLyric2(struct soap *soap, const char *tag, _ns1__ReportFaultLyric2 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ReportFaultLyric2 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ReportFaultLyric2, sizeof(_ns1__ReportFaultLyric2), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__ReportFaultLyric2)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__ReportFaultLyric2 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__ReportFaultLyric2::stQuery), "ns1:ST_REPORT_FAULT_LYRIC2_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ReportFaultLyric2 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ReportFaultLyric2, 0, sizeof(_ns1__ReportFaultLyric2), 0, soap_copy__ns1__ReportFaultLyric2);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__ReportFaultLyric2::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__ReportFaultLyric2);
	if (this->soap_out(soap, tag?tag:"ns1:ReportFaultLyric2", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ReportFaultLyric2::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ReportFaultLyric2(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ReportFaultLyric2 * SOAP_FMAC4 soap_get__ns1__ReportFaultLyric2(struct soap *soap, _ns1__ReportFaultLyric2 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ReportFaultLyric2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__ReportFaultLyric2 * SOAP_FMAC2 soap_instantiate__ns1__ReportFaultLyric2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ReportFaultLyric2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__ReportFaultLyric2, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__ReportFaultLyric2);
		if (size)
			*size = sizeof(_ns1__ReportFaultLyric2);
		((_ns1__ReportFaultLyric2*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__ReportFaultLyric2, n);
		if (size)
			*size = n * sizeof(_ns1__ReportFaultLyric2);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__ReportFaultLyric2*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__ReportFaultLyric2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__ReportFaultLyric2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__ReportFaultLyric2 %p -> %p\n", q, p));
	*(_ns1__ReportFaultLyric2*)p = *(_ns1__ReportFaultLyric2*)q;
}

void _ns1__ReportFaultLyricWithCommentResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ReportFaultLyricWithCommentResponse::ReportFaultLyricWithCommentResult = NULL;
	/* transient soap skipped */
}

void _ns1__ReportFaultLyricWithCommentResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__ReportFaultLyricWithCommentResponse::ReportFaultLyricWithCommentResult);
	/* transient soap skipped */
#endif
}

int _ns1__ReportFaultLyricWithCommentResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ReportFaultLyricWithCommentResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportFaultLyricWithCommentResponse(struct soap *soap, const char *tag, int id, const _ns1__ReportFaultLyricWithCommentResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ReportFaultLyricWithCommentResponse), type))
		return soap->error;
	if (a->ReportFaultLyricWithCommentResult)
		soap_element_result(soap, "ns1:ReportFaultLyricWithCommentResult");
	if (soap_out_PointerTostd__string(soap, "ns1:ReportFaultLyricWithCommentResult", -1, &(a->_ns1__ReportFaultLyricWithCommentResponse::ReportFaultLyricWithCommentResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__ReportFaultLyricWithCommentResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ReportFaultLyricWithCommentResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ReportFaultLyricWithCommentResponse * SOAP_FMAC4 soap_in__ns1__ReportFaultLyricWithCommentResponse(struct soap *soap, const char *tag, _ns1__ReportFaultLyricWithCommentResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ReportFaultLyricWithCommentResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ReportFaultLyricWithCommentResponse, sizeof(_ns1__ReportFaultLyricWithCommentResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__ReportFaultLyricWithCommentResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__ReportFaultLyricWithCommentResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ReportFaultLyricWithCommentResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ReportFaultLyricWithCommentResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:ReportFaultLyricWithCommentResult", &(a->_ns1__ReportFaultLyricWithCommentResponse::ReportFaultLyricWithCommentResult), "xsd:string"))
				{	soap_flag_ReportFaultLyricWithCommentResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:ReportFaultLyricWithCommentResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ReportFaultLyricWithCommentResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ReportFaultLyricWithCommentResponse, 0, sizeof(_ns1__ReportFaultLyricWithCommentResponse), 0, soap_copy__ns1__ReportFaultLyricWithCommentResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__ReportFaultLyricWithCommentResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__ReportFaultLyricWithCommentResponse);
	if (this->soap_out(soap, tag?tag:"ns1:ReportFaultLyricWithCommentResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ReportFaultLyricWithCommentResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ReportFaultLyricWithCommentResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ReportFaultLyricWithCommentResponse * SOAP_FMAC4 soap_get__ns1__ReportFaultLyricWithCommentResponse(struct soap *soap, _ns1__ReportFaultLyricWithCommentResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ReportFaultLyricWithCommentResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__ReportFaultLyricWithCommentResponse * SOAP_FMAC2 soap_instantiate__ns1__ReportFaultLyricWithCommentResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ReportFaultLyricWithCommentResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__ReportFaultLyricWithCommentResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__ReportFaultLyricWithCommentResponse);
		if (size)
			*size = sizeof(_ns1__ReportFaultLyricWithCommentResponse);
		((_ns1__ReportFaultLyricWithCommentResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__ReportFaultLyricWithCommentResponse, n);
		if (size)
			*size = n * sizeof(_ns1__ReportFaultLyricWithCommentResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__ReportFaultLyricWithCommentResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__ReportFaultLyricWithCommentResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__ReportFaultLyricWithCommentResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__ReportFaultLyricWithCommentResponse %p -> %p\n", q, p));
	*(_ns1__ReportFaultLyricWithCommentResponse*)p = *(_ns1__ReportFaultLyricWithCommentResponse*)q;
}

void _ns1__ReportFaultLyricWithComment::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ReportFaultLyricWithComment::stReportFaultWithComment = NULL;
	/* transient soap skipped */
}

void _ns1__ReportFaultLyricWithComment::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(soap, &this->_ns1__ReportFaultLyricWithComment::stReportFaultWithComment);
	/* transient soap skipped */
#endif
}

int _ns1__ReportFaultLyricWithComment::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ReportFaultLyricWithComment(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportFaultLyricWithComment(struct soap *soap, const char *tag, int id, const _ns1__ReportFaultLyricWithComment *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ReportFaultLyricWithComment), type))
		return soap->error;
	if (a->_ns1__ReportFaultLyricWithComment::stReportFaultWithComment)
	{	if (soap_out_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(soap, "ns1:stReportFaultWithComment", -1, &a->_ns1__ReportFaultLyricWithComment::stReportFaultWithComment, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stReportFaultWithComment"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__ReportFaultLyricWithComment::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ReportFaultLyricWithComment(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ReportFaultLyricWithComment * SOAP_FMAC4 soap_in__ns1__ReportFaultLyricWithComment(struct soap *soap, const char *tag, _ns1__ReportFaultLyricWithComment *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ReportFaultLyricWithComment *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ReportFaultLyricWithComment, sizeof(_ns1__ReportFaultLyricWithComment), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__ReportFaultLyricWithComment)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__ReportFaultLyricWithComment *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stReportFaultWithComment1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stReportFaultWithComment1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(soap, "ns1:stReportFaultWithComment", &(a->_ns1__ReportFaultLyricWithComment::stReportFaultWithComment), "ns1:ST_REPORT_FAULT_LYRIC_WITH_COMMENT_QUERY"))
				{	soap_flag_stReportFaultWithComment1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ReportFaultLyricWithComment *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ReportFaultLyricWithComment, 0, sizeof(_ns1__ReportFaultLyricWithComment), 0, soap_copy__ns1__ReportFaultLyricWithComment);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stReportFaultWithComment1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__ReportFaultLyricWithComment::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__ReportFaultLyricWithComment);
	if (this->soap_out(soap, tag?tag:"ns1:ReportFaultLyricWithComment", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ReportFaultLyricWithComment::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ReportFaultLyricWithComment(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ReportFaultLyricWithComment * SOAP_FMAC4 soap_get__ns1__ReportFaultLyricWithComment(struct soap *soap, _ns1__ReportFaultLyricWithComment *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ReportFaultLyricWithComment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__ReportFaultLyricWithComment * SOAP_FMAC2 soap_instantiate__ns1__ReportFaultLyricWithComment(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ReportFaultLyricWithComment(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__ReportFaultLyricWithComment, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__ReportFaultLyricWithComment);
		if (size)
			*size = sizeof(_ns1__ReportFaultLyricWithComment);
		((_ns1__ReportFaultLyricWithComment*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__ReportFaultLyricWithComment, n);
		if (size)
			*size = n * sizeof(_ns1__ReportFaultLyricWithComment);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__ReportFaultLyricWithComment*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__ReportFaultLyricWithComment*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__ReportFaultLyricWithComment(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__ReportFaultLyricWithComment %p -> %p\n", q, p));
	*(_ns1__ReportFaultLyricWithComment*)p = *(_ns1__ReportFaultLyricWithComment*)q;
}

void _ns1__UploadLyricResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__UploadLyricResponse::UploadLyricResult = NULL;
	/* transient soap skipped */
}

void _ns1__UploadLyricResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__UploadLyricResponse::UploadLyricResult);
	/* transient soap skipped */
#endif
}

int _ns1__UploadLyricResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__UploadLyricResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadLyricResponse(struct soap *soap, const char *tag, int id, const _ns1__UploadLyricResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__UploadLyricResponse), type))
		return soap->error;
	if (a->UploadLyricResult)
		soap_element_result(soap, "ns1:UploadLyricResult");
	if (soap_out_PointerTostd__string(soap, "ns1:UploadLyricResult", -1, &(a->_ns1__UploadLyricResponse::UploadLyricResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__UploadLyricResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__UploadLyricResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__UploadLyricResponse * SOAP_FMAC4 soap_in__ns1__UploadLyricResponse(struct soap *soap, const char *tag, _ns1__UploadLyricResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__UploadLyricResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__UploadLyricResponse, sizeof(_ns1__UploadLyricResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__UploadLyricResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__UploadLyricResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_UploadLyricResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_UploadLyricResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:UploadLyricResult", &(a->_ns1__UploadLyricResponse::UploadLyricResult), "xsd:string"))
				{	soap_flag_UploadLyricResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:UploadLyricResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__UploadLyricResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__UploadLyricResponse, 0, sizeof(_ns1__UploadLyricResponse), 0, soap_copy__ns1__UploadLyricResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__UploadLyricResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__UploadLyricResponse);
	if (this->soap_out(soap, tag?tag:"ns1:UploadLyricResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__UploadLyricResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__UploadLyricResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__UploadLyricResponse * SOAP_FMAC4 soap_get__ns1__UploadLyricResponse(struct soap *soap, _ns1__UploadLyricResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__UploadLyricResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__UploadLyricResponse * SOAP_FMAC2 soap_instantiate__ns1__UploadLyricResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__UploadLyricResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__UploadLyricResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__UploadLyricResponse);
		if (size)
			*size = sizeof(_ns1__UploadLyricResponse);
		((_ns1__UploadLyricResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__UploadLyricResponse, n);
		if (size)
			*size = n * sizeof(_ns1__UploadLyricResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__UploadLyricResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__UploadLyricResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadLyricResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__UploadLyricResponse %p -> %p\n", q, p));
	*(_ns1__UploadLyricResponse*)p = *(_ns1__UploadLyricResponse*)q;
}

void _ns1__UploadLyric::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__UploadLyric::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__UploadLyric::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(soap, &this->_ns1__UploadLyric::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__UploadLyric::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__UploadLyric(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadLyric(struct soap *soap, const char *tag, int id, const _ns1__UploadLyric *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__UploadLyric), type))
		return soap->error;
	if (a->_ns1__UploadLyric::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__UploadLyric::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__UploadLyric::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__UploadLyric(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__UploadLyric * SOAP_FMAC4 soap_in__ns1__UploadLyric(struct soap *soap, const char *tag, _ns1__UploadLyric *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__UploadLyric *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__UploadLyric, sizeof(_ns1__UploadLyric), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__UploadLyric)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__UploadLyric *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__UploadLyric::stQuery), "ns1:ST_UPLOAD_LYRIC_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__UploadLyric *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__UploadLyric, 0, sizeof(_ns1__UploadLyric), 0, soap_copy__ns1__UploadLyric);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__UploadLyric::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__UploadLyric);
	if (this->soap_out(soap, tag?tag:"ns1:UploadLyric", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__UploadLyric::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__UploadLyric(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__UploadLyric * SOAP_FMAC4 soap_get__ns1__UploadLyric(struct soap *soap, _ns1__UploadLyric *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__UploadLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__UploadLyric * SOAP_FMAC2 soap_instantiate__ns1__UploadLyric(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__UploadLyric(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__UploadLyric, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__UploadLyric);
		if (size)
			*size = sizeof(_ns1__UploadLyric);
		((_ns1__UploadLyric*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__UploadLyric, n);
		if (size)
			*size = n * sizeof(_ns1__UploadLyric);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__UploadLyric*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__UploadLyric*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadLyric(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__UploadLyric %p -> %p\n", q, p));
	*(_ns1__UploadLyric*)p = *(_ns1__UploadLyric*)q;
}

void _ns1__GetResembleLyric2CountTestResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetResembleLyric2CountTestResponse::GetResembleLyric2CountTestResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetResembleLyric2CountTestResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(soap, &this->_ns1__GetResembleLyric2CountTestResponse::GetResembleLyric2CountTestResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetResembleLyric2CountTestResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetResembleLyric2CountTestResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetResembleLyric2CountTestResponse(struct soap *soap, const char *tag, int id, const _ns1__GetResembleLyric2CountTestResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetResembleLyric2CountTestResponse), type))
		return soap->error;
	if (a->GetResembleLyric2CountTestResult)
		soap_element_result(soap, "ns1:GetResembleLyric2CountTestResult");
	if (a->_ns1__GetResembleLyric2CountTestResponse::GetResembleLyric2CountTestResult)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(soap, "ns1:GetResembleLyric2CountTestResult", -1, &a->_ns1__GetResembleLyric2CountTestResponse::GetResembleLyric2CountTestResult, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:GetResembleLyric2CountTestResult"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetResembleLyric2CountTestResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetResembleLyric2CountTestResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric2CountTestResponse * SOAP_FMAC4 soap_in__ns1__GetResembleLyric2CountTestResponse(struct soap *soap, const char *tag, _ns1__GetResembleLyric2CountTestResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetResembleLyric2CountTestResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetResembleLyric2CountTestResponse, sizeof(_ns1__GetResembleLyric2CountTestResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetResembleLyric2CountTestResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetResembleLyric2CountTestResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetResembleLyric2CountTestResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetResembleLyric2CountTestResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(soap, "ns1:GetResembleLyric2CountTestResult", &(a->_ns1__GetResembleLyric2CountTestResponse::GetResembleLyric2CountTestResult), "ns1:ST_GET_RESEMBLELYRIC2_COUNT_RETURN"))
				{	soap_flag_GetResembleLyric2CountTestResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetResembleLyric2CountTestResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetResembleLyric2CountTestResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetResembleLyric2CountTestResponse, 0, sizeof(_ns1__GetResembleLyric2CountTestResponse), 0, soap_copy__ns1__GetResembleLyric2CountTestResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetResembleLyric2CountTestResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetResembleLyric2CountTestResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetResembleLyric2CountTestResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetResembleLyric2CountTestResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetResembleLyric2CountTestResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetResembleLyric2CountTestResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric2CountTestResponse * SOAP_FMAC4 soap_get__ns1__GetResembleLyric2CountTestResponse(struct soap *soap, _ns1__GetResembleLyric2CountTestResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetResembleLyric2CountTestResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetResembleLyric2CountTestResponse * SOAP_FMAC2 soap_instantiate__ns1__GetResembleLyric2CountTestResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetResembleLyric2CountTestResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetResembleLyric2CountTestResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetResembleLyric2CountTestResponse);
		if (size)
			*size = sizeof(_ns1__GetResembleLyric2CountTestResponse);
		((_ns1__GetResembleLyric2CountTestResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetResembleLyric2CountTestResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetResembleLyric2CountTestResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetResembleLyric2CountTestResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetResembleLyric2CountTestResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetResembleLyric2CountTestResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetResembleLyric2CountTestResponse %p -> %p\n", q, p));
	*(_ns1__GetResembleLyric2CountTestResponse*)p = *(_ns1__GetResembleLyric2CountTestResponse*)q;
}

void _ns1__GetResembleLyric2CountTest::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetResembleLyric2CountTest::testTitle = NULL;
	this->_ns1__GetResembleLyric2CountTest::testArtistName = NULL;
	/* transient soap skipped */
}

void _ns1__GetResembleLyric2CountTest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetResembleLyric2CountTest::testTitle);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetResembleLyric2CountTest::testArtistName);
	/* transient soap skipped */
#endif
}

int _ns1__GetResembleLyric2CountTest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetResembleLyric2CountTest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetResembleLyric2CountTest(struct soap *soap, const char *tag, int id, const _ns1__GetResembleLyric2CountTest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetResembleLyric2CountTest), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:testTitle", -1, &(a->_ns1__GetResembleLyric2CountTest::testTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:testArtistName", -1, &(a->_ns1__GetResembleLyric2CountTest::testArtistName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetResembleLyric2CountTest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetResembleLyric2CountTest(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric2CountTest * SOAP_FMAC4 soap_in__ns1__GetResembleLyric2CountTest(struct soap *soap, const char *tag, _ns1__GetResembleLyric2CountTest *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetResembleLyric2CountTest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetResembleLyric2CountTest, sizeof(_ns1__GetResembleLyric2CountTest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetResembleLyric2CountTest)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetResembleLyric2CountTest *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_testTitle1 = 1;
	size_t soap_flag_testArtistName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_testTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:testTitle", &(a->_ns1__GetResembleLyric2CountTest::testTitle), "xsd:string"))
				{	soap_flag_testTitle1--;
					continue;
				}
			if (soap_flag_testArtistName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:testArtistName", &(a->_ns1__GetResembleLyric2CountTest::testArtistName), "xsd:string"))
				{	soap_flag_testArtistName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetResembleLyric2CountTest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetResembleLyric2CountTest, 0, sizeof(_ns1__GetResembleLyric2CountTest), 0, soap_copy__ns1__GetResembleLyric2CountTest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetResembleLyric2CountTest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetResembleLyric2CountTest);
	if (this->soap_out(soap, tag?tag:"ns1:GetResembleLyric2CountTest", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetResembleLyric2CountTest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetResembleLyric2CountTest(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric2CountTest * SOAP_FMAC4 soap_get__ns1__GetResembleLyric2CountTest(struct soap *soap, _ns1__GetResembleLyric2CountTest *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetResembleLyric2CountTest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetResembleLyric2CountTest * SOAP_FMAC2 soap_instantiate__ns1__GetResembleLyric2CountTest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetResembleLyric2CountTest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetResembleLyric2CountTest, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetResembleLyric2CountTest);
		if (size)
			*size = sizeof(_ns1__GetResembleLyric2CountTest);
		((_ns1__GetResembleLyric2CountTest*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetResembleLyric2CountTest, n);
		if (size)
			*size = n * sizeof(_ns1__GetResembleLyric2CountTest);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetResembleLyric2CountTest*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetResembleLyric2CountTest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetResembleLyric2CountTest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetResembleLyric2CountTest %p -> %p\n", q, p));
	*(_ns1__GetResembleLyric2CountTest*)p = *(_ns1__GetResembleLyric2CountTest*)q;
}

void _ns1__GetResembleLyric2CountResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetResembleLyric2CountResponse::GetResembleLyric2CountResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetResembleLyric2CountResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(soap, &this->_ns1__GetResembleLyric2CountResponse::GetResembleLyric2CountResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetResembleLyric2CountResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetResembleLyric2CountResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetResembleLyric2CountResponse(struct soap *soap, const char *tag, int id, const _ns1__GetResembleLyric2CountResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetResembleLyric2CountResponse), type))
		return soap->error;
	if (a->GetResembleLyric2CountResult)
		soap_element_result(soap, "ns1:GetResembleLyric2CountResult");
	if (a->_ns1__GetResembleLyric2CountResponse::GetResembleLyric2CountResult)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(soap, "ns1:GetResembleLyric2CountResult", -1, &a->_ns1__GetResembleLyric2CountResponse::GetResembleLyric2CountResult, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:GetResembleLyric2CountResult"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetResembleLyric2CountResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetResembleLyric2CountResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric2CountResponse * SOAP_FMAC4 soap_in__ns1__GetResembleLyric2CountResponse(struct soap *soap, const char *tag, _ns1__GetResembleLyric2CountResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetResembleLyric2CountResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetResembleLyric2CountResponse, sizeof(_ns1__GetResembleLyric2CountResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetResembleLyric2CountResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetResembleLyric2CountResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetResembleLyric2CountResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetResembleLyric2CountResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(soap, "ns1:GetResembleLyric2CountResult", &(a->_ns1__GetResembleLyric2CountResponse::GetResembleLyric2CountResult), "ns1:ST_GET_RESEMBLELYRIC2_COUNT_RETURN"))
				{	soap_flag_GetResembleLyric2CountResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetResembleLyric2CountResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetResembleLyric2CountResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetResembleLyric2CountResponse, 0, sizeof(_ns1__GetResembleLyric2CountResponse), 0, soap_copy__ns1__GetResembleLyric2CountResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetResembleLyric2CountResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetResembleLyric2CountResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetResembleLyric2CountResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetResembleLyric2CountResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetResembleLyric2CountResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetResembleLyric2CountResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric2CountResponse * SOAP_FMAC4 soap_get__ns1__GetResembleLyric2CountResponse(struct soap *soap, _ns1__GetResembleLyric2CountResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetResembleLyric2CountResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetResembleLyric2CountResponse * SOAP_FMAC2 soap_instantiate__ns1__GetResembleLyric2CountResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetResembleLyric2CountResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetResembleLyric2CountResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetResembleLyric2CountResponse);
		if (size)
			*size = sizeof(_ns1__GetResembleLyric2CountResponse);
		((_ns1__GetResembleLyric2CountResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetResembleLyric2CountResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetResembleLyric2CountResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetResembleLyric2CountResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetResembleLyric2CountResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetResembleLyric2CountResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetResembleLyric2CountResponse %p -> %p\n", q, p));
	*(_ns1__GetResembleLyric2CountResponse*)p = *(_ns1__GetResembleLyric2CountResponse*)q;
}

void _ns1__GetResembleLyric2Count::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetResembleLyric2Count::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__GetResembleLyric2Count::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(soap, &this->_ns1__GetResembleLyric2Count::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__GetResembleLyric2Count::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetResembleLyric2Count(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetResembleLyric2Count(struct soap *soap, const char *tag, int id, const _ns1__GetResembleLyric2Count *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetResembleLyric2Count), type))
		return soap->error;
	if (a->_ns1__GetResembleLyric2Count::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__GetResembleLyric2Count::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetResembleLyric2Count::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetResembleLyric2Count(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric2Count * SOAP_FMAC4 soap_in__ns1__GetResembleLyric2Count(struct soap *soap, const char *tag, _ns1__GetResembleLyric2Count *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetResembleLyric2Count *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetResembleLyric2Count, sizeof(_ns1__GetResembleLyric2Count), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetResembleLyric2Count)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetResembleLyric2Count *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__GetResembleLyric2Count::stQuery), "ns1:ST_GET_RESEMBLELYRIC2_COUNT_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetResembleLyric2Count *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetResembleLyric2Count, 0, sizeof(_ns1__GetResembleLyric2Count), 0, soap_copy__ns1__GetResembleLyric2Count);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetResembleLyric2Count::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetResembleLyric2Count);
	if (this->soap_out(soap, tag?tag:"ns1:GetResembleLyric2Count", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetResembleLyric2Count::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetResembleLyric2Count(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric2Count * SOAP_FMAC4 soap_get__ns1__GetResembleLyric2Count(struct soap *soap, _ns1__GetResembleLyric2Count *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetResembleLyric2Count(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetResembleLyric2Count * SOAP_FMAC2 soap_instantiate__ns1__GetResembleLyric2Count(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetResembleLyric2Count(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetResembleLyric2Count, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetResembleLyric2Count);
		if (size)
			*size = sizeof(_ns1__GetResembleLyric2Count);
		((_ns1__GetResembleLyric2Count*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetResembleLyric2Count, n);
		if (size)
			*size = n * sizeof(_ns1__GetResembleLyric2Count);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetResembleLyric2Count*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetResembleLyric2Count*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetResembleLyric2Count(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetResembleLyric2Count %p -> %p\n", q, p));
	*(_ns1__GetResembleLyric2Count*)p = *(_ns1__GetResembleLyric2Count*)q;
}

void _ns1__GetResembleLyric3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetResembleLyric3Response::GetResembleLyric3Result = NULL;
	/* transient soap skipped */
}

void _ns1__GetResembleLyric3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, &this->_ns1__GetResembleLyric3Response::GetResembleLyric3Result);
	/* transient soap skipped */
#endif
}

int _ns1__GetResembleLyric3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetResembleLyric3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetResembleLyric3Response(struct soap *soap, const char *tag, int id, const _ns1__GetResembleLyric3Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetResembleLyric3Response), type))
		return soap->error;
	if (a->GetResembleLyric3Result)
		soap_element_result(soap, "ns1:GetResembleLyric3Result");
	if (soap_out_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, "ns1:GetResembleLyric3Result", -1, &(a->_ns1__GetResembleLyric3Response::GetResembleLyric3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetResembleLyric3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetResembleLyric3Response(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric3Response * SOAP_FMAC4 soap_in__ns1__GetResembleLyric3Response(struct soap *soap, const char *tag, _ns1__GetResembleLyric3Response *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetResembleLyric3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetResembleLyric3Response, sizeof(_ns1__GetResembleLyric3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetResembleLyric3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetResembleLyric3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetResembleLyric3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetResembleLyric3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, "ns1:GetResembleLyric3Result", &(a->_ns1__GetResembleLyric3Response::GetResembleLyric3Result), "ns1:ArrayOfST_GET_RESEMBLELYRIC2_RETURN"))
				{	soap_flag_GetResembleLyric3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetResembleLyric3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetResembleLyric3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetResembleLyric3Response, 0, sizeof(_ns1__GetResembleLyric3Response), 0, soap_copy__ns1__GetResembleLyric3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetResembleLyric3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetResembleLyric3Response);
	if (this->soap_out(soap, tag?tag:"ns1:GetResembleLyric3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetResembleLyric3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetResembleLyric3Response(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric3Response * SOAP_FMAC4 soap_get__ns1__GetResembleLyric3Response(struct soap *soap, _ns1__GetResembleLyric3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetResembleLyric3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetResembleLyric3Response * SOAP_FMAC2 soap_instantiate__ns1__GetResembleLyric3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetResembleLyric3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetResembleLyric3Response, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetResembleLyric3Response);
		if (size)
			*size = sizeof(_ns1__GetResembleLyric3Response);
		((_ns1__GetResembleLyric3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetResembleLyric3Response, n);
		if (size)
			*size = n * sizeof(_ns1__GetResembleLyric3Response);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetResembleLyric3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetResembleLyric3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetResembleLyric3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetResembleLyric3Response %p -> %p\n", q, p));
	*(_ns1__GetResembleLyric3Response*)p = *(_ns1__GetResembleLyric3Response*)q;
}

void _ns1__GetResembleLyric3::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetResembleLyric3::encData = NULL;
	this->_ns1__GetResembleLyric3::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__GetResembleLyric3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetResembleLyric3::encData);
	soap_serialize_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(soap, &this->_ns1__GetResembleLyric3::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__GetResembleLyric3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetResembleLyric3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetResembleLyric3(struct soap *soap, const char *tag, int id, const _ns1__GetResembleLyric3 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetResembleLyric3), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:encData", -1, &(a->_ns1__GetResembleLyric3::encData), ""))
		return soap->error;
	if (a->_ns1__GetResembleLyric3::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__GetResembleLyric3::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetResembleLyric3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetResembleLyric3(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric3 * SOAP_FMAC4 soap_in__ns1__GetResembleLyric3(struct soap *soap, const char *tag, _ns1__GetResembleLyric3 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetResembleLyric3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetResembleLyric3, sizeof(_ns1__GetResembleLyric3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetResembleLyric3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetResembleLyric3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_encData1 = 1;
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_encData1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:encData", &(a->_ns1__GetResembleLyric3::encData), "xsd:string"))
				{	soap_flag_encData1--;
					continue;
				}
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__GetResembleLyric3::stQuery), "ns1:ST_GET_RESEMBLELYRIC2_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetResembleLyric3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetResembleLyric3, 0, sizeof(_ns1__GetResembleLyric3), 0, soap_copy__ns1__GetResembleLyric3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetResembleLyric3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetResembleLyric3);
	if (this->soap_out(soap, tag?tag:"ns1:GetResembleLyric3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetResembleLyric3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetResembleLyric3(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric3 * SOAP_FMAC4 soap_get__ns1__GetResembleLyric3(struct soap *soap, _ns1__GetResembleLyric3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetResembleLyric3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetResembleLyric3 * SOAP_FMAC2 soap_instantiate__ns1__GetResembleLyric3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetResembleLyric3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetResembleLyric3, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetResembleLyric3);
		if (size)
			*size = sizeof(_ns1__GetResembleLyric3);
		((_ns1__GetResembleLyric3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetResembleLyric3, n);
		if (size)
			*size = n * sizeof(_ns1__GetResembleLyric3);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetResembleLyric3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetResembleLyric3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetResembleLyric3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetResembleLyric3 %p -> %p\n", q, p));
	*(_ns1__GetResembleLyric3*)p = *(_ns1__GetResembleLyric3*)q;
}

void _ns1__GetResembleLyric2Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetResembleLyric2Response::GetResembleLyric2Result = NULL;
	/* transient soap skipped */
}

void _ns1__GetResembleLyric2Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, &this->_ns1__GetResembleLyric2Response::GetResembleLyric2Result);
	/* transient soap skipped */
#endif
}

int _ns1__GetResembleLyric2Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetResembleLyric2Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetResembleLyric2Response(struct soap *soap, const char *tag, int id, const _ns1__GetResembleLyric2Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetResembleLyric2Response), type))
		return soap->error;
	if (a->GetResembleLyric2Result)
		soap_element_result(soap, "ns1:GetResembleLyric2Result");
	if (soap_out_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, "ns1:GetResembleLyric2Result", -1, &(a->_ns1__GetResembleLyric2Response::GetResembleLyric2Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetResembleLyric2Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetResembleLyric2Response(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric2Response * SOAP_FMAC4 soap_in__ns1__GetResembleLyric2Response(struct soap *soap, const char *tag, _ns1__GetResembleLyric2Response *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetResembleLyric2Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetResembleLyric2Response, sizeof(_ns1__GetResembleLyric2Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetResembleLyric2Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetResembleLyric2Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetResembleLyric2Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetResembleLyric2Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, "ns1:GetResembleLyric2Result", &(a->_ns1__GetResembleLyric2Response::GetResembleLyric2Result), "ns1:ArrayOfST_GET_RESEMBLELYRIC2_RETURN"))
				{	soap_flag_GetResembleLyric2Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetResembleLyric2Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetResembleLyric2Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetResembleLyric2Response, 0, sizeof(_ns1__GetResembleLyric2Response), 0, soap_copy__ns1__GetResembleLyric2Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetResembleLyric2Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetResembleLyric2Response);
	if (this->soap_out(soap, tag?tag:"ns1:GetResembleLyric2Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetResembleLyric2Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetResembleLyric2Response(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric2Response * SOAP_FMAC4 soap_get__ns1__GetResembleLyric2Response(struct soap *soap, _ns1__GetResembleLyric2Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetResembleLyric2Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetResembleLyric2Response * SOAP_FMAC2 soap_instantiate__ns1__GetResembleLyric2Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetResembleLyric2Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetResembleLyric2Response, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetResembleLyric2Response);
		if (size)
			*size = sizeof(_ns1__GetResembleLyric2Response);
		((_ns1__GetResembleLyric2Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetResembleLyric2Response, n);
		if (size)
			*size = n * sizeof(_ns1__GetResembleLyric2Response);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetResembleLyric2Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetResembleLyric2Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetResembleLyric2Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetResembleLyric2Response %p -> %p\n", q, p));
	*(_ns1__GetResembleLyric2Response*)p = *(_ns1__GetResembleLyric2Response*)q;
}

void _ns1__GetResembleLyric2::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetResembleLyric2::stQuery = NULL;
	/* transient soap skipped */
}

void _ns1__GetResembleLyric2::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(soap, &this->_ns1__GetResembleLyric2::stQuery);
	/* transient soap skipped */
#endif
}

int _ns1__GetResembleLyric2::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetResembleLyric2(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetResembleLyric2(struct soap *soap, const char *tag, int id, const _ns1__GetResembleLyric2 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetResembleLyric2), type))
		return soap->error;
	if (a->_ns1__GetResembleLyric2::stQuery)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(soap, "ns1:stQuery", -1, &a->_ns1__GetResembleLyric2::stQuery, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:stQuery"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetResembleLyric2::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetResembleLyric2(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric2 * SOAP_FMAC4 soap_in__ns1__GetResembleLyric2(struct soap *soap, const char *tag, _ns1__GetResembleLyric2 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetResembleLyric2 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetResembleLyric2, sizeof(_ns1__GetResembleLyric2), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetResembleLyric2)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetResembleLyric2 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_stQuery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stQuery1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(soap, "ns1:stQuery", &(a->_ns1__GetResembleLyric2::stQuery), "ns1:ST_GET_RESEMBLELYRIC2_QUERY"))
				{	soap_flag_stQuery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetResembleLyric2 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetResembleLyric2, 0, sizeof(_ns1__GetResembleLyric2), 0, soap_copy__ns1__GetResembleLyric2);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stQuery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetResembleLyric2::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetResembleLyric2);
	if (this->soap_out(soap, tag?tag:"ns1:GetResembleLyric2", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetResembleLyric2::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetResembleLyric2(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric2 * SOAP_FMAC4 soap_get__ns1__GetResembleLyric2(struct soap *soap, _ns1__GetResembleLyric2 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetResembleLyric2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetResembleLyric2 * SOAP_FMAC2 soap_instantiate__ns1__GetResembleLyric2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetResembleLyric2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetResembleLyric2, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetResembleLyric2);
		if (size)
			*size = sizeof(_ns1__GetResembleLyric2);
		((_ns1__GetResembleLyric2*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetResembleLyric2, n);
		if (size)
			*size = n * sizeof(_ns1__GetResembleLyric2);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetResembleLyric2*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetResembleLyric2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetResembleLyric2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetResembleLyric2 %p -> %p\n", q, p));
	*(_ns1__GetResembleLyric2*)p = *(_ns1__GetResembleLyric2*)q;
}

void _ns1__SetLinkLyricResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__SetLinkLyricResponse::SetLinkLyricResult);
	this->_ns1__SetLinkLyricResponse::resultString = NULL;
	/* transient soap skipped */
}

void _ns1__SetLinkLyricResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetLinkLyricResponse::resultString);
	/* transient soap skipped */
#endif
}

int _ns1__SetLinkLyricResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetLinkLyricResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetLinkLyricResponse(struct soap *soap, const char *tag, int id, const _ns1__SetLinkLyricResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetLinkLyricResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:SetLinkLyricResult");
	if (soap_out_bool(soap, "ns1:SetLinkLyricResult", -1, &(a->_ns1__SetLinkLyricResponse::SetLinkLyricResult), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:resultString", -1, &(a->_ns1__SetLinkLyricResponse::resultString), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetLinkLyricResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetLinkLyricResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetLinkLyricResponse * SOAP_FMAC4 soap_in__ns1__SetLinkLyricResponse(struct soap *soap, const char *tag, _ns1__SetLinkLyricResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetLinkLyricResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetLinkLyricResponse, sizeof(_ns1__SetLinkLyricResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetLinkLyricResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetLinkLyricResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SetLinkLyricResult1 = 1;
	size_t soap_flag_resultString1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SetLinkLyricResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:SetLinkLyricResult", &(a->_ns1__SetLinkLyricResponse::SetLinkLyricResult), "xsd:boolean"))
				{	soap_flag_SetLinkLyricResult1--;
					continue;
				}
			if (soap_flag_resultString1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:resultString", &(a->_ns1__SetLinkLyricResponse::resultString), "xsd:string"))
				{	soap_flag_resultString1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SetLinkLyricResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetLinkLyricResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetLinkLyricResponse, 0, sizeof(_ns1__SetLinkLyricResponse), 0, soap_copy__ns1__SetLinkLyricResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_SetLinkLyricResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__SetLinkLyricResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__SetLinkLyricResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SetLinkLyricResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetLinkLyricResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetLinkLyricResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetLinkLyricResponse * SOAP_FMAC4 soap_get__ns1__SetLinkLyricResponse(struct soap *soap, _ns1__SetLinkLyricResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetLinkLyricResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetLinkLyricResponse * SOAP_FMAC2 soap_instantiate__ns1__SetLinkLyricResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetLinkLyricResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetLinkLyricResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetLinkLyricResponse);
		if (size)
			*size = sizeof(_ns1__SetLinkLyricResponse);
		((_ns1__SetLinkLyricResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__SetLinkLyricResponse, n);
		if (size)
			*size = n * sizeof(_ns1__SetLinkLyricResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__SetLinkLyricResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__SetLinkLyricResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetLinkLyricResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetLinkLyricResponse %p -> %p\n", q, p));
	*(_ns1__SetLinkLyricResponse*)p = *(_ns1__SetLinkLyricResponse*)q;
}

void _ns1__SetLinkLyric::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetLinkLyric::encData = NULL;
	this->_ns1__SetLinkLyric::md5 = NULL;
	soap_default_int(soap, &this->_ns1__SetLinkLyric::lyricID);
	this->_ns1__SetLinkLyric::version = NULL;
	/* transient soap skipped */
}

void _ns1__SetLinkLyric::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetLinkLyric::encData);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetLinkLyric::md5);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetLinkLyric::version);
	/* transient soap skipped */
#endif
}

int _ns1__SetLinkLyric::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetLinkLyric(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetLinkLyric(struct soap *soap, const char *tag, int id, const _ns1__SetLinkLyric *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetLinkLyric), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:encData", -1, &(a->_ns1__SetLinkLyric::encData), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:md5", -1, &(a->_ns1__SetLinkLyric::md5), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:lyricID", -1, &(a->_ns1__SetLinkLyric::lyricID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:version", -1, &(a->_ns1__SetLinkLyric::version), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetLinkLyric::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetLinkLyric(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetLinkLyric * SOAP_FMAC4 soap_in__ns1__SetLinkLyric(struct soap *soap, const char *tag, _ns1__SetLinkLyric *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetLinkLyric *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetLinkLyric, sizeof(_ns1__SetLinkLyric), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetLinkLyric)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetLinkLyric *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_encData1 = 1;
	size_t soap_flag_md51 = 1;
	size_t soap_flag_lyricID1 = 1;
	size_t soap_flag_version1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_encData1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:encData", &(a->_ns1__SetLinkLyric::encData), "xsd:string"))
				{	soap_flag_encData1--;
					continue;
				}
			if (soap_flag_md51 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:md5", &(a->_ns1__SetLinkLyric::md5), "xsd:string"))
				{	soap_flag_md51--;
					continue;
				}
			if (soap_flag_lyricID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:lyricID", &(a->_ns1__SetLinkLyric::lyricID), "xsd:int"))
				{	soap_flag_lyricID1--;
					continue;
				}
			if (soap_flag_version1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:version", &(a->_ns1__SetLinkLyric::version), "xsd:string"))
				{	soap_flag_version1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetLinkLyric *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetLinkLyric, 0, sizeof(_ns1__SetLinkLyric), 0, soap_copy__ns1__SetLinkLyric);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_lyricID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__SetLinkLyric::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__SetLinkLyric);
	if (this->soap_out(soap, tag?tag:"ns1:SetLinkLyric", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetLinkLyric::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetLinkLyric(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetLinkLyric * SOAP_FMAC4 soap_get__ns1__SetLinkLyric(struct soap *soap, _ns1__SetLinkLyric *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetLinkLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetLinkLyric * SOAP_FMAC2 soap_instantiate__ns1__SetLinkLyric(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetLinkLyric(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetLinkLyric, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetLinkLyric);
		if (size)
			*size = sizeof(_ns1__SetLinkLyric);
		((_ns1__SetLinkLyric*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__SetLinkLyric, n);
		if (size)
			*size = n * sizeof(_ns1__SetLinkLyric);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__SetLinkLyric*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__SetLinkLyric*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetLinkLyric(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetLinkLyric %p -> %p\n", q, p));
	*(_ns1__SetLinkLyric*)p = *(_ns1__SetLinkLyric*)q;
}

void _ns1__GetSyncLyricBySearchResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetSyncLyricBySearchResponse::GetSyncLyricBySearchResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetSyncLyricBySearchResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, &this->_ns1__GetSyncLyricBySearchResponse::GetSyncLyricBySearchResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetSyncLyricBySearchResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetSyncLyricBySearchResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSyncLyricBySearchResponse(struct soap *soap, const char *tag, int id, const _ns1__GetSyncLyricBySearchResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetSyncLyricBySearchResponse), type))
		return soap->error;
	if (a->GetSyncLyricBySearchResult)
		soap_element_result(soap, "ns1:GetSyncLyricBySearchResult");
	if (a->_ns1__GetSyncLyricBySearchResponse::GetSyncLyricBySearchResult)
	{	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, "ns1:GetSyncLyricBySearchResult", -1, &a->_ns1__GetSyncLyricBySearchResponse::GetSyncLyricBySearchResult, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:GetSyncLyricBySearchResult"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetSyncLyricBySearchResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetSyncLyricBySearchResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetSyncLyricBySearchResponse * SOAP_FMAC4 soap_in__ns1__GetSyncLyricBySearchResponse(struct soap *soap, const char *tag, _ns1__GetSyncLyricBySearchResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetSyncLyricBySearchResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetSyncLyricBySearchResponse, sizeof(_ns1__GetSyncLyricBySearchResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetSyncLyricBySearchResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetSyncLyricBySearchResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetSyncLyricBySearchResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetSyncLyricBySearchResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, "ns1:GetSyncLyricBySearchResult", &(a->_ns1__GetSyncLyricBySearchResponse::GetSyncLyricBySearchResult), "ns1:ST_GET_LYRIC5_RETURN"))
				{	soap_flag_GetSyncLyricBySearchResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetSyncLyricBySearchResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetSyncLyricBySearchResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetSyncLyricBySearchResponse, 0, sizeof(_ns1__GetSyncLyricBySearchResponse), 0, soap_copy__ns1__GetSyncLyricBySearchResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetSyncLyricBySearchResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetSyncLyricBySearchResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetSyncLyricBySearchResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetSyncLyricBySearchResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetSyncLyricBySearchResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetSyncLyricBySearchResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetSyncLyricBySearchResponse * SOAP_FMAC4 soap_get__ns1__GetSyncLyricBySearchResponse(struct soap *soap, _ns1__GetSyncLyricBySearchResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetSyncLyricBySearchResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetSyncLyricBySearchResponse * SOAP_FMAC2 soap_instantiate__ns1__GetSyncLyricBySearchResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetSyncLyricBySearchResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetSyncLyricBySearchResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetSyncLyricBySearchResponse);
		if (size)
			*size = sizeof(_ns1__GetSyncLyricBySearchResponse);
		((_ns1__GetSyncLyricBySearchResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetSyncLyricBySearchResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetSyncLyricBySearchResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetSyncLyricBySearchResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetSyncLyricBySearchResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetSyncLyricBySearchResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetSyncLyricBySearchResponse %p -> %p\n", q, p));
	*(_ns1__GetSyncLyricBySearchResponse*)p = *(_ns1__GetSyncLyricBySearchResponse*)q;
}

void _ns1__GetSyncLyricBySearch::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetSyncLyricBySearch::encData = NULL;
	this->_ns1__GetSyncLyricBySearch::title = NULL;
	this->_ns1__GetSyncLyricBySearch::artist = NULL;
	soap_default_int(soap, &this->_ns1__GetSyncLyricBySearch::playtime);
	/* transient soap skipped */
}

void _ns1__GetSyncLyricBySearch::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetSyncLyricBySearch::encData);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetSyncLyricBySearch::title);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetSyncLyricBySearch::artist);
	/* transient soap skipped */
#endif
}

int _ns1__GetSyncLyricBySearch::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetSyncLyricBySearch(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSyncLyricBySearch(struct soap *soap, const char *tag, int id, const _ns1__GetSyncLyricBySearch *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetSyncLyricBySearch), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:encData", -1, &(a->_ns1__GetSyncLyricBySearch::encData), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:title", -1, &(a->_ns1__GetSyncLyricBySearch::title), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:artist", -1, &(a->_ns1__GetSyncLyricBySearch::artist), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:playtime", -1, &(a->_ns1__GetSyncLyricBySearch::playtime), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetSyncLyricBySearch::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetSyncLyricBySearch(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetSyncLyricBySearch * SOAP_FMAC4 soap_in__ns1__GetSyncLyricBySearch(struct soap *soap, const char *tag, _ns1__GetSyncLyricBySearch *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetSyncLyricBySearch *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetSyncLyricBySearch, sizeof(_ns1__GetSyncLyricBySearch), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetSyncLyricBySearch)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetSyncLyricBySearch *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_encData1 = 1;
	size_t soap_flag_title1 = 1;
	size_t soap_flag_artist1 = 1;
	size_t soap_flag_playtime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_encData1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:encData", &(a->_ns1__GetSyncLyricBySearch::encData), "xsd:string"))
				{	soap_flag_encData1--;
					continue;
				}
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:title", &(a->_ns1__GetSyncLyricBySearch::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			if (soap_flag_artist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:artist", &(a->_ns1__GetSyncLyricBySearch::artist), "xsd:string"))
				{	soap_flag_artist1--;
					continue;
				}
			if (soap_flag_playtime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:playtime", &(a->_ns1__GetSyncLyricBySearch::playtime), "xsd:int"))
				{	soap_flag_playtime1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetSyncLyricBySearch *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetSyncLyricBySearch, 0, sizeof(_ns1__GetSyncLyricBySearch), 0, soap_copy__ns1__GetSyncLyricBySearch);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_playtime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetSyncLyricBySearch::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetSyncLyricBySearch);
	if (this->soap_out(soap, tag?tag:"ns1:GetSyncLyricBySearch", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetSyncLyricBySearch::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetSyncLyricBySearch(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetSyncLyricBySearch * SOAP_FMAC4 soap_get__ns1__GetSyncLyricBySearch(struct soap *soap, _ns1__GetSyncLyricBySearch *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetSyncLyricBySearch(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetSyncLyricBySearch * SOAP_FMAC2 soap_instantiate__ns1__GetSyncLyricBySearch(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetSyncLyricBySearch(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetSyncLyricBySearch, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetSyncLyricBySearch);
		if (size)
			*size = sizeof(_ns1__GetSyncLyricBySearch);
		((_ns1__GetSyncLyricBySearch*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetSyncLyricBySearch, n);
		if (size)
			*size = n * sizeof(_ns1__GetSyncLyricBySearch);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetSyncLyricBySearch*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetSyncLyricBySearch*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetSyncLyricBySearch(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetSyncLyricBySearch %p -> %p\n", q, p));
	*(_ns1__GetSyncLyricBySearch*)p = *(_ns1__GetSyncLyricBySearch*)q;
}

void _ns1__GetMurekaInfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__GetMurekaInfoResponse::GetMurekaInfoResult);
	this->_ns1__GetMurekaInfoResponse::output = NULL;
	/* transient soap skipped */
}

void _ns1__GetMurekaInfoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ST_USCOREMUREKAINFO_USCORESERVICE(soap, &this->_ns1__GetMurekaInfoResponse::output);
	/* transient soap skipped */
#endif
}

int _ns1__GetMurekaInfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetMurekaInfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMurekaInfoResponse(struct soap *soap, const char *tag, int id, const _ns1__GetMurekaInfoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetMurekaInfoResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:GetMurekaInfoResult");
	if (soap_out_bool(soap, "ns1:GetMurekaInfoResult", -1, &(a->_ns1__GetMurekaInfoResponse::GetMurekaInfoResult), ""))
		return soap->error;
	if (a->_ns1__GetMurekaInfoResponse::output)
	{	if (soap_out_PointerTons1__ST_USCOREMUREKAINFO_USCORESERVICE(soap, "ns1:output", -1, &a->_ns1__GetMurekaInfoResponse::output, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:output"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetMurekaInfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetMurekaInfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetMurekaInfoResponse * SOAP_FMAC4 soap_in__ns1__GetMurekaInfoResponse(struct soap *soap, const char *tag, _ns1__GetMurekaInfoResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetMurekaInfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetMurekaInfoResponse, sizeof(_ns1__GetMurekaInfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetMurekaInfoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetMurekaInfoResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMurekaInfoResult1 = 1;
	size_t soap_flag_output1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMurekaInfoResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:GetMurekaInfoResult", &(a->_ns1__GetMurekaInfoResponse::GetMurekaInfoResult), "xsd:boolean"))
				{	soap_flag_GetMurekaInfoResult1--;
					continue;
				}
			if (soap_flag_output1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ST_USCOREMUREKAINFO_USCORESERVICE(soap, "ns1:output", &(a->_ns1__GetMurekaInfoResponse::output), "ns1:ST_MUREKAINFO_SERVICE"))
				{	soap_flag_output1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetMurekaInfoResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetMurekaInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetMurekaInfoResponse, 0, sizeof(_ns1__GetMurekaInfoResponse), 0, soap_copy__ns1__GetMurekaInfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetMurekaInfoResult1 > 0 || soap_flag_output1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetMurekaInfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetMurekaInfoResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetMurekaInfoResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetMurekaInfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetMurekaInfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetMurekaInfoResponse * SOAP_FMAC4 soap_get__ns1__GetMurekaInfoResponse(struct soap *soap, _ns1__GetMurekaInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetMurekaInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetMurekaInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMurekaInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetMurekaInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetMurekaInfoResponse, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetMurekaInfoResponse);
		if (size)
			*size = sizeof(_ns1__GetMurekaInfoResponse);
		((_ns1__GetMurekaInfoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetMurekaInfoResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetMurekaInfoResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetMurekaInfoResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetMurekaInfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetMurekaInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetMurekaInfoResponse %p -> %p\n", q, p));
	*(_ns1__GetMurekaInfoResponse*)p = *(_ns1__GetMurekaInfoResponse*)q;
}

void _ns1__GetMurekaInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetMurekaInfo::encData = NULL;
	this->_ns1__GetMurekaInfo::md5 = NULL;
	/* transient soap skipped */
}

void _ns1__GetMurekaInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetMurekaInfo::encData);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetMurekaInfo::md5);
	/* transient soap skipped */
#endif
}

int _ns1__GetMurekaInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetMurekaInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMurekaInfo(struct soap *soap, const char *tag, int id, const _ns1__GetMurekaInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetMurekaInfo), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:encData", -1, &(a->_ns1__GetMurekaInfo::encData), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:md5", -1, &(a->_ns1__GetMurekaInfo::md5), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetMurekaInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetMurekaInfo(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetMurekaInfo * SOAP_FMAC4 soap_in__ns1__GetMurekaInfo(struct soap *soap, const char *tag, _ns1__GetMurekaInfo *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetMurekaInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetMurekaInfo, sizeof(_ns1__GetMurekaInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetMurekaInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetMurekaInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_encData1 = 1;
	size_t soap_flag_md51 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_encData1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:encData", &(a->_ns1__GetMurekaInfo::encData), "xsd:string"))
				{	soap_flag_encData1--;
					continue;
				}
			if (soap_flag_md51 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:md5", &(a->_ns1__GetMurekaInfo::md5), "xsd:string"))
				{	soap_flag_md51--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetMurekaInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetMurekaInfo, 0, sizeof(_ns1__GetMurekaInfo), 0, soap_copy__ns1__GetMurekaInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetMurekaInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetMurekaInfo);
	if (this->soap_out(soap, tag?tag:"ns1:GetMurekaInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetMurekaInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetMurekaInfo(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetMurekaInfo * SOAP_FMAC4 soap_get__ns1__GetMurekaInfo(struct soap *soap, _ns1__GetMurekaInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetMurekaInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetMurekaInfo * SOAP_FMAC2 soap_instantiate__ns1__GetMurekaInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetMurekaInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetMurekaInfo, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetMurekaInfo);
		if (size)
			*size = sizeof(_ns1__GetMurekaInfo);
		((_ns1__GetMurekaInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetMurekaInfo, n);
		if (size)
			*size = n * sizeof(_ns1__GetMurekaInfo);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetMurekaInfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetMurekaInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetMurekaInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetMurekaInfo %p -> %p\n", q, p));
	*(_ns1__GetMurekaInfo*)p = *(_ns1__GetMurekaInfo*)q;
}

void ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT::infoID);
	soap_default_int(soap, &this->ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT::result);
	/* transient soap skipped */
}

void ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, const char *tag, int id, const ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:infoID", -1, &(a->ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT::infoID), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:result", -1, &(a->ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT::result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * SOAP_FMAC4 soap_in_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, const char *tag, ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT, sizeof(ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_infoID1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_infoID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:infoID", &(a->ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT::infoID), "xsd:int"))
				{	soap_flag_infoID1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:result", &(a->ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT::result), "xsd:int"))
				{	soap_flag_result1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT, 0, sizeof(ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT), 0, soap_copy_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_infoID1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT);
	if (this->soap_out(soap, tag?tag:"ns1:ST_LYRIC_DELETE_RESULT", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * SOAP_FMAC4 soap_get_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * SOAP_FMAC2 soap_instantiate_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT);
		if (size)
			*size = sizeof(ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT);
		((ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT %p -> %p\n", q, p));
	*(ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT*)p = *(ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT*)q;
}

void ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, &this->ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT::ST_USCORELYRIC_USCOREDELETE_USCORERESULT);
	/* transient soap skipped */
}

void ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, &this->ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT::ST_USCORELYRIC_USCOREDELETE_USCORERESULT);
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, const char *tag, int id, const ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, "ns1:ST_LYRIC_DELETE_RESULT", -1, &(a->ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT::ST_USCORELYRIC_USCOREDELETE_USCORERESULT), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT * SOAP_FMAC4 soap_in_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, const char *tag, ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT, sizeof(ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, "ns1:ST_LYRIC_DELETE_RESULT", &(a->ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT::ST_USCORELYRIC_USCOREDELETE_USCORERESULT), "ns1:ST_LYRIC_DELETE_RESULT"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT, 0, sizeof(ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT), 0, soap_copy_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfST_LYRIC_DELETE_RESULT", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT * SOAP_FMAC4 soap_get_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT);
		if (size)
			*size = sizeof(ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT);
		((ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT %p -> %p\n", q, p));
	*(ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT*)p = *(ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT*)q;
}

void ns1__ArrayOfInt::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfint(soap, &this->ns1__ArrayOfInt::int_);
	/* transient soap skipped */
}

void ns1__ArrayOfInt::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfint(soap, &this->ns1__ArrayOfInt::int_);
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfInt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfInt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfInt(struct soap *soap, const char *tag, int id, const ns1__ArrayOfInt *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfInt), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfint(soap, "ns1:int", -1, &(a->ns1__ArrayOfInt::int_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfInt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfInt(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfInt * SOAP_FMAC4 soap_in_ns1__ArrayOfInt(struct soap *soap, const char *tag, ns1__ArrayOfInt *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfInt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfInt, sizeof(ns1__ArrayOfInt), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfInt)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfInt *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfint(soap, "ns1:int", &(a->ns1__ArrayOfInt::int_), "xsd:int"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfInt *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfInt, 0, sizeof(ns1__ArrayOfInt), 0, soap_copy_ns1__ArrayOfInt);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfInt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ArrayOfInt);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfInt", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfInt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfInt(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfInt * SOAP_FMAC4 soap_get_ns1__ArrayOfInt(struct soap *soap, ns1__ArrayOfInt *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfInt * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfInt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfInt, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfInt);
		if (size)
			*size = sizeof(ns1__ArrayOfInt);
		((ns1__ArrayOfInt*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfInt, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfInt);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfInt*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfInt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfInt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfInt %p -> %p\n", q, p));
	*(ns1__ArrayOfInt*)p = *(ns1__ArrayOfInt*)q;
}

void ns1__ST_USCORELYRIC_USCOREFORMONITOR::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__ST_USCORELYRIC_USCOREFORMONITOR::infoID);
	this->ns1__ST_USCORELYRIC_USCOREFORMONITOR::lyric = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCORELYRIC_USCOREFORMONITOR::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORELYRIC_USCOREFORMONITOR::lyric);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCORELYRIC_USCOREFORMONITOR::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCORELYRIC_USCOREFORMONITOR(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, const char *tag, int id, const ns1__ST_USCORELYRIC_USCOREFORMONITOR *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREFORMONITOR), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:infoID", -1, &(a->ns1__ST_USCORELYRIC_USCOREFORMONITOR::infoID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:lyric", -1, &(a->ns1__ST_USCORELYRIC_USCOREFORMONITOR::lyric), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCORELYRIC_USCOREFORMONITOR::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCORELYRIC_USCOREFORMONITOR(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCORELYRIC_USCOREFORMONITOR * SOAP_FMAC4 soap_in_ns1__ST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, const char *tag, ns1__ST_USCORELYRIC_USCOREFORMONITOR *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCORELYRIC_USCOREFORMONITOR *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREFORMONITOR, sizeof(ns1__ST_USCORELYRIC_USCOREFORMONITOR), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREFORMONITOR)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCORELYRIC_USCOREFORMONITOR *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_infoID1 = 1;
	size_t soap_flag_lyric1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_infoID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:infoID", &(a->ns1__ST_USCORELYRIC_USCOREFORMONITOR::infoID), "xsd:int"))
				{	soap_flag_infoID1--;
					continue;
				}
			if (soap_flag_lyric1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:lyric", &(a->ns1__ST_USCORELYRIC_USCOREFORMONITOR::lyric), "xsd:string"))
				{	soap_flag_lyric1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCORELYRIC_USCOREFORMONITOR *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREFORMONITOR, 0, sizeof(ns1__ST_USCORELYRIC_USCOREFORMONITOR), 0, soap_copy_ns1__ST_USCORELYRIC_USCOREFORMONITOR);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_infoID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCORELYRIC_USCOREFORMONITOR::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREFORMONITOR);
	if (this->soap_out(soap, tag?tag:"ns1:ST_LYRIC_FORMONITOR", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCORELYRIC_USCOREFORMONITOR::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCORELYRIC_USCOREFORMONITOR(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCORELYRIC_USCOREFORMONITOR * SOAP_FMAC4 soap_get_ns1__ST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, ns1__ST_USCORELYRIC_USCOREFORMONITOR *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCORELYRIC_USCOREFORMONITOR(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCORELYRIC_USCOREFORMONITOR * SOAP_FMAC2 soap_instantiate_ns1__ST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCORELYRIC_USCOREFORMONITOR(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREFORMONITOR, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCORELYRIC_USCOREFORMONITOR);
		if (size)
			*size = sizeof(ns1__ST_USCORELYRIC_USCOREFORMONITOR);
		((ns1__ST_USCORELYRIC_USCOREFORMONITOR*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCORELYRIC_USCOREFORMONITOR, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCORELYRIC_USCOREFORMONITOR);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCORELYRIC_USCOREFORMONITOR*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCORELYRIC_USCOREFORMONITOR*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCORELYRIC_USCOREFORMONITOR %p -> %p\n", q, p));
	*(ns1__ST_USCORELYRIC_USCOREFORMONITOR*)p = *(ns1__ST_USCORELYRIC_USCOREFORMONITOR*)q;
}

void ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(soap, &this->ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR::ST_USCORELYRIC_USCOREFORMONITOR);
	/* transient soap skipped */
}

void ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(soap, &this->ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR::ST_USCORELYRIC_USCOREFORMONITOR);
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, const char *tag, int id, const ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(soap, "ns1:ST_LYRIC_FORMONITOR", -1, &(a->ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR::ST_USCORELYRIC_USCOREFORMONITOR), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR * SOAP_FMAC4 soap_in_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, const char *tag, ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR, sizeof(ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(soap, "ns1:ST_LYRIC_FORMONITOR", &(a->ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR::ST_USCORELYRIC_USCOREFORMONITOR), "ns1:ST_LYRIC_FORMONITOR"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR, 0, sizeof(ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR), 0, soap_copy_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfST_LYRIC_FORMONITOR", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR * SOAP_FMAC4 soap_get_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR);
		if (size)
			*size = sizeof(ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR);
		((ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR %p -> %p\n", q, p));
	*(ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR*)p = *(ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR*)q;
}

void ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, &this->ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN::ST_USCORERIGHTSINFO_USCOREJPN);
	/* transient soap skipped */
}

void ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, &this->ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN::ST_USCORERIGHTSINFO_USCOREJPN);
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, const char *tag, int id, const ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, "ns1:ST_RIGHTSINFO_JPN", -1, &(a->ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN::ST_USCORERIGHTSINFO_USCOREJPN), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN * SOAP_FMAC4 soap_in_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN, sizeof(ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, "ns1:ST_RIGHTSINFO_JPN", &(a->ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN::ST_USCORERIGHTSINFO_USCOREJPN), "ns1:ST_RIGHTSINFO_JPN"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN, 0, sizeof(ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN), 0, soap_copy_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfST_RIGHTSINFO_JPN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN * SOAP_FMAC4 soap_get_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN);
		if (size)
			*size = sizeof(ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN);
		((ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN %p -> %p\n", q, p));
	*(ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN*)p = *(ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN*)q;
}

void ns1__ST_USCORERIGHTSINFO_USCOREJPN::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__ST_USCORERIGHTSINFO_USCOREJPN::infoID);
	this->ns1__ST_USCORERIGHTSINFO_USCOREJPN::title = NULL;
	this->ns1__ST_USCORERIGHTSINFO_USCOREJPN::album = NULL;
	this->ns1__ST_USCORERIGHTSINFO_USCOREJPN::artist = NULL;
	this->ns1__ST_USCORERIGHTSINFO_USCOREJPN::rightsNum1 = NULL;
	this->ns1__ST_USCORERIGHTSINFO_USCOREJPN::rightsNum2 = NULL;
	this->ns1__ST_USCORERIGHTSINFO_USCOREJPN::rightsNum3 = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCORERIGHTSINFO_USCOREJPN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORERIGHTSINFO_USCOREJPN::title);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORERIGHTSINFO_USCOREJPN::album);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORERIGHTSINFO_USCOREJPN::artist);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORERIGHTSINFO_USCOREJPN::rightsNum1);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORERIGHTSINFO_USCOREJPN::rightsNum2);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORERIGHTSINFO_USCOREJPN::rightsNum3);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCORERIGHTSINFO_USCOREJPN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCORERIGHTSINFO_USCOREJPN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, const char *tag, int id, const ns1__ST_USCORERIGHTSINFO_USCOREJPN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCORERIGHTSINFO_USCOREJPN), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:infoID", -1, &(a->ns1__ST_USCORERIGHTSINFO_USCOREJPN::infoID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:title", -1, &(a->ns1__ST_USCORERIGHTSINFO_USCOREJPN::title), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:album", -1, &(a->ns1__ST_USCORERIGHTSINFO_USCOREJPN::album), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:artist", -1, &(a->ns1__ST_USCORERIGHTSINFO_USCOREJPN::artist), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:rightsNum1", -1, &(a->ns1__ST_USCORERIGHTSINFO_USCOREJPN::rightsNum1), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:rightsNum2", -1, &(a->ns1__ST_USCORERIGHTSINFO_USCOREJPN::rightsNum2), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:rightsNum3", -1, &(a->ns1__ST_USCORERIGHTSINFO_USCOREJPN::rightsNum3), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCORERIGHTSINFO_USCOREJPN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCORERIGHTSINFO_USCOREJPN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCORERIGHTSINFO_USCOREJPN * SOAP_FMAC4 soap_in_ns1__ST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, const char *tag, ns1__ST_USCORERIGHTSINFO_USCOREJPN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCORERIGHTSINFO_USCOREJPN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCORERIGHTSINFO_USCOREJPN, sizeof(ns1__ST_USCORERIGHTSINFO_USCOREJPN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCORERIGHTSINFO_USCOREJPN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCORERIGHTSINFO_USCOREJPN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_infoID1 = 1;
	size_t soap_flag_title1 = 1;
	size_t soap_flag_album1 = 1;
	size_t soap_flag_artist1 = 1;
	size_t soap_flag_rightsNum11 = 1;
	size_t soap_flag_rightsNum21 = 1;
	size_t soap_flag_rightsNum31 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_infoID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:infoID", &(a->ns1__ST_USCORERIGHTSINFO_USCOREJPN::infoID), "xsd:int"))
				{	soap_flag_infoID1--;
					continue;
				}
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:title", &(a->ns1__ST_USCORERIGHTSINFO_USCOREJPN::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			if (soap_flag_album1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:album", &(a->ns1__ST_USCORERIGHTSINFO_USCOREJPN::album), "xsd:string"))
				{	soap_flag_album1--;
					continue;
				}
			if (soap_flag_artist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:artist", &(a->ns1__ST_USCORERIGHTSINFO_USCOREJPN::artist), "xsd:string"))
				{	soap_flag_artist1--;
					continue;
				}
			if (soap_flag_rightsNum11 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:rightsNum1", &(a->ns1__ST_USCORERIGHTSINFO_USCOREJPN::rightsNum1), "xsd:string"))
				{	soap_flag_rightsNum11--;
					continue;
				}
			if (soap_flag_rightsNum21 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:rightsNum2", &(a->ns1__ST_USCORERIGHTSINFO_USCOREJPN::rightsNum2), "xsd:string"))
				{	soap_flag_rightsNum21--;
					continue;
				}
			if (soap_flag_rightsNum31 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:rightsNum3", &(a->ns1__ST_USCORERIGHTSINFO_USCOREJPN::rightsNum3), "xsd:string"))
				{	soap_flag_rightsNum31--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCORERIGHTSINFO_USCOREJPN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCORERIGHTSINFO_USCOREJPN, 0, sizeof(ns1__ST_USCORERIGHTSINFO_USCOREJPN), 0, soap_copy_ns1__ST_USCORERIGHTSINFO_USCOREJPN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_infoID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCORERIGHTSINFO_USCOREJPN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCORERIGHTSINFO_USCOREJPN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_RIGHTSINFO_JPN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCORERIGHTSINFO_USCOREJPN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCORERIGHTSINFO_USCOREJPN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCORERIGHTSINFO_USCOREJPN * SOAP_FMAC4 soap_get_ns1__ST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, ns1__ST_USCORERIGHTSINFO_USCOREJPN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCORERIGHTSINFO_USCOREJPN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCORERIGHTSINFO_USCOREJPN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCORERIGHTSINFO_USCOREJPN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCORERIGHTSINFO_USCOREJPN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCORERIGHTSINFO_USCOREJPN);
		if (size)
			*size = sizeof(ns1__ST_USCORERIGHTSINFO_USCOREJPN);
		((ns1__ST_USCORERIGHTSINFO_USCOREJPN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCORERIGHTSINFO_USCOREJPN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCORERIGHTSINFO_USCOREJPN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCORERIGHTSINFO_USCOREJPN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCORERIGHTSINFO_USCOREJPN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCORERIGHTSINFO_USCOREJPN %p -> %p\n", q, p));
	*(ns1__ST_USCORERIGHTSINFO_USCOREJPN*)p = *(ns1__ST_USCORERIGHTSINFO_USCOREJPN*)q;
}

void ns1__ST_USCORELYRICINFO::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCORELYRICINFO::lyricID = NULL;
	this->ns1__ST_USCORELYRICINFO::title = NULL;
	this->ns1__ST_USCORELYRICINFO::lyric = NULL;
	this->ns1__ST_USCORELYRICINFO::artist = NULL;
	this->ns1__ST_USCORELYRICINFO::album = NULL;
	this->ns1__ST_USCORELYRICINFO::registerName = NULL;
	this->ns1__ST_USCORELYRICINFO::registerMail = NULL;
	this->ns1__ST_USCORELYRICINFO::registerHomeURL = NULL;
	this->ns1__ST_USCORELYRICINFO::registerPhone = NULL;
	this->ns1__ST_USCORELYRICINFO::registerComment = NULL;
	this->ns1__ST_USCORELYRICINFO::modifierName = NULL;
	this->ns1__ST_USCORELYRICINFO::modifierMail = NULL;
	this->ns1__ST_USCORELYRICINFO::modifierHomeURL = NULL;
	this->ns1__ST_USCORELYRICINFO::modifierPhone = NULL;
	this->ns1__ST_USCORELYRICINFO::modifierComment = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCORELYRICINFO::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORELYRICINFO::lyricID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORELYRICINFO::title);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORELYRICINFO::lyric);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORELYRICINFO::artist);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORELYRICINFO::album);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORELYRICINFO::registerName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORELYRICINFO::registerMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORELYRICINFO::registerHomeURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORELYRICINFO::registerPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORELYRICINFO::registerComment);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORELYRICINFO::modifierName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORELYRICINFO::modifierMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORELYRICINFO::modifierHomeURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORELYRICINFO::modifierPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORELYRICINFO::modifierComment);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCORELYRICINFO::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCORELYRICINFO(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCORELYRICINFO(struct soap *soap, const char *tag, int id, const ns1__ST_USCORELYRICINFO *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCORELYRICINFO), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:lyricID", -1, &(a->ns1__ST_USCORELYRICINFO::lyricID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:title", -1, &(a->ns1__ST_USCORELYRICINFO::title), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:lyric", -1, &(a->ns1__ST_USCORELYRICINFO::lyric), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:artist", -1, &(a->ns1__ST_USCORELYRICINFO::artist), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:album", -1, &(a->ns1__ST_USCORELYRICINFO::album), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:registerName", -1, &(a->ns1__ST_USCORELYRICINFO::registerName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:registerMail", -1, &(a->ns1__ST_USCORELYRICINFO::registerMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:registerHomeURL", -1, &(a->ns1__ST_USCORELYRICINFO::registerHomeURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:registerPhone", -1, &(a->ns1__ST_USCORELYRICINFO::registerPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:registerComment", -1, &(a->ns1__ST_USCORELYRICINFO::registerComment), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:modifierName", -1, &(a->ns1__ST_USCORELYRICINFO::modifierName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:modifierMail", -1, &(a->ns1__ST_USCORELYRICINFO::modifierMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:modifierHomeURL", -1, &(a->ns1__ST_USCORELYRICINFO::modifierHomeURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:modifierPhone", -1, &(a->ns1__ST_USCORELYRICINFO::modifierPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:modifierComment", -1, &(a->ns1__ST_USCORELYRICINFO::modifierComment), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCORELYRICINFO::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCORELYRICINFO(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCORELYRICINFO * SOAP_FMAC4 soap_in_ns1__ST_USCORELYRICINFO(struct soap *soap, const char *tag, ns1__ST_USCORELYRICINFO *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCORELYRICINFO *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCORELYRICINFO, sizeof(ns1__ST_USCORELYRICINFO), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCORELYRICINFO)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCORELYRICINFO *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_lyricID1 = 1;
	size_t soap_flag_title1 = 1;
	size_t soap_flag_lyric1 = 1;
	size_t soap_flag_artist1 = 1;
	size_t soap_flag_album1 = 1;
	size_t soap_flag_registerName1 = 1;
	size_t soap_flag_registerMail1 = 1;
	size_t soap_flag_registerHomeURL1 = 1;
	size_t soap_flag_registerPhone1 = 1;
	size_t soap_flag_registerComment1 = 1;
	size_t soap_flag_modifierName1 = 1;
	size_t soap_flag_modifierMail1 = 1;
	size_t soap_flag_modifierHomeURL1 = 1;
	size_t soap_flag_modifierPhone1 = 1;
	size_t soap_flag_modifierComment1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_lyricID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:lyricID", &(a->ns1__ST_USCORELYRICINFO::lyricID), "xsd:string"))
				{	soap_flag_lyricID1--;
					continue;
				}
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:title", &(a->ns1__ST_USCORELYRICINFO::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			if (soap_flag_lyric1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:lyric", &(a->ns1__ST_USCORELYRICINFO::lyric), "xsd:string"))
				{	soap_flag_lyric1--;
					continue;
				}
			if (soap_flag_artist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:artist", &(a->ns1__ST_USCORELYRICINFO::artist), "xsd:string"))
				{	soap_flag_artist1--;
					continue;
				}
			if (soap_flag_album1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:album", &(a->ns1__ST_USCORELYRICINFO::album), "xsd:string"))
				{	soap_flag_album1--;
					continue;
				}
			if (soap_flag_registerName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:registerName", &(a->ns1__ST_USCORELYRICINFO::registerName), "xsd:string"))
				{	soap_flag_registerName1--;
					continue;
				}
			if (soap_flag_registerMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:registerMail", &(a->ns1__ST_USCORELYRICINFO::registerMail), "xsd:string"))
				{	soap_flag_registerMail1--;
					continue;
				}
			if (soap_flag_registerHomeURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:registerHomeURL", &(a->ns1__ST_USCORELYRICINFO::registerHomeURL), "xsd:string"))
				{	soap_flag_registerHomeURL1--;
					continue;
				}
			if (soap_flag_registerPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:registerPhone", &(a->ns1__ST_USCORELYRICINFO::registerPhone), "xsd:string"))
				{	soap_flag_registerPhone1--;
					continue;
				}
			if (soap_flag_registerComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:registerComment", &(a->ns1__ST_USCORELYRICINFO::registerComment), "xsd:string"))
				{	soap_flag_registerComment1--;
					continue;
				}
			if (soap_flag_modifierName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:modifierName", &(a->ns1__ST_USCORELYRICINFO::modifierName), "xsd:string"))
				{	soap_flag_modifierName1--;
					continue;
				}
			if (soap_flag_modifierMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:modifierMail", &(a->ns1__ST_USCORELYRICINFO::modifierMail), "xsd:string"))
				{	soap_flag_modifierMail1--;
					continue;
				}
			if (soap_flag_modifierHomeURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:modifierHomeURL", &(a->ns1__ST_USCORELYRICINFO::modifierHomeURL), "xsd:string"))
				{	soap_flag_modifierHomeURL1--;
					continue;
				}
			if (soap_flag_modifierPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:modifierPhone", &(a->ns1__ST_USCORELYRICINFO::modifierPhone), "xsd:string"))
				{	soap_flag_modifierPhone1--;
					continue;
				}
			if (soap_flag_modifierComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:modifierComment", &(a->ns1__ST_USCORELYRICINFO::modifierComment), "xsd:string"))
				{	soap_flag_modifierComment1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCORELYRICINFO *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCORELYRICINFO, 0, sizeof(ns1__ST_USCORELYRICINFO), 0, soap_copy_ns1__ST_USCORELYRICINFO);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCORELYRICINFO::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCORELYRICINFO);
	if (this->soap_out(soap, tag?tag:"ns1:ST_LYRICINFO", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCORELYRICINFO::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCORELYRICINFO(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCORELYRICINFO * SOAP_FMAC4 soap_get_ns1__ST_USCORELYRICINFO(struct soap *soap, ns1__ST_USCORELYRICINFO *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCORELYRICINFO(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCORELYRICINFO * SOAP_FMAC2 soap_instantiate_ns1__ST_USCORELYRICINFO(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCORELYRICINFO(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCORELYRICINFO, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCORELYRICINFO);
		if (size)
			*size = sizeof(ns1__ST_USCORELYRICINFO);
		((ns1__ST_USCORELYRICINFO*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCORELYRICINFO, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCORELYRICINFO);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCORELYRICINFO*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCORELYRICINFO*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCORELYRICINFO(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCORELYRICINFO %p -> %p\n", q, p));
	*(ns1__ST_USCORELYRICINFO*)p = *(ns1__ST_USCORELYRICINFO*)q;
}

void ns1__ST_USCORESEARCHLYRIC_USCORELIST::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCORESEARCHLYRIC_USCORELIST::lyricID = NULL;
	this->ns1__ST_USCORESEARCHLYRIC_USCORELIST::title = NULL;
	this->ns1__ST_USCORESEARCHLYRIC_USCORELIST::artist = NULL;
	this->ns1__ST_USCORESEARCHLYRIC_USCORELIST::album = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCORESEARCHLYRIC_USCORELIST::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORESEARCHLYRIC_USCORELIST::lyricID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORESEARCHLYRIC_USCORELIST::title);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORESEARCHLYRIC_USCORELIST::artist);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORESEARCHLYRIC_USCORELIST::album);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCORESEARCHLYRIC_USCORELIST::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCORESEARCHLYRIC_USCORELIST(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, const char *tag, int id, const ns1__ST_USCORESEARCHLYRIC_USCORELIST *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCORESEARCHLYRIC_USCORELIST), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:lyricID", -1, &(a->ns1__ST_USCORESEARCHLYRIC_USCORELIST::lyricID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:title", -1, &(a->ns1__ST_USCORESEARCHLYRIC_USCORELIST::title), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:artist", -1, &(a->ns1__ST_USCORESEARCHLYRIC_USCORELIST::artist), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:album", -1, &(a->ns1__ST_USCORESEARCHLYRIC_USCORELIST::album), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCORESEARCHLYRIC_USCORELIST::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCORESEARCHLYRIC_USCORELIST(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCORESEARCHLYRIC_USCORELIST * SOAP_FMAC4 soap_in_ns1__ST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, const char *tag, ns1__ST_USCORESEARCHLYRIC_USCORELIST *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCORESEARCHLYRIC_USCORELIST *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCORESEARCHLYRIC_USCORELIST, sizeof(ns1__ST_USCORESEARCHLYRIC_USCORELIST), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCORESEARCHLYRIC_USCORELIST)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCORESEARCHLYRIC_USCORELIST *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_lyricID1 = 1;
	size_t soap_flag_title1 = 1;
	size_t soap_flag_artist1 = 1;
	size_t soap_flag_album1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_lyricID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:lyricID", &(a->ns1__ST_USCORESEARCHLYRIC_USCORELIST::lyricID), "xsd:string"))
				{	soap_flag_lyricID1--;
					continue;
				}
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:title", &(a->ns1__ST_USCORESEARCHLYRIC_USCORELIST::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			if (soap_flag_artist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:artist", &(a->ns1__ST_USCORESEARCHLYRIC_USCORELIST::artist), "xsd:string"))
				{	soap_flag_artist1--;
					continue;
				}
			if (soap_flag_album1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:album", &(a->ns1__ST_USCORESEARCHLYRIC_USCORELIST::album), "xsd:string"))
				{	soap_flag_album1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCORESEARCHLYRIC_USCORELIST *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCORESEARCHLYRIC_USCORELIST, 0, sizeof(ns1__ST_USCORESEARCHLYRIC_USCORELIST), 0, soap_copy_ns1__ST_USCORESEARCHLYRIC_USCORELIST);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCORESEARCHLYRIC_USCORELIST::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCORESEARCHLYRIC_USCORELIST);
	if (this->soap_out(soap, tag?tag:"ns1:ST_SEARCHLYRIC_LIST", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCORESEARCHLYRIC_USCORELIST::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCORESEARCHLYRIC_USCORELIST(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCORESEARCHLYRIC_USCORELIST * SOAP_FMAC4 soap_get_ns1__ST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, ns1__ST_USCORESEARCHLYRIC_USCORELIST *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCORESEARCHLYRIC_USCORELIST(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCORESEARCHLYRIC_USCORELIST * SOAP_FMAC2 soap_instantiate_ns1__ST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCORESEARCHLYRIC_USCORELIST(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCORESEARCHLYRIC_USCORELIST, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCORESEARCHLYRIC_USCORELIST);
		if (size)
			*size = sizeof(ns1__ST_USCORESEARCHLYRIC_USCORELIST);
		((ns1__ST_USCORESEARCHLYRIC_USCORELIST*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCORESEARCHLYRIC_USCORELIST, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCORESEARCHLYRIC_USCORELIST);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCORESEARCHLYRIC_USCORELIST*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCORESEARCHLYRIC_USCORELIST*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCORESEARCHLYRIC_USCORELIST %p -> %p\n", q, p));
	*(ns1__ST_USCORESEARCHLYRIC_USCORELIST*)p = *(ns1__ST_USCORESEARCHLYRIC_USCORELIST*)q;
}

void ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(soap, &this->ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST::ST_USCORESEARCHLYRIC_USCORELIST);
	/* transient soap skipped */
}

void ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(soap, &this->ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST::ST_USCORESEARCHLYRIC_USCORELIST);
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, const char *tag, int id, const ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(soap, "ns1:ST_SEARCHLYRIC_LIST", -1, &(a->ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST::ST_USCORESEARCHLYRIC_USCORELIST), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST * SOAP_FMAC4 soap_in_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, const char *tag, ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST, sizeof(ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(soap, "ns1:ST_SEARCHLYRIC_LIST", &(a->ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST::ST_USCORESEARCHLYRIC_USCORELIST), "ns1:ST_SEARCHLYRIC_LIST"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST, 0, sizeof(ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST), 0, soap_copy_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfST_SEARCHLYRIC_LIST", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST * SOAP_FMAC4 soap_get_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST);
		if (size)
			*size = sizeof(ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST);
		((ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST %p -> %p\n", q, p));
	*(ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST*)p = *(ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST*)q;
}

void ns1__UploadForeignLyricInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__UploadForeignLyricInfo::MD5 = NULL;
	this->ns1__UploadForeignLyricInfo::regionalCode_USCOREfile = NULL;
	this->ns1__UploadForeignLyricInfo::registerFirstName = NULL;
	this->ns1__UploadForeignLyricInfo::registerFirstEmail = NULL;
	this->ns1__UploadForeignLyricInfo::registerFirstURL = NULL;
	this->ns1__UploadForeignLyricInfo::registerFirstPhone = NULL;
	this->ns1__UploadForeignLyricInfo::registerFirstComment = NULL;
	this->ns1__UploadForeignLyricInfo::registerName = NULL;
	this->ns1__UploadForeignLyricInfo::registerEmail = NULL;
	this->ns1__UploadForeignLyricInfo::registerURL = NULL;
	this->ns1__UploadForeignLyricInfo::registerPhone = NULL;
	this->ns1__UploadForeignLyricInfo::registerComment = NULL;
	this->ns1__UploadForeignLyricInfo::title = NULL;
	this->ns1__UploadForeignLyricInfo::artist = NULL;
	this->ns1__UploadForeignLyricInfo::album = NULL;
	this->ns1__UploadForeignLyricInfo::lyric = NULL;
	this->ns1__UploadForeignLyricInfo::lyricGuid = NULL;
	this->ns1__UploadForeignLyricInfo::regionalCode_USCORElyric = NULL;
	this->ns1__UploadForeignLyricInfo::registerMAC = NULL;
	this->ns1__UploadForeignLyricInfo::registerIP = NULL;
	this->ns1__UploadForeignLyricInfo::modified = NULL;
	this->ns1__UploadForeignLyricInfo::regionalCode_USCOREsender = NULL;
	/* transient soap skipped */
}

void ns1__UploadForeignLyricInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::MD5);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::regionalCode_USCOREfile);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::registerFirstName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::registerFirstEmail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::registerFirstURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::registerFirstPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::registerFirstComment);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::registerName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::registerEmail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::registerURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::registerPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::registerComment);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::title);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::artist);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::album);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::lyric);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::lyricGuid);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::regionalCode_USCORElyric);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::registerMAC);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::registerIP);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::modified);
	soap_serialize_PointerTostd__string(soap, &this->ns1__UploadForeignLyricInfo::regionalCode_USCOREsender);
	/* transient soap skipped */
#endif
}

int ns1__UploadForeignLyricInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__UploadForeignLyricInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UploadForeignLyricInfo(struct soap *soap, const char *tag, int id, const ns1__UploadForeignLyricInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__UploadForeignLyricInfo), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:MD5", -1, &(a->ns1__UploadForeignLyricInfo::MD5), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:regionalCode_file", -1, &(a->ns1__UploadForeignLyricInfo::regionalCode_USCOREfile), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:registerFirstName", -1, &(a->ns1__UploadForeignLyricInfo::registerFirstName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:registerFirstEmail", -1, &(a->ns1__UploadForeignLyricInfo::registerFirstEmail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:registerFirstURL", -1, &(a->ns1__UploadForeignLyricInfo::registerFirstURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:registerFirstPhone", -1, &(a->ns1__UploadForeignLyricInfo::registerFirstPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:registerFirstComment", -1, &(a->ns1__UploadForeignLyricInfo::registerFirstComment), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:registerName", -1, &(a->ns1__UploadForeignLyricInfo::registerName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:registerEmail", -1, &(a->ns1__UploadForeignLyricInfo::registerEmail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:registerURL", -1, &(a->ns1__UploadForeignLyricInfo::registerURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:registerPhone", -1, &(a->ns1__UploadForeignLyricInfo::registerPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:registerComment", -1, &(a->ns1__UploadForeignLyricInfo::registerComment), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:title", -1, &(a->ns1__UploadForeignLyricInfo::title), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:artist", -1, &(a->ns1__UploadForeignLyricInfo::artist), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:album", -1, &(a->ns1__UploadForeignLyricInfo::album), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:lyric", -1, &(a->ns1__UploadForeignLyricInfo::lyric), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:lyricGuid", -1, &(a->ns1__UploadForeignLyricInfo::lyricGuid), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:regionalCode_lyric", -1, &(a->ns1__UploadForeignLyricInfo::regionalCode_USCORElyric), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:registerMAC", -1, &(a->ns1__UploadForeignLyricInfo::registerMAC), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:registerIP", -1, &(a->ns1__UploadForeignLyricInfo::registerIP), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:modified", -1, &(a->ns1__UploadForeignLyricInfo::modified), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:regionalCode_sender", -1, &(a->ns1__UploadForeignLyricInfo::regionalCode_USCOREsender), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__UploadForeignLyricInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__UploadForeignLyricInfo(soap, tag, this, type);
}

SOAP_FMAC3 ns1__UploadForeignLyricInfo * SOAP_FMAC4 soap_in_ns1__UploadForeignLyricInfo(struct soap *soap, const char *tag, ns1__UploadForeignLyricInfo *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__UploadForeignLyricInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__UploadForeignLyricInfo, sizeof(ns1__UploadForeignLyricInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__UploadForeignLyricInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__UploadForeignLyricInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_MD51 = 1;
	size_t soap_flag_regionalCode_USCOREfile1 = 1;
	size_t soap_flag_registerFirstName1 = 1;
	size_t soap_flag_registerFirstEmail1 = 1;
	size_t soap_flag_registerFirstURL1 = 1;
	size_t soap_flag_registerFirstPhone1 = 1;
	size_t soap_flag_registerFirstComment1 = 1;
	size_t soap_flag_registerName1 = 1;
	size_t soap_flag_registerEmail1 = 1;
	size_t soap_flag_registerURL1 = 1;
	size_t soap_flag_registerPhone1 = 1;
	size_t soap_flag_registerComment1 = 1;
	size_t soap_flag_title1 = 1;
	size_t soap_flag_artist1 = 1;
	size_t soap_flag_album1 = 1;
	size_t soap_flag_lyric1 = 1;
	size_t soap_flag_lyricGuid1 = 1;
	size_t soap_flag_regionalCode_USCORElyric1 = 1;
	size_t soap_flag_registerMAC1 = 1;
	size_t soap_flag_registerIP1 = 1;
	size_t soap_flag_modified1 = 1;
	size_t soap_flag_regionalCode_USCOREsender1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MD51 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:MD5", &(a->ns1__UploadForeignLyricInfo::MD5), "xsd:string"))
				{	soap_flag_MD51--;
					continue;
				}
			if (soap_flag_regionalCode_USCOREfile1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:regionalCode_file", &(a->ns1__UploadForeignLyricInfo::regionalCode_USCOREfile), "xsd:string"))
				{	soap_flag_regionalCode_USCOREfile1--;
					continue;
				}
			if (soap_flag_registerFirstName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:registerFirstName", &(a->ns1__UploadForeignLyricInfo::registerFirstName), "xsd:string"))
				{	soap_flag_registerFirstName1--;
					continue;
				}
			if (soap_flag_registerFirstEmail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:registerFirstEmail", &(a->ns1__UploadForeignLyricInfo::registerFirstEmail), "xsd:string"))
				{	soap_flag_registerFirstEmail1--;
					continue;
				}
			if (soap_flag_registerFirstURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:registerFirstURL", &(a->ns1__UploadForeignLyricInfo::registerFirstURL), "xsd:string"))
				{	soap_flag_registerFirstURL1--;
					continue;
				}
			if (soap_flag_registerFirstPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:registerFirstPhone", &(a->ns1__UploadForeignLyricInfo::registerFirstPhone), "xsd:string"))
				{	soap_flag_registerFirstPhone1--;
					continue;
				}
			if (soap_flag_registerFirstComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:registerFirstComment", &(a->ns1__UploadForeignLyricInfo::registerFirstComment), "xsd:string"))
				{	soap_flag_registerFirstComment1--;
					continue;
				}
			if (soap_flag_registerName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:registerName", &(a->ns1__UploadForeignLyricInfo::registerName), "xsd:string"))
				{	soap_flag_registerName1--;
					continue;
				}
			if (soap_flag_registerEmail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:registerEmail", &(a->ns1__UploadForeignLyricInfo::registerEmail), "xsd:string"))
				{	soap_flag_registerEmail1--;
					continue;
				}
			if (soap_flag_registerURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:registerURL", &(a->ns1__UploadForeignLyricInfo::registerURL), "xsd:string"))
				{	soap_flag_registerURL1--;
					continue;
				}
			if (soap_flag_registerPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:registerPhone", &(a->ns1__UploadForeignLyricInfo::registerPhone), "xsd:string"))
				{	soap_flag_registerPhone1--;
					continue;
				}
			if (soap_flag_registerComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:registerComment", &(a->ns1__UploadForeignLyricInfo::registerComment), "xsd:string"))
				{	soap_flag_registerComment1--;
					continue;
				}
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:title", &(a->ns1__UploadForeignLyricInfo::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			if (soap_flag_artist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:artist", &(a->ns1__UploadForeignLyricInfo::artist), "xsd:string"))
				{	soap_flag_artist1--;
					continue;
				}
			if (soap_flag_album1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:album", &(a->ns1__UploadForeignLyricInfo::album), "xsd:string"))
				{	soap_flag_album1--;
					continue;
				}
			if (soap_flag_lyric1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:lyric", &(a->ns1__UploadForeignLyricInfo::lyric), "xsd:string"))
				{	soap_flag_lyric1--;
					continue;
				}
			if (soap_flag_lyricGuid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:lyricGuid", &(a->ns1__UploadForeignLyricInfo::lyricGuid), "xsd:string"))
				{	soap_flag_lyricGuid1--;
					continue;
				}
			if (soap_flag_regionalCode_USCORElyric1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:regionalCode_lyric", &(a->ns1__UploadForeignLyricInfo::regionalCode_USCORElyric), "xsd:string"))
				{	soap_flag_regionalCode_USCORElyric1--;
					continue;
				}
			if (soap_flag_registerMAC1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:registerMAC", &(a->ns1__UploadForeignLyricInfo::registerMAC), "xsd:string"))
				{	soap_flag_registerMAC1--;
					continue;
				}
			if (soap_flag_registerIP1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:registerIP", &(a->ns1__UploadForeignLyricInfo::registerIP), "xsd:string"))
				{	soap_flag_registerIP1--;
					continue;
				}
			if (soap_flag_modified1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:modified", &(a->ns1__UploadForeignLyricInfo::modified), "xsd:string"))
				{	soap_flag_modified1--;
					continue;
				}
			if (soap_flag_regionalCode_USCOREsender1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:regionalCode_sender", &(a->ns1__UploadForeignLyricInfo::regionalCode_USCOREsender), "xsd:string"))
				{	soap_flag_regionalCode_USCOREsender1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__UploadForeignLyricInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__UploadForeignLyricInfo, 0, sizeof(ns1__UploadForeignLyricInfo), 0, soap_copy_ns1__UploadForeignLyricInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__UploadForeignLyricInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__UploadForeignLyricInfo);
	if (this->soap_out(soap, tag?tag:"ns1:UploadForeignLyricInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__UploadForeignLyricInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__UploadForeignLyricInfo(soap, this, tag, type);
}

SOAP_FMAC3 ns1__UploadForeignLyricInfo * SOAP_FMAC4 soap_get_ns1__UploadForeignLyricInfo(struct soap *soap, ns1__UploadForeignLyricInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__UploadForeignLyricInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__UploadForeignLyricInfo * SOAP_FMAC2 soap_instantiate_ns1__UploadForeignLyricInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__UploadForeignLyricInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__UploadForeignLyricInfo, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__UploadForeignLyricInfo);
		if (size)
			*size = sizeof(ns1__UploadForeignLyricInfo);
		((ns1__UploadForeignLyricInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__UploadForeignLyricInfo, n);
		if (size)
			*size = n * sizeof(ns1__UploadForeignLyricInfo);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__UploadForeignLyricInfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__UploadForeignLyricInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__UploadForeignLyricInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__UploadForeignLyricInfo %p -> %p\n", q, p));
	*(ns1__UploadForeignLyricInfo*)p = *(ns1__UploadForeignLyricInfo*)q;
}

void ns1__GetBroadcastingListReturn::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__GetBroadcastingListReturn::address = NULL;
	this->ns1__GetBroadcastingListReturn::title = NULL;
	/* transient soap skipped */
}

void ns1__GetBroadcastingListReturn::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__GetBroadcastingListReturn::address);
	soap_serialize_PointerTostd__string(soap, &this->ns1__GetBroadcastingListReturn::title);
	/* transient soap skipped */
#endif
}

int ns1__GetBroadcastingListReturn::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__GetBroadcastingListReturn(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetBroadcastingListReturn(struct soap *soap, const char *tag, int id, const ns1__GetBroadcastingListReturn *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__GetBroadcastingListReturn), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:address", -1, &(a->ns1__GetBroadcastingListReturn::address), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:title", -1, &(a->ns1__GetBroadcastingListReturn::title), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__GetBroadcastingListReturn::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__GetBroadcastingListReturn(soap, tag, this, type);
}

SOAP_FMAC3 ns1__GetBroadcastingListReturn * SOAP_FMAC4 soap_in_ns1__GetBroadcastingListReturn(struct soap *soap, const char *tag, ns1__GetBroadcastingListReturn *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__GetBroadcastingListReturn *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__GetBroadcastingListReturn, sizeof(ns1__GetBroadcastingListReturn), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__GetBroadcastingListReturn)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__GetBroadcastingListReturn *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_address1 = 1;
	size_t soap_flag_title1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_address1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:address", &(a->ns1__GetBroadcastingListReturn::address), "xsd:string"))
				{	soap_flag_address1--;
					continue;
				}
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:title", &(a->ns1__GetBroadcastingListReturn::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__GetBroadcastingListReturn *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__GetBroadcastingListReturn, 0, sizeof(ns1__GetBroadcastingListReturn), 0, soap_copy_ns1__GetBroadcastingListReturn);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__GetBroadcastingListReturn::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__GetBroadcastingListReturn);
	if (this->soap_out(soap, tag?tag:"ns1:GetBroadcastingListReturn", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__GetBroadcastingListReturn::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__GetBroadcastingListReturn(soap, this, tag, type);
}

SOAP_FMAC3 ns1__GetBroadcastingListReturn * SOAP_FMAC4 soap_get_ns1__GetBroadcastingListReturn(struct soap *soap, ns1__GetBroadcastingListReturn *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__GetBroadcastingListReturn(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__GetBroadcastingListReturn * SOAP_FMAC2 soap_instantiate_ns1__GetBroadcastingListReturn(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__GetBroadcastingListReturn(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__GetBroadcastingListReturn, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__GetBroadcastingListReturn);
		if (size)
			*size = sizeof(ns1__GetBroadcastingListReturn);
		((ns1__GetBroadcastingListReturn*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__GetBroadcastingListReturn, n);
		if (size)
			*size = n * sizeof(ns1__GetBroadcastingListReturn);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__GetBroadcastingListReturn*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__GetBroadcastingListReturn*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__GetBroadcastingListReturn(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__GetBroadcastingListReturn %p -> %p\n", q, p));
	*(ns1__GetBroadcastingListReturn*)p = *(ns1__GetBroadcastingListReturn*)q;
}

void ns1__ArrayOfGetBroadcastingListReturn::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__GetBroadcastingListReturn(soap, &this->ns1__ArrayOfGetBroadcastingListReturn::GetBroadcastingListReturn);
	/* transient soap skipped */
}

void ns1__ArrayOfGetBroadcastingListReturn::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__GetBroadcastingListReturn(soap, &this->ns1__ArrayOfGetBroadcastingListReturn::GetBroadcastingListReturn);
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfGetBroadcastingListReturn::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfGetBroadcastingListReturn(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfGetBroadcastingListReturn(struct soap *soap, const char *tag, int id, const ns1__ArrayOfGetBroadcastingListReturn *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfGetBroadcastingListReturn), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__GetBroadcastingListReturn(soap, "ns1:GetBroadcastingListReturn", -1, &(a->ns1__ArrayOfGetBroadcastingListReturn::GetBroadcastingListReturn), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfGetBroadcastingListReturn::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfGetBroadcastingListReturn(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfGetBroadcastingListReturn * SOAP_FMAC4 soap_in_ns1__ArrayOfGetBroadcastingListReturn(struct soap *soap, const char *tag, ns1__ArrayOfGetBroadcastingListReturn *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfGetBroadcastingListReturn *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfGetBroadcastingListReturn, sizeof(ns1__ArrayOfGetBroadcastingListReturn), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfGetBroadcastingListReturn)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfGetBroadcastingListReturn *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__GetBroadcastingListReturn(soap, "ns1:GetBroadcastingListReturn", &(a->ns1__ArrayOfGetBroadcastingListReturn::GetBroadcastingListReturn), "ns1:GetBroadcastingListReturn"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfGetBroadcastingListReturn *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfGetBroadcastingListReturn, 0, sizeof(ns1__ArrayOfGetBroadcastingListReturn), 0, soap_copy_ns1__ArrayOfGetBroadcastingListReturn);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfGetBroadcastingListReturn::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ArrayOfGetBroadcastingListReturn);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfGetBroadcastingListReturn", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfGetBroadcastingListReturn::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfGetBroadcastingListReturn(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfGetBroadcastingListReturn * SOAP_FMAC4 soap_get_ns1__ArrayOfGetBroadcastingListReturn(struct soap *soap, ns1__ArrayOfGetBroadcastingListReturn *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfGetBroadcastingListReturn(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfGetBroadcastingListReturn * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfGetBroadcastingListReturn(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfGetBroadcastingListReturn(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfGetBroadcastingListReturn, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfGetBroadcastingListReturn);
		if (size)
			*size = sizeof(ns1__ArrayOfGetBroadcastingListReturn);
		((ns1__ArrayOfGetBroadcastingListReturn*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfGetBroadcastingListReturn, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfGetBroadcastingListReturn);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfGetBroadcastingListReturn*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfGetBroadcastingListReturn*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfGetBroadcastingListReturn(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfGetBroadcastingListReturn %p -> %p\n", q, p));
	*(ns1__ArrayOfGetBroadcastingListReturn*)p = *(ns1__ArrayOfGetBroadcastingListReturn*)q;
}

void ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strCastID = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strCastTitle = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strListenURL = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strMusicTitle = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strRefURL = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strIntro = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strSortOrder = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strCreateDate = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strListenerCount = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::genre = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strCastID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strCastTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strListenURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strMusicTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strRefURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strIntro);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strSortOrder);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strCreateDate);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strListenerCount);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::genre);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCastID", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strCastID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCastTitle", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strCastTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strListenURL", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strListenURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMusicTitle", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strMusicTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRefURL", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strRefURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strIntro", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strIntro), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strSortOrder", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strSortOrder), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCreateDate", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strCreateDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strListenerCount", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strListenerCount), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:genre", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::genre), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strCastID1 = 1;
	size_t soap_flag_strCastTitle1 = 1;
	size_t soap_flag_strListenURL1 = 1;
	size_t soap_flag_strMusicTitle1 = 1;
	size_t soap_flag_strRefURL1 = 1;
	size_t soap_flag_strIntro1 = 1;
	size_t soap_flag_strSortOrder1 = 1;
	size_t soap_flag_strCreateDate1 = 1;
	size_t soap_flag_strListenerCount1 = 1;
	size_t soap_flag_genre1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strCastID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCastID", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strCastID), "xsd:string"))
				{	soap_flag_strCastID1--;
					continue;
				}
			if (soap_flag_strCastTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCastTitle", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strCastTitle), "xsd:string"))
				{	soap_flag_strCastTitle1--;
					continue;
				}
			if (soap_flag_strListenURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strListenURL", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strListenURL), "xsd:string"))
				{	soap_flag_strListenURL1--;
					continue;
				}
			if (soap_flag_strMusicTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMusicTitle", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strMusicTitle), "xsd:string"))
				{	soap_flag_strMusicTitle1--;
					continue;
				}
			if (soap_flag_strRefURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRefURL", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strRefURL), "xsd:string"))
				{	soap_flag_strRefURL1--;
					continue;
				}
			if (soap_flag_strIntro1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strIntro", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strIntro), "xsd:string"))
				{	soap_flag_strIntro1--;
					continue;
				}
			if (soap_flag_strSortOrder1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strSortOrder", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strSortOrder), "xsd:string"))
				{	soap_flag_strSortOrder1--;
					continue;
				}
			if (soap_flag_strCreateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCreateDate", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strCreateDate), "xsd:string"))
				{	soap_flag_strCreateDate1--;
					continue;
				}
			if (soap_flag_strListenerCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strListenerCount", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::strListenerCount), "xsd:string"))
				{	soap_flag_strListenerCount1--;
					continue;
				}
			if (soap_flag_genre1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:genre", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::genre), "xsd:string"))
				{	soap_flag_genre1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN, 0, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN), 0, soap_copy_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_CAST_GET_EX_METADATA_LIST3_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN);
		((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN*)p = *(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN*)q;
}

void ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, &this->ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN);
	/* transient soap skipped */
}

void ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, &this->ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN);
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, "ns1:ST_CAST_GET_EX_METADATA_LIST3_RETURN", -1, &(a->ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN, sizeof(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, "ns1:ST_CAST_GET_EX_METADATA_LIST3_RETURN", &(a->ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN), "ns1:ST_CAST_GET_EX_METADATA_LIST3_RETURN"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN, 0, sizeof(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN), 0, soap_copy_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST3_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN);
		((ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN*)p = *(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN*)q;
}

void ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strCastID = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strCastTitle = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strListenURL = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strMusicTitle = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strRefURL = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strIntro = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strSortOrder = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strCreateDate = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strListenerCount = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strCastID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strCastTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strListenURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strMusicTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strRefURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strIntro);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strSortOrder);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strCreateDate);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strListenerCount);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCastID", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strCastID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCastTitle", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strCastTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strListenURL", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strListenURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMusicTitle", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strMusicTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRefURL", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strRefURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strIntro", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strIntro), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strSortOrder", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strSortOrder), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCreateDate", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strCreateDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strListenerCount", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strListenerCount), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strCastID1 = 1;
	size_t soap_flag_strCastTitle1 = 1;
	size_t soap_flag_strListenURL1 = 1;
	size_t soap_flag_strMusicTitle1 = 1;
	size_t soap_flag_strRefURL1 = 1;
	size_t soap_flag_strIntro1 = 1;
	size_t soap_flag_strSortOrder1 = 1;
	size_t soap_flag_strCreateDate1 = 1;
	size_t soap_flag_strListenerCount1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strCastID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCastID", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strCastID), "xsd:string"))
				{	soap_flag_strCastID1--;
					continue;
				}
			if (soap_flag_strCastTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCastTitle", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strCastTitle), "xsd:string"))
				{	soap_flag_strCastTitle1--;
					continue;
				}
			if (soap_flag_strListenURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strListenURL", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strListenURL), "xsd:string"))
				{	soap_flag_strListenURL1--;
					continue;
				}
			if (soap_flag_strMusicTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMusicTitle", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strMusicTitle), "xsd:string"))
				{	soap_flag_strMusicTitle1--;
					continue;
				}
			if (soap_flag_strRefURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRefURL", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strRefURL), "xsd:string"))
				{	soap_flag_strRefURL1--;
					continue;
				}
			if (soap_flag_strIntro1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strIntro", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strIntro), "xsd:string"))
				{	soap_flag_strIntro1--;
					continue;
				}
			if (soap_flag_strSortOrder1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strSortOrder", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strSortOrder), "xsd:string"))
				{	soap_flag_strSortOrder1--;
					continue;
				}
			if (soap_flag_strCreateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCreateDate", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strCreateDate), "xsd:string"))
				{	soap_flag_strCreateDate1--;
					continue;
				}
			if (soap_flag_strListenerCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strListenerCount", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::strListenerCount), "xsd:string"))
				{	soap_flag_strListenerCount1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN, 0, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN), 0, soap_copy_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_CAST_GET_EX_METADATA_LIST2_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN);
		((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN*)p = *(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN*)q;
}

void ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, &this->ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN);
	/* transient soap skipped */
}

void ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, &this->ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN);
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, "ns1:ST_CAST_GET_EX_METADATA_LIST2_RETURN", -1, &(a->ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN, sizeof(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, "ns1:ST_CAST_GET_EX_METADATA_LIST2_RETURN", &(a->ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN), "ns1:ST_CAST_GET_EX_METADATA_LIST2_RETURN"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN, 0, sizeof(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN), 0, soap_copy_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST2_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN);
		((ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN*)p = *(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN*)q;
}

void ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strCastID = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strCastTitle = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strListenURL = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strMusicTitle = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strRefURL = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strIntro = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strSortOrder = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strCreateDate = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strCastID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strCastTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strListenURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strMusicTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strRefURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strIntro);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strSortOrder);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strCreateDate);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCastID", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strCastID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCastTitle", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strCastTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strListenURL", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strListenURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMusicTitle", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strMusicTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRefURL", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strRefURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strIntro", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strIntro), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strSortOrder", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strSortOrder), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCreateDate", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strCreateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strCastID1 = 1;
	size_t soap_flag_strCastTitle1 = 1;
	size_t soap_flag_strListenURL1 = 1;
	size_t soap_flag_strMusicTitle1 = 1;
	size_t soap_flag_strRefURL1 = 1;
	size_t soap_flag_strIntro1 = 1;
	size_t soap_flag_strSortOrder1 = 1;
	size_t soap_flag_strCreateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strCastID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCastID", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strCastID), "xsd:string"))
				{	soap_flag_strCastID1--;
					continue;
				}
			if (soap_flag_strCastTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCastTitle", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strCastTitle), "xsd:string"))
				{	soap_flag_strCastTitle1--;
					continue;
				}
			if (soap_flag_strListenURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strListenURL", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strListenURL), "xsd:string"))
				{	soap_flag_strListenURL1--;
					continue;
				}
			if (soap_flag_strMusicTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMusicTitle", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strMusicTitle), "xsd:string"))
				{	soap_flag_strMusicTitle1--;
					continue;
				}
			if (soap_flag_strRefURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRefURL", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strRefURL), "xsd:string"))
				{	soap_flag_strRefURL1--;
					continue;
				}
			if (soap_flag_strIntro1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strIntro", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strIntro), "xsd:string"))
				{	soap_flag_strIntro1--;
					continue;
				}
			if (soap_flag_strSortOrder1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strSortOrder", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strSortOrder), "xsd:string"))
				{	soap_flag_strSortOrder1--;
					continue;
				}
			if (soap_flag_strCreateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCreateDate", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::strCreateDate), "xsd:string"))
				{	soap_flag_strCreateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN, 0, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN), 0, soap_copy_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_CAST_GET_EX_METADATA_LIST_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN);
		((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN*)p = *(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN*)q;
}

void ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, &this->ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN);
	/* transient soap skipped */
}

void ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, &this->ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN);
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, "ns1:ST_CAST_GET_EX_METADATA_LIST_RETURN", -1, &(a->ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN, sizeof(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, "ns1:ST_CAST_GET_EX_METADATA_LIST_RETURN", &(a->ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN), "ns1:ST_CAST_GET_EX_METADATA_LIST_RETURN"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN, 0, sizeof(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN), 0, soap_copy_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN);
		((ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN*)p = *(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN*)q;
}

void ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strCastID = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strMD5 = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strCastTitle = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strListenURL = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strMusicTitle = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRefURL = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strMusicIntro = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strLyric = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstName = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterName = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstEMail = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterEMail = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstURL = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterURL = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstPhone = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterPhone = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstComment = NULL;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterComment = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strCastID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strMD5);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strCastTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strListenURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strMusicTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRefURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strMusicIntro);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strLyric);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstComment);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterComment);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCastID", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strCastID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMD5", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strMD5), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCastTitle", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strCastTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strListenURL", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strListenURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMusicTitle", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strMusicTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRefURL", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRefURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMusicIntro", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strMusicIntro), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strLyric", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strLyric), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstName", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterName", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstEMail", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterEMail", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstURL", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterURL", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstPhone", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterPhone", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstComment", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstComment), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterComment", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterComment), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strCastID1 = 1;
	size_t soap_flag_strMD51 = 1;
	size_t soap_flag_strCastTitle1 = 1;
	size_t soap_flag_strListenURL1 = 1;
	size_t soap_flag_strMusicTitle1 = 1;
	size_t soap_flag_strRefURL1 = 1;
	size_t soap_flag_strMusicIntro1 = 1;
	size_t soap_flag_strLyric1 = 1;
	size_t soap_flag_strRegisterFirstName1 = 1;
	size_t soap_flag_strRegisterName1 = 1;
	size_t soap_flag_strRegisterFirstEMail1 = 1;
	size_t soap_flag_strRegisterEMail1 = 1;
	size_t soap_flag_strRegisterFirstURL1 = 1;
	size_t soap_flag_strRegisterURL1 = 1;
	size_t soap_flag_strRegisterFirstPhone1 = 1;
	size_t soap_flag_strRegisterPhone1 = 1;
	size_t soap_flag_strRegisterFirstComment1 = 1;
	size_t soap_flag_strRegisterComment1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strCastID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCastID", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strCastID), "xsd:string"))
				{	soap_flag_strCastID1--;
					continue;
				}
			if (soap_flag_strMD51 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMD5", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strMD5), "xsd:string"))
				{	soap_flag_strMD51--;
					continue;
				}
			if (soap_flag_strCastTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCastTitle", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strCastTitle), "xsd:string"))
				{	soap_flag_strCastTitle1--;
					continue;
				}
			if (soap_flag_strListenURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strListenURL", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strListenURL), "xsd:string"))
				{	soap_flag_strListenURL1--;
					continue;
				}
			if (soap_flag_strMusicTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMusicTitle", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strMusicTitle), "xsd:string"))
				{	soap_flag_strMusicTitle1--;
					continue;
				}
			if (soap_flag_strRefURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRefURL", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRefURL), "xsd:string"))
				{	soap_flag_strRefURL1--;
					continue;
				}
			if (soap_flag_strMusicIntro1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMusicIntro", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strMusicIntro), "xsd:string"))
				{	soap_flag_strMusicIntro1--;
					continue;
				}
			if (soap_flag_strLyric1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strLyric", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strLyric), "xsd:string"))
				{	soap_flag_strLyric1--;
					continue;
				}
			if (soap_flag_strRegisterFirstName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstName", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstName), "xsd:string"))
				{	soap_flag_strRegisterFirstName1--;
					continue;
				}
			if (soap_flag_strRegisterName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterName", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterName), "xsd:string"))
				{	soap_flag_strRegisterName1--;
					continue;
				}
			if (soap_flag_strRegisterFirstEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstEMail", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstEMail), "xsd:string"))
				{	soap_flag_strRegisterFirstEMail1--;
					continue;
				}
			if (soap_flag_strRegisterEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterEMail", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterEMail), "xsd:string"))
				{	soap_flag_strRegisterEMail1--;
					continue;
				}
			if (soap_flag_strRegisterFirstURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstURL", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstURL), "xsd:string"))
				{	soap_flag_strRegisterFirstURL1--;
					continue;
				}
			if (soap_flag_strRegisterURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterURL", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterURL), "xsd:string"))
				{	soap_flag_strRegisterURL1--;
					continue;
				}
			if (soap_flag_strRegisterFirstPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstPhone", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstPhone), "xsd:string"))
				{	soap_flag_strRegisterFirstPhone1--;
					continue;
				}
			if (soap_flag_strRegisterPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterPhone", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterPhone), "xsd:string"))
				{	soap_flag_strRegisterPhone1--;
					continue;
				}
			if (soap_flag_strRegisterFirstComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstComment", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterFirstComment), "xsd:string"))
				{	soap_flag_strRegisterFirstComment1--;
					continue;
				}
			if (soap_flag_strRegisterComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterComment", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::strRegisterComment), "xsd:string"))
				{	soap_flag_strRegisterComment1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN, 0, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN), 0, soap_copy_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_CAST_GET_EX_METADATA_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN);
		((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN*)p = *(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN*)q;
}

void ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY::strCastID = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY::strCastID);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCastID", -1, &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY::strCastID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strCastID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strCastID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCastID", &(a->ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY::strCastID), "xsd:string"))
				{	soap_flag_strCastID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY, 0, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY), 0, soap_copy_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_CAST_GET_EX_METADATA_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY);
		((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY*)p = *(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY*)q;
}

void ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY::strCastID = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY::strCastID);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCastID", -1, &(a->ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY::strCastID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY, sizeof(ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strCastID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strCastID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCastID", &(a->ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY::strCastID), "xsd:string"))
				{	soap_flag_strCastID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY, 0, sizeof(ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY), 0, soap_copy_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_CAST_REMOVE_EX_METADATA_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY);
		((ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY*)p = *(ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY*)q;
}

void ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strCastID = NULL;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strMD5 = NULL;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strCastTitle = NULL;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strListenURL = NULL;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strMusicTitle = NULL;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strRefURL = NULL;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strIntro = NULL;
	soap_default_int(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::nSortOrder);
	soap_default_short(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::bHide);
	soap_default_int(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::nListenerCount);
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::genre = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strCastID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strMD5);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strCastTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strListenURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strMusicTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strRefURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strIntro);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::genre);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCastID", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strCastID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMD5", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strMD5), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCastTitle", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strCastTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strListenURL", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strListenURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMusicTitle", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strMusicTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRefURL", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strRefURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strIntro", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strIntro), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:nSortOrder", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::nSortOrder), ""))
		return soap->error;
	if (soap_out_short(soap, "ns1:bHide", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::bHide), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:nListenerCount", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::nListenerCount), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:genre", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::genre), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY, sizeof(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strCastID1 = 1;
	size_t soap_flag_strMD51 = 1;
	size_t soap_flag_strCastTitle1 = 1;
	size_t soap_flag_strListenURL1 = 1;
	size_t soap_flag_strMusicTitle1 = 1;
	size_t soap_flag_strRefURL1 = 1;
	size_t soap_flag_strIntro1 = 1;
	size_t soap_flag_nSortOrder1 = 1;
	size_t soap_flag_bHide1 = 1;
	size_t soap_flag_nListenerCount1 = 1;
	size_t soap_flag_genre1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strCastID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCastID", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strCastID), "xsd:string"))
				{	soap_flag_strCastID1--;
					continue;
				}
			if (soap_flag_strMD51 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMD5", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strMD5), "xsd:string"))
				{	soap_flag_strMD51--;
					continue;
				}
			if (soap_flag_strCastTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCastTitle", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strCastTitle), "xsd:string"))
				{	soap_flag_strCastTitle1--;
					continue;
				}
			if (soap_flag_strListenURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strListenURL", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strListenURL), "xsd:string"))
				{	soap_flag_strListenURL1--;
					continue;
				}
			if (soap_flag_strMusicTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMusicTitle", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strMusicTitle), "xsd:string"))
				{	soap_flag_strMusicTitle1--;
					continue;
				}
			if (soap_flag_strRefURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRefURL", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strRefURL), "xsd:string"))
				{	soap_flag_strRefURL1--;
					continue;
				}
			if (soap_flag_strIntro1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strIntro", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::strIntro), "xsd:string"))
				{	soap_flag_strIntro1--;
					continue;
				}
			if (soap_flag_nSortOrder1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nSortOrder", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::nSortOrder), "xsd:int"))
				{	soap_flag_nSortOrder1--;
					continue;
				}
			if (soap_flag_bHide1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_short(soap, "ns1:bHide", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::bHide), "xsd:short"))
				{	soap_flag_bHide1--;
					continue;
				}
			if (soap_flag_nListenerCount1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nListenerCount", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::nListenerCount), "xsd:int"))
				{	soap_flag_nListenerCount1--;
					continue;
				}
			if (soap_flag_genre1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:genre", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::genre), "xsd:string"))
				{	soap_flag_genre1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY, 0, sizeof(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY), 0, soap_copy_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nSortOrder1 > 0 || soap_flag_bHide1 > 0 || soap_flag_nListenerCount1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_CAST_UPLOAD_EX_METADATA3_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY);
		((ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY*)p = *(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY*)q;
}

void ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strCastID = NULL;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strMD5 = NULL;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strCastTitle = NULL;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strListenURL = NULL;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strMusicTitle = NULL;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strRefURL = NULL;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strIntro = NULL;
	soap_default_int(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::nSortOrder);
	soap_default_short(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::bHide);
	soap_default_int(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::nListenerCount);
	/* transient soap skipped */
}

void ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strCastID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strMD5);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strCastTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strListenURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strMusicTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strRefURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strIntro);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCastID", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strCastID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMD5", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strMD5), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCastTitle", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strCastTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strListenURL", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strListenURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMusicTitle", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strMusicTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRefURL", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strRefURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strIntro", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strIntro), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:nSortOrder", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::nSortOrder), ""))
		return soap->error;
	if (soap_out_short(soap, "ns1:bHide", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::bHide), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:nListenerCount", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::nListenerCount), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY, sizeof(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strCastID1 = 1;
	size_t soap_flag_strMD51 = 1;
	size_t soap_flag_strCastTitle1 = 1;
	size_t soap_flag_strListenURL1 = 1;
	size_t soap_flag_strMusicTitle1 = 1;
	size_t soap_flag_strRefURL1 = 1;
	size_t soap_flag_strIntro1 = 1;
	size_t soap_flag_nSortOrder1 = 1;
	size_t soap_flag_bHide1 = 1;
	size_t soap_flag_nListenerCount1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strCastID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCastID", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strCastID), "xsd:string"))
				{	soap_flag_strCastID1--;
					continue;
				}
			if (soap_flag_strMD51 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMD5", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strMD5), "xsd:string"))
				{	soap_flag_strMD51--;
					continue;
				}
			if (soap_flag_strCastTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCastTitle", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strCastTitle), "xsd:string"))
				{	soap_flag_strCastTitle1--;
					continue;
				}
			if (soap_flag_strListenURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strListenURL", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strListenURL), "xsd:string"))
				{	soap_flag_strListenURL1--;
					continue;
				}
			if (soap_flag_strMusicTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMusicTitle", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strMusicTitle), "xsd:string"))
				{	soap_flag_strMusicTitle1--;
					continue;
				}
			if (soap_flag_strRefURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRefURL", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strRefURL), "xsd:string"))
				{	soap_flag_strRefURL1--;
					continue;
				}
			if (soap_flag_strIntro1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strIntro", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::strIntro), "xsd:string"))
				{	soap_flag_strIntro1--;
					continue;
				}
			if (soap_flag_nSortOrder1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nSortOrder", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::nSortOrder), "xsd:int"))
				{	soap_flag_nSortOrder1--;
					continue;
				}
			if (soap_flag_bHide1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_short(soap, "ns1:bHide", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::bHide), "xsd:short"))
				{	soap_flag_bHide1--;
					continue;
				}
			if (soap_flag_nListenerCount1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nListenerCount", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::nListenerCount), "xsd:int"))
				{	soap_flag_nListenerCount1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY, 0, sizeof(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY), 0, soap_copy_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nSortOrder1 > 0 || soap_flag_bHide1 > 0 || soap_flag_nListenerCount1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_CAST_UPLOAD_EX_METADATA2_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY);
		((ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY*)p = *(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY*)q;
}

void ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strCastID = NULL;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strMD5 = NULL;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strCastTitle = NULL;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strListenURL = NULL;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strMusicTitle = NULL;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strRefURL = NULL;
	this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strIntro = NULL;
	soap_default_int(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::nSortOrder);
	/* transient soap skipped */
}

void ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strCastID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strMD5);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strCastTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strListenURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strMusicTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strRefURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strIntro);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCastID", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strCastID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMD5", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strMD5), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCastTitle", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strCastTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strListenURL", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strListenURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMusicTitle", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strMusicTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRefURL", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strRefURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strIntro", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strIntro), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:nSortOrder", -1, &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::nSortOrder), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY, sizeof(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strCastID1 = 1;
	size_t soap_flag_strMD51 = 1;
	size_t soap_flag_strCastTitle1 = 1;
	size_t soap_flag_strListenURL1 = 1;
	size_t soap_flag_strMusicTitle1 = 1;
	size_t soap_flag_strRefURL1 = 1;
	size_t soap_flag_strIntro1 = 1;
	size_t soap_flag_nSortOrder1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strCastID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCastID", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strCastID), "xsd:string"))
				{	soap_flag_strCastID1--;
					continue;
				}
			if (soap_flag_strMD51 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMD5", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strMD5), "xsd:string"))
				{	soap_flag_strMD51--;
					continue;
				}
			if (soap_flag_strCastTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCastTitle", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strCastTitle), "xsd:string"))
				{	soap_flag_strCastTitle1--;
					continue;
				}
			if (soap_flag_strListenURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strListenURL", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strListenURL), "xsd:string"))
				{	soap_flag_strListenURL1--;
					continue;
				}
			if (soap_flag_strMusicTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMusicTitle", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strMusicTitle), "xsd:string"))
				{	soap_flag_strMusicTitle1--;
					continue;
				}
			if (soap_flag_strRefURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRefURL", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strRefURL), "xsd:string"))
				{	soap_flag_strRefURL1--;
					continue;
				}
			if (soap_flag_strIntro1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strIntro", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::strIntro), "xsd:string"))
				{	soap_flag_strIntro1--;
					continue;
				}
			if (soap_flag_nSortOrder1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nSortOrder", &(a->ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::nSortOrder), "xsd:int"))
				{	soap_flag_nSortOrder1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY, 0, sizeof(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY), 0, soap_copy_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nSortOrder1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_CAST_UPLOAD_EX_METADATA_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY);
		((ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY*)p = *(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY*)q;
}

void ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::strModifyCount = NULL;
	this->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::strReportCount = NULL;
	this->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::strCountDate = NULL;
	this->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::strAdministratorName = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::strModifyCount);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::strReportCount);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::strCountDate);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::strAdministratorName);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strModifyCount", -1, &(a->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::strModifyCount), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strReportCount", -1, &(a->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::strReportCount), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCountDate", -1, &(a->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::strCountDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strAdministratorName", -1, &(a->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::strAdministratorName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strModifyCount1 = 1;
	size_t soap_flag_strReportCount1 = 1;
	size_t soap_flag_strCountDate1 = 1;
	size_t soap_flag_strAdministratorName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strModifyCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strModifyCount", &(a->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::strModifyCount), "xsd:string"))
				{	soap_flag_strModifyCount1--;
					continue;
				}
			if (soap_flag_strReportCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strReportCount", &(a->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::strReportCount), "xsd:string"))
				{	soap_flag_strReportCount1--;
					continue;
				}
			if (soap_flag_strCountDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCountDate", &(a->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::strCountDate), "xsd:string"))
				{	soap_flag_strCountDate1--;
					continue;
				}
			if (soap_flag_strAdministratorName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strAdministratorName", &(a->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::strAdministratorName), "xsd:string"))
				{	soap_flag_strAdministratorName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN, 0, sizeof(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN), 0, soap_copy_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_ALBA_STATISTIC_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN);
		((ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN*)p = *(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN*)q;
}

void ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, &this->ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN);
	/* transient soap skipped */
}

void ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, &this->ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN);
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, "ns1:ST_GET_ALBA_STATISTIC_RETURN", -1, &(a->ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN, sizeof(ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, "ns1:ST_GET_ALBA_STATISTIC_RETURN", &(a->ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN), "ns1:ST_GET_ALBA_STATISTIC_RETURN"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN, 0, sizeof(ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN), 0, soap_copy_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfST_GET_ALBA_STATISTIC_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN);
		((ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN*)p = *(ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN*)q;
}

void ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY::strMemberName = NULL;
	this->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY::strStartDate = NULL;
	this->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY::strEndDate = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY::strMemberName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY::strStartDate);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY::strEndDate);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMemberName", -1, &(a->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY::strMemberName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strStartDate", -1, &(a->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY::strStartDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strEndDate", -1, &(a->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY::strEndDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strMemberName1 = 1;
	size_t soap_flag_strStartDate1 = 1;
	size_t soap_flag_strEndDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strMemberName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMemberName", &(a->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY::strMemberName), "xsd:string"))
				{	soap_flag_strMemberName1--;
					continue;
				}
			if (soap_flag_strStartDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strStartDate", &(a->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY::strStartDate), "xsd:string"))
				{	soap_flag_strStartDate1--;
					continue;
				}
			if (soap_flag_strEndDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strEndDate", &(a->ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY::strEndDate), "xsd:string"))
				{	soap_flag_strEndDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY, 0, sizeof(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_ALBA_STATISTIC_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY);
		((ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY*)p = *(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY*)q;
}

void ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN::strReportCount = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN::strReportCount);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strReportCount", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN::strReportCount), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strReportCount1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strReportCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strReportCount", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN::strReportCount), "xsd:string"))
				{	soap_flag_strReportCount1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN, 0, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN), 0, soap_copy_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_COUNT_REPORT_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN);
		((ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN*)p = *(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN*)q;
}

void ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY::strStartDate = NULL;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY::strEndDate = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY::strStartDate);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY::strEndDate);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strStartDate", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY::strStartDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strEndDate", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY::strEndDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strStartDate1 = 1;
	size_t soap_flag_strEndDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strStartDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strStartDate", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY::strStartDate), "xsd:string"))
				{	soap_flag_strStartDate1--;
					continue;
				}
			if (soap_flag_strEndDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strEndDate", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY::strEndDate), "xsd:string"))
				{	soap_flag_strEndDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY, 0, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_COUNT_REPORT_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY);
		((ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY*)p = *(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY*)q;
}

void ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::strModifyCount = NULL;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::strNotAdmitCount = NULL;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::strAdmitCount = NULL;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::strDeleteCount = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::strModifyCount);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::strNotAdmitCount);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::strAdmitCount);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::strDeleteCount);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strModifyCount", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::strModifyCount), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strNotAdmitCount", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::strNotAdmitCount), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strAdmitCount", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::strAdmitCount), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strDeleteCount", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::strDeleteCount), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strModifyCount1 = 1;
	size_t soap_flag_strNotAdmitCount1 = 1;
	size_t soap_flag_strAdmitCount1 = 1;
	size_t soap_flag_strDeleteCount1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strModifyCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strModifyCount", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::strModifyCount), "xsd:string"))
				{	soap_flag_strModifyCount1--;
					continue;
				}
			if (soap_flag_strNotAdmitCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strNotAdmitCount", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::strNotAdmitCount), "xsd:string"))
				{	soap_flag_strNotAdmitCount1--;
					continue;
				}
			if (soap_flag_strAdmitCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strAdmitCount", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::strAdmitCount), "xsd:string"))
				{	soap_flag_strAdmitCount1--;
					continue;
				}
			if (soap_flag_strDeleteCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strDeleteCount", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::strDeleteCount), "xsd:string"))
				{	soap_flag_strDeleteCount1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN, 0, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN), 0, soap_copy_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_COUNT_MODIFY_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN);
		((ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN*)p = *(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN*)q;
}

void ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY::strStartDate = NULL;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY::strEndDate = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY::strStartDate);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY::strEndDate);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strStartDate", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY::strStartDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strEndDate", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY::strEndDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strStartDate1 = 1;
	size_t soap_flag_strEndDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strStartDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strStartDate", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY::strStartDate), "xsd:string"))
				{	soap_flag_strStartDate1--;
					continue;
				}
			if (soap_flag_strEndDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strEndDate", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY::strEndDate), "xsd:string"))
				{	soap_flag_strEndDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY, 0, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_COUNT_MODIFY_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY);
		((ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY*)p = *(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY*)q;
}

void ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::strInfoCount = NULL;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::strExistSyncCount = NULL;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::strExistWordCount = NULL;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::strDeletedInfoCount = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::strInfoCount);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::strExistSyncCount);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::strExistWordCount);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::strDeletedInfoCount);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strInfoCount", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::strInfoCount), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strExistSyncCount", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::strExistSyncCount), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strExistWordCount", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::strExistWordCount), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strDeletedInfoCount", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::strDeletedInfoCount), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strInfoCount1 = 1;
	size_t soap_flag_strExistSyncCount1 = 1;
	size_t soap_flag_strExistWordCount1 = 1;
	size_t soap_flag_strDeletedInfoCount1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strInfoCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strInfoCount", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::strInfoCount), "xsd:string"))
				{	soap_flag_strInfoCount1--;
					continue;
				}
			if (soap_flag_strExistSyncCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strExistSyncCount", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::strExistSyncCount), "xsd:string"))
				{	soap_flag_strExistSyncCount1--;
					continue;
				}
			if (soap_flag_strExistWordCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strExistWordCount", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::strExistWordCount), "xsd:string"))
				{	soap_flag_strExistWordCount1--;
					continue;
				}
			if (soap_flag_strDeletedInfoCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strDeletedInfoCount", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::strDeletedInfoCount), "xsd:string"))
				{	soap_flag_strDeletedInfoCount1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN, 0, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN), 0, soap_copy_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_COUNT_LYRIC_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN);
		((ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN*)p = *(ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN*)q;
}

void ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::strMainCount = NULL;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::strExistSyncCount = NULL;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::strExistWordCount = NULL;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::strDeletedMainCount = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::strMainCount);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::strExistSyncCount);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::strExistWordCount);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::strDeletedMainCount);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMainCount", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::strMainCount), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strExistSyncCount", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::strExistSyncCount), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strExistWordCount", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::strExistWordCount), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strDeletedMainCount", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::strDeletedMainCount), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strMainCount1 = 1;
	size_t soap_flag_strExistSyncCount1 = 1;
	size_t soap_flag_strExistWordCount1 = 1;
	size_t soap_flag_strDeletedMainCount1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strMainCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMainCount", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::strMainCount), "xsd:string"))
				{	soap_flag_strMainCount1--;
					continue;
				}
			if (soap_flag_strExistSyncCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strExistSyncCount", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::strExistSyncCount), "xsd:string"))
				{	soap_flag_strExistSyncCount1--;
					continue;
				}
			if (soap_flag_strExistWordCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strExistWordCount", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::strExistWordCount), "xsd:string"))
				{	soap_flag_strExistWordCount1--;
					continue;
				}
			if (soap_flag_strDeletedMainCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strDeletedMainCount", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::strDeletedMainCount), "xsd:string"))
				{	soap_flag_strDeletedMainCount1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN, 0, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN), 0, soap_copy_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_COUNT_CHECKSUM_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN);
		((ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN*)p = *(ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN*)q;
}

void ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN::strRegistLyricFirstCount = NULL;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN::strRegistLyricLastCount = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN::strRegistLyricFirstCount);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN::strRegistLyricLastCount);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegistLyricFirstCount", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN::strRegistLyricFirstCount), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegistLyricLastCount", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN::strRegistLyricLastCount), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strRegistLyricFirstCount1 = 1;
	size_t soap_flag_strRegistLyricLastCount1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strRegistLyricFirstCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegistLyricFirstCount", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN::strRegistLyricFirstCount), "xsd:string"))
				{	soap_flag_strRegistLyricFirstCount1--;
					continue;
				}
			if (soap_flag_strRegistLyricLastCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegistLyricLastCount", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN::strRegistLyricLastCount), "xsd:string"))
				{	soap_flag_strRegistLyricLastCount1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN, 0, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN), 0, soap_copy_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_COUNT_IN_REGISTER_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN);
		((ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN*)p = *(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN*)q;
}

void ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::strRegisterName = NULL;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::strRegisterEMail = NULL;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::strStartDate = NULL;
	this->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::strEndDate = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::strRegisterName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::strRegisterEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::strStartDate);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::strEndDate);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterName", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::strRegisterName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterEMail", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::strRegisterEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strStartDate", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::strStartDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strEndDate", -1, &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::strEndDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strRegisterName1 = 1;
	size_t soap_flag_strRegisterEMail1 = 1;
	size_t soap_flag_strStartDate1 = 1;
	size_t soap_flag_strEndDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strRegisterName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterName", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::strRegisterName), "xsd:string"))
				{	soap_flag_strRegisterName1--;
					continue;
				}
			if (soap_flag_strRegisterEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterEMail", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::strRegisterEMail), "xsd:string"))
				{	soap_flag_strRegisterEMail1--;
					continue;
				}
			if (soap_flag_strStartDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strStartDate", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::strStartDate), "xsd:string"))
				{	soap_flag_strStartDate1--;
					continue;
				}
			if (soap_flag_strEndDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strEndDate", &(a->ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::strEndDate), "xsd:string"))
				{	soap_flag_strEndDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY, 0, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_COUNT_IN_REGISTER_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY);
		((ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY*)p = *(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY*)q;
}

void ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_short(soap, &this->ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY::nIsModifyReport);
	soap_default_int(soap, &this->ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY::nLyricID);
	soap_default_int(soap, &this->ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY::nAdministratorID);
	/* transient soap skipped */
}

void ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY), type))
		return soap->error;
	if (soap_out_short(soap, "ns1:nIsModifyReport", -1, &(a->ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY::nIsModifyReport), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:nLyricID", -1, &(a->ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY::nLyricID), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:nAdministratorID", -1, &(a->ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY::nAdministratorID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY, sizeof(ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nIsModifyReport1 = 1;
	size_t soap_flag_nLyricID1 = 1;
	size_t soap_flag_nAdministratorID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nIsModifyReport1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_short(soap, "ns1:nIsModifyReport", &(a->ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY::nIsModifyReport), "xsd:short"))
				{	soap_flag_nIsModifyReport1--;
					continue;
				}
			if (soap_flag_nLyricID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nLyricID", &(a->ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY::nLyricID), "xsd:int"))
				{	soap_flag_nLyricID1--;
					continue;
				}
			if (soap_flag_nAdministratorID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nAdministratorID", &(a->ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY::nAdministratorID), "xsd:int"))
				{	soap_flag_nAdministratorID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY, 0, sizeof(ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nIsModifyReport1 > 0 || soap_flag_nLyricID1 > 0 || soap_flag_nAdministratorID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_REPORT_BLACKLIST_REPORT_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY);
		((ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY*)p = *(ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY*)q;
}

void ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY::strMD5 = NULL;
	this->ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY::strModifyID = NULL;
	soap_default_int(soap, &this->ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY::nAdministratorID);
	/* transient soap skipped */
}

void ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY::strMD5);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY::strModifyID);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMD5", -1, &(a->ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY::strMD5), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strModifyID", -1, &(a->ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY::strModifyID), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:nAdministratorID", -1, &(a->ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY::nAdministratorID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY, sizeof(ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strMD51 = 1;
	size_t soap_flag_strModifyID1 = 1;
	size_t soap_flag_nAdministratorID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strMD51 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMD5", &(a->ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY::strMD5), "xsd:string"))
				{	soap_flag_strMD51--;
					continue;
				}
			if (soap_flag_strModifyID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strModifyID", &(a->ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY::strModifyID), "xsd:string"))
				{	soap_flag_strModifyID1--;
					continue;
				}
			if (soap_flag_nAdministratorID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nAdministratorID", &(a->ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY::nAdministratorID), "xsd:int"))
				{	soap_flag_nAdministratorID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY, 0, sizeof(ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nAdministratorID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_ADMIT_MODIFY_LYRIC_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY);
		((ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY*)p = *(ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY*)q;
}

void ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY::strTargetName = NULL;
	this->ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY::strTargetKeyValue = NULL;
	soap_default_int(soap, &this->ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY::nAdministratorID);
	/* transient soap skipped */
}

void ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY::strTargetName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY::strTargetKeyValue);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strTargetName", -1, &(a->ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY::strTargetName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strTargetKeyValue", -1, &(a->ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY::strTargetKeyValue), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:nAdministratorID", -1, &(a->ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY::nAdministratorID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY, sizeof(ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strTargetName1 = 1;
	size_t soap_flag_strTargetKeyValue1 = 1;
	size_t soap_flag_nAdministratorID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strTargetName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strTargetName", &(a->ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY::strTargetName), "xsd:string"))
				{	soap_flag_strTargetName1--;
					continue;
				}
			if (soap_flag_strTargetKeyValue1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strTargetKeyValue", &(a->ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY::strTargetKeyValue), "xsd:string"))
				{	soap_flag_strTargetKeyValue1--;
					continue;
				}
			if (soap_flag_nAdministratorID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nAdministratorID", &(a->ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY::nAdministratorID), "xsd:int"))
				{	soap_flag_nAdministratorID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY, 0, sizeof(ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nAdministratorID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_DELETE_RECORD_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(struct soap *soap, ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY);
		((ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY*)p = *(ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY*)q;
}

void ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strLicenseID = NULL;
	this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strMemberID = NULL;
	this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strAdmission = NULL;
	this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strRegistDate = NULL;
	this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strComputerName = NULL;
	this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strComment = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strLicenseID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strMemberID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strAdmission);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strRegistDate);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strComputerName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strComment);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strLicenseID", -1, &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strLicenseID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMemberID", -1, &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strMemberID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strAdmission", -1, &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strAdmission), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegistDate", -1, &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strRegistDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strComputerName", -1, &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strComputerName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strComment", -1, &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strComment), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strLicenseID1 = 1;
	size_t soap_flag_strMemberID1 = 1;
	size_t soap_flag_strAdmission1 = 1;
	size_t soap_flag_strRegistDate1 = 1;
	size_t soap_flag_strComputerName1 = 1;
	size_t soap_flag_strComment1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strLicenseID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strLicenseID", &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strLicenseID), "xsd:string"))
				{	soap_flag_strLicenseID1--;
					continue;
				}
			if (soap_flag_strMemberID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMemberID", &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strMemberID), "xsd:string"))
				{	soap_flag_strMemberID1--;
					continue;
				}
			if (soap_flag_strAdmission1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strAdmission", &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strAdmission), "xsd:string"))
				{	soap_flag_strAdmission1--;
					continue;
				}
			if (soap_flag_strRegistDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegistDate", &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strRegistDate), "xsd:string"))
				{	soap_flag_strRegistDate1--;
					continue;
				}
			if (soap_flag_strComputerName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strComputerName", &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strComputerName), "xsd:string"))
				{	soap_flag_strComputerName1--;
					continue;
				}
			if (soap_flag_strComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strComment", &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::strComment), "xsd:string"))
				{	soap_flag_strComment1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN, 0, sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN), 0, soap_copy_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_MEMBER_LICENSE_LIST_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN);
		((ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN*)p = *(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN*)q;
}

void ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, &this->ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN);
	/* transient soap skipped */
}

void ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, &this->ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN);
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, "ns1:ST_GET_MEMBER_LICENSE_LIST_RETURN", -1, &(a->ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN, sizeof(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, "ns1:ST_GET_MEMBER_LICENSE_LIST_RETURN", &(a->ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN), "ns1:ST_GET_MEMBER_LICENSE_LIST_RETURN"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN, 0, sizeof(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN), 0, soap_copy_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfST_GET_MEMBER_LICENSE_LIST_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN);
		((ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN*)p = *(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN*)q;
}

void ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY::nMemberID);
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:nMemberID", -1, &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY::nMemberID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nMemberID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nMemberID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nMemberID", &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY::nMemberID), "xsd:int"))
				{	soap_flag_nMemberID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY, 0, sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nMemberID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_MEMBER_LICENSE_LIST_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY);
		((ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY*)p = *(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY*)q;
}

void ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberID = NULL;
	this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberNicName = NULL;
	this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberPassWord = NULL;
	this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberName = NULL;
	this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberGroup = NULL;
	this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberPhone = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberNicName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberPassWord);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberGroup);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberPhone);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMemberID", -1, &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMemberNicName", -1, &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberNicName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMemberPassWord", -1, &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberPassWord), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMemberName", -1, &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMemberGroup", -1, &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberGroup), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMemberPhone", -1, &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberPhone), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strMemberID1 = 1;
	size_t soap_flag_strMemberNicName1 = 1;
	size_t soap_flag_strMemberPassWord1 = 1;
	size_t soap_flag_strMemberName1 = 1;
	size_t soap_flag_strMemberGroup1 = 1;
	size_t soap_flag_strMemberPhone1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strMemberID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMemberID", &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberID), "xsd:string"))
				{	soap_flag_strMemberID1--;
					continue;
				}
			if (soap_flag_strMemberNicName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMemberNicName", &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberNicName), "xsd:string"))
				{	soap_flag_strMemberNicName1--;
					continue;
				}
			if (soap_flag_strMemberPassWord1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMemberPassWord", &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberPassWord), "xsd:string"))
				{	soap_flag_strMemberPassWord1--;
					continue;
				}
			if (soap_flag_strMemberName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMemberName", &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberName), "xsd:string"))
				{	soap_flag_strMemberName1--;
					continue;
				}
			if (soap_flag_strMemberGroup1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMemberGroup", &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberGroup), "xsd:string"))
				{	soap_flag_strMemberGroup1--;
					continue;
				}
			if (soap_flag_strMemberPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMemberPhone", &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::strMemberPhone), "xsd:string"))
				{	soap_flag_strMemberPhone1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN, 0, sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN), 0, soap_copy_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_MEMBER_LIST_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN);
		((ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN*)p = *(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN*)q;
}

void ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, &this->ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN);
	/* transient soap skipped */
}

void ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, &this->ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN);
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, "ns1:ST_GET_MEMBER_LIST_RETURN", -1, &(a->ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN, sizeof(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, "ns1:ST_GET_MEMBER_LIST_RETURN", &(a->ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN), "ns1:ST_GET_MEMBER_LIST_RETURN"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN, 0, sizeof(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN), 0, soap_copy_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfST_GET_MEMBER_LIST_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN);
		((ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN*)p = *(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN*)q;
}

void ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY::strMemberName = NULL;
	this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY::strGroup = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY::strMemberName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY::strGroup);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMemberName", -1, &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY::strMemberName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strGroup", -1, &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY::strGroup), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strMemberName1 = 1;
	size_t soap_flag_strGroup1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strMemberName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMemberName", &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY::strMemberName), "xsd:string"))
				{	soap_flag_strMemberName1--;
					continue;
				}
			if (soap_flag_strGroup1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strGroup", &(a->ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY::strGroup), "xsd:string"))
				{	soap_flag_strGroup1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY, 0, sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_MEMBER_LIST_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY);
		((ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY*)p = *(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY*)q;
}

void ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY::nLicenseID);
	soap_default_int(soap, &this->ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY::nAdmit);
	soap_default_int(soap, &this->ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY::nDelete);
	/* transient soap skipped */
}

void ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:nLicenseID", -1, &(a->ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY::nLicenseID), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:nAdmit", -1, &(a->ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY::nAdmit), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:nDelete", -1, &(a->ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY::nDelete), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY, sizeof(ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nLicenseID1 = 1;
	size_t soap_flag_nAdmit1 = 1;
	size_t soap_flag_nDelete1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nLicenseID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nLicenseID", &(a->ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY::nLicenseID), "xsd:int"))
				{	soap_flag_nLicenseID1--;
					continue;
				}
			if (soap_flag_nAdmit1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nAdmit", &(a->ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY::nAdmit), "xsd:int"))
				{	soap_flag_nAdmit1--;
					continue;
				}
			if (soap_flag_nDelete1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nDelete", &(a->ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY::nDelete), "xsd:int"))
				{	soap_flag_nDelete1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY, 0, sizeof(ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nLicenseID1 > 0 || soap_flag_nAdmit1 > 0 || soap_flag_nDelete1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_MODIFY_MEMBER_LICENSE_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY);
		((ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY*)p = *(ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY*)q;
}

void ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::strUserID = NULL;
	this->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::strPassWord = NULL;
	this->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::strComputerName = NULL;
	this->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::strComment = NULL;
	soap_default_int(soap, &this->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData1);
	soap_default_short(soap, &this->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData2);
	soap_default_short(soap, &this->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData3);
	soap_default_xsd__unsignedByte(soap, &this->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE1);
	soap_default_xsd__unsignedByte(soap, &this->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE2);
	soap_default_xsd__unsignedByte(soap, &this->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE3);
	soap_default_xsd__unsignedByte(soap, &this->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE4);
	soap_default_xsd__unsignedByte(soap, &this->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE5);
	soap_default_xsd__unsignedByte(soap, &this->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE6);
	soap_default_xsd__unsignedByte(soap, &this->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE7);
	soap_default_xsd__unsignedByte(soap, &this->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE8);
	/* transient soap skipped */
}

void ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::strUserID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::strPassWord);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::strComputerName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::strComment);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strUserID", -1, &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::strUserID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strPassWord", -1, &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::strPassWord), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strComputerName", -1, &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::strComputerName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strComment", -1, &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::strComment), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:guid_Data1", -1, &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData1), ""))
		return soap->error;
	if (soap_out_short(soap, "ns1:guid_Data2", -1, &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData2), ""))
		return soap->error;
	if (soap_out_short(soap, "ns1:guid_Data3", -1, &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData3), ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:guid_Data4_1", -1, &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE1), ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:guid_Data4_2", -1, &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE2), ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:guid_Data4_3", -1, &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE3), ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:guid_Data4_4", -1, &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE4), ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:guid_Data4_5", -1, &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE5), ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:guid_Data4_6", -1, &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE6), ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:guid_Data4_7", -1, &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE7), ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:guid_Data4_8", -1, &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE8), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY, sizeof(ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strUserID1 = 1;
	size_t soap_flag_strPassWord1 = 1;
	size_t soap_flag_strComputerName1 = 1;
	size_t soap_flag_strComment1 = 1;
	size_t soap_flag_guid_USCOREData11 = 1;
	size_t soap_flag_guid_USCOREData21 = 1;
	size_t soap_flag_guid_USCOREData31 = 1;
	size_t soap_flag_guid_USCOREData4_USCORE11 = 1;
	size_t soap_flag_guid_USCOREData4_USCORE21 = 1;
	size_t soap_flag_guid_USCOREData4_USCORE31 = 1;
	size_t soap_flag_guid_USCOREData4_USCORE41 = 1;
	size_t soap_flag_guid_USCOREData4_USCORE51 = 1;
	size_t soap_flag_guid_USCOREData4_USCORE61 = 1;
	size_t soap_flag_guid_USCOREData4_USCORE71 = 1;
	size_t soap_flag_guid_USCOREData4_USCORE81 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strUserID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strUserID", &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::strUserID), "xsd:string"))
				{	soap_flag_strUserID1--;
					continue;
				}
			if (soap_flag_strPassWord1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strPassWord", &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::strPassWord), "xsd:string"))
				{	soap_flag_strPassWord1--;
					continue;
				}
			if (soap_flag_strComputerName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strComputerName", &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::strComputerName), "xsd:string"))
				{	soap_flag_strComputerName1--;
					continue;
				}
			if (soap_flag_strComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strComment", &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::strComment), "xsd:string"))
				{	soap_flag_strComment1--;
					continue;
				}
			if (soap_flag_guid_USCOREData11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:guid_Data1", &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData1), "xsd:int"))
				{	soap_flag_guid_USCOREData11--;
					continue;
				}
			if (soap_flag_guid_USCOREData21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_short(soap, "ns1:guid_Data2", &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData2), "xsd:short"))
				{	soap_flag_guid_USCOREData21--;
					continue;
				}
			if (soap_flag_guid_USCOREData31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_short(soap, "ns1:guid_Data3", &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData3), "xsd:short"))
				{	soap_flag_guid_USCOREData31--;
					continue;
				}
			if (soap_flag_guid_USCOREData4_USCORE11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "ns1:guid_Data4_1", &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE1), "xsd:unsignedByte"))
				{	soap_flag_guid_USCOREData4_USCORE11--;
					continue;
				}
			if (soap_flag_guid_USCOREData4_USCORE21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "ns1:guid_Data4_2", &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE2), "xsd:unsignedByte"))
				{	soap_flag_guid_USCOREData4_USCORE21--;
					continue;
				}
			if (soap_flag_guid_USCOREData4_USCORE31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "ns1:guid_Data4_3", &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE3), "xsd:unsignedByte"))
				{	soap_flag_guid_USCOREData4_USCORE31--;
					continue;
				}
			if (soap_flag_guid_USCOREData4_USCORE41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "ns1:guid_Data4_4", &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE4), "xsd:unsignedByte"))
				{	soap_flag_guid_USCOREData4_USCORE41--;
					continue;
				}
			if (soap_flag_guid_USCOREData4_USCORE51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "ns1:guid_Data4_5", &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE5), "xsd:unsignedByte"))
				{	soap_flag_guid_USCOREData4_USCORE51--;
					continue;
				}
			if (soap_flag_guid_USCOREData4_USCORE61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "ns1:guid_Data4_6", &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE6), "xsd:unsignedByte"))
				{	soap_flag_guid_USCOREData4_USCORE61--;
					continue;
				}
			if (soap_flag_guid_USCOREData4_USCORE71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "ns1:guid_Data4_7", &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE7), "xsd:unsignedByte"))
				{	soap_flag_guid_USCOREData4_USCORE71--;
					continue;
				}
			if (soap_flag_guid_USCOREData4_USCORE81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "ns1:guid_Data4_8", &(a->ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::guid_USCOREData4_USCORE8), "xsd:unsignedByte"))
				{	soap_flag_guid_USCOREData4_USCORE81--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY, 0, sizeof(ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_guid_USCOREData11 > 0 || soap_flag_guid_USCOREData21 > 0 || soap_flag_guid_USCOREData31 > 0 || soap_flag_guid_USCOREData4_USCORE11 > 0 || soap_flag_guid_USCOREData4_USCORE21 > 0 || soap_flag_guid_USCOREData4_USCORE31 > 0 || soap_flag_guid_USCOREData4_USCORE41 > 0 || soap_flag_guid_USCOREData4_USCORE51 > 0 || soap_flag_guid_USCOREData4_USCORE61 > 0 || soap_flag_guid_USCOREData4_USCORE71 > 0 || soap_flag_guid_USCOREData4_USCORE81 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_APPLY_REGISTRATION_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(struct soap *soap, ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY);
		((ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY*)p = *(ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY*)q;
}

void ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY::nAdministratorID);
	/* transient soap skipped */
}

void ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:nAdministratorID", -1, &(a->ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY::nAdministratorID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY, sizeof(ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nAdministratorID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nAdministratorID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nAdministratorID", &(a->ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY::nAdministratorID), "xsd:int"))
				{	soap_flag_nAdministratorID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY, 0, sizeof(ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nAdministratorID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_MEMBER_LOGOUT_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY);
		((ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY*)p = *(ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY*)q;
}

void ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::strUserID = NULL;
	this->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::strPassWord = NULL;
	soap_default_int(soap, &this->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData1);
	soap_default_short(soap, &this->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData2);
	soap_default_short(soap, &this->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData3);
	soap_default_xsd__unsignedByte(soap, &this->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE1);
	soap_default_xsd__unsignedByte(soap, &this->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE2);
	soap_default_xsd__unsignedByte(soap, &this->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE3);
	soap_default_xsd__unsignedByte(soap, &this->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE4);
	soap_default_xsd__unsignedByte(soap, &this->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE5);
	soap_default_xsd__unsignedByte(soap, &this->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE6);
	soap_default_xsd__unsignedByte(soap, &this->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE7);
	soap_default_xsd__unsignedByte(soap, &this->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE8);
	/* transient soap skipped */
}

void ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::strUserID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::strPassWord);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strUserID", -1, &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::strUserID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strPassWord", -1, &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::strPassWord), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:guid_Data1", -1, &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData1), ""))
		return soap->error;
	if (soap_out_short(soap, "ns1:guid_Data2", -1, &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData2), ""))
		return soap->error;
	if (soap_out_short(soap, "ns1:guid_Data3", -1, &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData3), ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:guid_Data4_1", -1, &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE1), ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:guid_Data4_2", -1, &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE2), ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:guid_Data4_3", -1, &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE3), ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:guid_Data4_4", -1, &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE4), ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:guid_Data4_5", -1, &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE5), ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:guid_Data4_6", -1, &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE6), ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:guid_Data4_7", -1, &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE7), ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:guid_Data4_8", -1, &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE8), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY, sizeof(ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strUserID1 = 1;
	size_t soap_flag_strPassWord1 = 1;
	size_t soap_flag_guid_USCOREData11 = 1;
	size_t soap_flag_guid_USCOREData21 = 1;
	size_t soap_flag_guid_USCOREData31 = 1;
	size_t soap_flag_guid_USCOREData4_USCORE11 = 1;
	size_t soap_flag_guid_USCOREData4_USCORE21 = 1;
	size_t soap_flag_guid_USCOREData4_USCORE31 = 1;
	size_t soap_flag_guid_USCOREData4_USCORE41 = 1;
	size_t soap_flag_guid_USCOREData4_USCORE51 = 1;
	size_t soap_flag_guid_USCOREData4_USCORE61 = 1;
	size_t soap_flag_guid_USCOREData4_USCORE71 = 1;
	size_t soap_flag_guid_USCOREData4_USCORE81 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strUserID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strUserID", &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::strUserID), "xsd:string"))
				{	soap_flag_strUserID1--;
					continue;
				}
			if (soap_flag_strPassWord1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strPassWord", &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::strPassWord), "xsd:string"))
				{	soap_flag_strPassWord1--;
					continue;
				}
			if (soap_flag_guid_USCOREData11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:guid_Data1", &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData1), "xsd:int"))
				{	soap_flag_guid_USCOREData11--;
					continue;
				}
			if (soap_flag_guid_USCOREData21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_short(soap, "ns1:guid_Data2", &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData2), "xsd:short"))
				{	soap_flag_guid_USCOREData21--;
					continue;
				}
			if (soap_flag_guid_USCOREData31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_short(soap, "ns1:guid_Data3", &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData3), "xsd:short"))
				{	soap_flag_guid_USCOREData31--;
					continue;
				}
			if (soap_flag_guid_USCOREData4_USCORE11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "ns1:guid_Data4_1", &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE1), "xsd:unsignedByte"))
				{	soap_flag_guid_USCOREData4_USCORE11--;
					continue;
				}
			if (soap_flag_guid_USCOREData4_USCORE21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "ns1:guid_Data4_2", &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE2), "xsd:unsignedByte"))
				{	soap_flag_guid_USCOREData4_USCORE21--;
					continue;
				}
			if (soap_flag_guid_USCOREData4_USCORE31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "ns1:guid_Data4_3", &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE3), "xsd:unsignedByte"))
				{	soap_flag_guid_USCOREData4_USCORE31--;
					continue;
				}
			if (soap_flag_guid_USCOREData4_USCORE41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "ns1:guid_Data4_4", &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE4), "xsd:unsignedByte"))
				{	soap_flag_guid_USCOREData4_USCORE41--;
					continue;
				}
			if (soap_flag_guid_USCOREData4_USCORE51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "ns1:guid_Data4_5", &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE5), "xsd:unsignedByte"))
				{	soap_flag_guid_USCOREData4_USCORE51--;
					continue;
				}
			if (soap_flag_guid_USCOREData4_USCORE61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "ns1:guid_Data4_6", &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE6), "xsd:unsignedByte"))
				{	soap_flag_guid_USCOREData4_USCORE61--;
					continue;
				}
			if (soap_flag_guid_USCOREData4_USCORE71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "ns1:guid_Data4_7", &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE7), "xsd:unsignedByte"))
				{	soap_flag_guid_USCOREData4_USCORE71--;
					continue;
				}
			if (soap_flag_guid_USCOREData4_USCORE81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "ns1:guid_Data4_8", &(a->ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::guid_USCOREData4_USCORE8), "xsd:unsignedByte"))
				{	soap_flag_guid_USCOREData4_USCORE81--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY, 0, sizeof(ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_guid_USCOREData11 > 0 || soap_flag_guid_USCOREData21 > 0 || soap_flag_guid_USCOREData31 > 0 || soap_flag_guid_USCOREData4_USCORE11 > 0 || soap_flag_guid_USCOREData4_USCORE21 > 0 || soap_flag_guid_USCOREData4_USCORE31 > 0 || soap_flag_guid_USCOREData4_USCORE41 > 0 || soap_flag_guid_USCOREData4_USCORE51 > 0 || soap_flag_guid_USCOREData4_USCORE61 > 0 || soap_flag_guid_USCOREData4_USCORE71 > 0 || soap_flag_guid_USCOREData4_USCORE81 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_MEMBER_LOGIN_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY);
		((ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY*)p = *(ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY*)q;
}

void ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY::nMemberID);
	/* transient soap skipped */
}

void ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:nMemberID", -1, &(a->ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY::nMemberID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY, sizeof(ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nMemberID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nMemberID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nMemberID", &(a->ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY::nMemberID), "xsd:int"))
				{	soap_flag_nMemberID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY, 0, sizeof(ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nMemberID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_MEMBER_REMOVEMEMBER_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY);
		((ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY*)p = *(ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY*)q;
}

void ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::nMemberID);
	this->ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::strMemberPassWord = NULL;
	this->ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::strMemberGroup = NULL;
	this->ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::strMemberPhone = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::strMemberPassWord);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::strMemberGroup);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::strMemberPhone);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:nMemberID", -1, &(a->ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::nMemberID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMemberPassWord", -1, &(a->ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::strMemberPassWord), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMemberGroup", -1, &(a->ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::strMemberGroup), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMemberPhone", -1, &(a->ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::strMemberPhone), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY, sizeof(ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nMemberID1 = 1;
	size_t soap_flag_strMemberPassWord1 = 1;
	size_t soap_flag_strMemberGroup1 = 1;
	size_t soap_flag_strMemberPhone1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nMemberID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nMemberID", &(a->ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::nMemberID), "xsd:int"))
				{	soap_flag_nMemberID1--;
					continue;
				}
			if (soap_flag_strMemberPassWord1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMemberPassWord", &(a->ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::strMemberPassWord), "xsd:string"))
				{	soap_flag_strMemberPassWord1--;
					continue;
				}
			if (soap_flag_strMemberGroup1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMemberGroup", &(a->ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::strMemberGroup), "xsd:string"))
				{	soap_flag_strMemberGroup1--;
					continue;
				}
			if (soap_flag_strMemberPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMemberPhone", &(a->ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::strMemberPhone), "xsd:string"))
				{	soap_flag_strMemberPhone1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY, 0, sizeof(ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nMemberID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_MEMBER_MODIFYMEMBER_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY);
		((ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY*)p = *(ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY*)q;
}

void ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strNicName = NULL;
	this->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strPassWord = NULL;
	this->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strName = NULL;
	this->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strGroup = NULL;
	this->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strPhone = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strNicName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strPassWord);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strGroup);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strPhone);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strNicName", -1, &(a->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strNicName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strPassWord", -1, &(a->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strPassWord), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strName", -1, &(a->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strGroup", -1, &(a->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strGroup), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strPhone", -1, &(a->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strPhone), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY, sizeof(ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strNicName1 = 1;
	size_t soap_flag_strPassWord1 = 1;
	size_t soap_flag_strName1 = 1;
	size_t soap_flag_strGroup1 = 1;
	size_t soap_flag_strPhone1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strNicName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strNicName", &(a->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strNicName), "xsd:string"))
				{	soap_flag_strNicName1--;
					continue;
				}
			if (soap_flag_strPassWord1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strPassWord", &(a->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strPassWord), "xsd:string"))
				{	soap_flag_strPassWord1--;
					continue;
				}
			if (soap_flag_strName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strName", &(a->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strName), "xsd:string"))
				{	soap_flag_strName1--;
					continue;
				}
			if (soap_flag_strGroup1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strGroup", &(a->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strGroup), "xsd:string"))
				{	soap_flag_strGroup1--;
					continue;
				}
			if (soap_flag_strPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strPhone", &(a->ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::strPhone), "xsd:string"))
				{	soap_flag_strPhone1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY, 0, sizeof(ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_MEMBER_ADDMEMBER_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY);
		((ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY*)p = *(ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY*)q;
}

void ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterName = NULL;
	this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterEMail = NULL;
	this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterURL = NULL;
	this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterPhone = NULL;
	this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterComment = NULL;
	this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterFirst = NULL;
	this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegistDate = NULL;
	this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strTitleName = NULL;
	this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strArtistName = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterComment);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterFirst);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegistDate);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strTitleName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strArtistName);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterName", -1, &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterEMail", -1, &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterURL", -1, &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterPhone", -1, &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterComment", -1, &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterComment), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirst", -1, &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterFirst), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegistDate", -1, &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegistDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strTitleName", -1, &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strTitleName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strArtistName", -1, &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strArtistName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strRegisterName1 = 1;
	size_t soap_flag_strRegisterEMail1 = 1;
	size_t soap_flag_strRegisterURL1 = 1;
	size_t soap_flag_strRegisterPhone1 = 1;
	size_t soap_flag_strRegisterComment1 = 1;
	size_t soap_flag_strRegisterFirst1 = 1;
	size_t soap_flag_strRegistDate1 = 1;
	size_t soap_flag_strTitleName1 = 1;
	size_t soap_flag_strArtistName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strRegisterName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterName", &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterName), "xsd:string"))
				{	soap_flag_strRegisterName1--;
					continue;
				}
			if (soap_flag_strRegisterEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterEMail", &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterEMail), "xsd:string"))
				{	soap_flag_strRegisterEMail1--;
					continue;
				}
			if (soap_flag_strRegisterURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterURL", &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterURL), "xsd:string"))
				{	soap_flag_strRegisterURL1--;
					continue;
				}
			if (soap_flag_strRegisterPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterPhone", &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterPhone), "xsd:string"))
				{	soap_flag_strRegisterPhone1--;
					continue;
				}
			if (soap_flag_strRegisterComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterComment", &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterComment), "xsd:string"))
				{	soap_flag_strRegisterComment1--;
					continue;
				}
			if (soap_flag_strRegisterFirst1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirst", &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegisterFirst), "xsd:string"))
				{	soap_flag_strRegisterFirst1--;
					continue;
				}
			if (soap_flag_strRegistDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegistDate", &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strRegistDate), "xsd:string"))
				{	soap_flag_strRegistDate1--;
					continue;
				}
			if (soap_flag_strTitleName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strTitleName", &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strTitleName), "xsd:string"))
				{	soap_flag_strTitleName1--;
					continue;
				}
			if (soap_flag_strArtistName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strArtistName", &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::strArtistName), "xsd:string"))
				{	soap_flag_strArtistName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN, 0, sizeof(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN), 0, soap_copy_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_REGISTER_LIST_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN);
		((ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN*)p = *(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN*)q;
}

void ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, &this->ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN);
	/* transient soap skipped */
}

void ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, &this->ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN);
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, "ns1:ST_GET_REGISTER_LIST_RETURN", -1, &(a->ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN, sizeof(ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, "ns1:ST_GET_REGISTER_LIST_RETURN", &(a->ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN), "ns1:ST_GET_REGISTER_LIST_RETURN"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN, 0, sizeof(ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN), 0, soap_copy_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfST_GET_REGISTER_LIST_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN);
		((ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN*)p = *(ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN*)q;
}

void ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::strRegisterName = NULL;
	this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::strRegisterEMail = NULL;
	this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::strStartDate = NULL;
	this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::strEndDate = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::strRegisterName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::strRegisterEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::strStartDate);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::strEndDate);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterName", -1, &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::strRegisterName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterEMail", -1, &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::strRegisterEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strStartDate", -1, &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::strStartDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strEndDate", -1, &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::strEndDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strRegisterName1 = 1;
	size_t soap_flag_strRegisterEMail1 = 1;
	size_t soap_flag_strStartDate1 = 1;
	size_t soap_flag_strEndDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strRegisterName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterName", &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::strRegisterName), "xsd:string"))
				{	soap_flag_strRegisterName1--;
					continue;
				}
			if (soap_flag_strRegisterEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterEMail", &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::strRegisterEMail), "xsd:string"))
				{	soap_flag_strRegisterEMail1--;
					continue;
				}
			if (soap_flag_strStartDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strStartDate", &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::strStartDate), "xsd:string"))
				{	soap_flag_strStartDate1--;
					continue;
				}
			if (soap_flag_strEndDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strEndDate", &(a->ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::strEndDate), "xsd:string"))
				{	soap_flag_strEndDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY, 0, sizeof(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_REGISTER_LIST_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY);
		((ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY*)p = *(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY*)q;
}

void ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifyID = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strMD5 = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strRegistDate = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterName = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterEMail = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterURL = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterPhone = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterComment = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedFileName = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedTitle = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedArtist = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedAlbum = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedLyric = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalFileName = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strInfoID = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalTitle = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalArtist = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalAlbum = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalLyric = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstName = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterName = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstEMail = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterEMail = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstURL = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterURL = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstPhone = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterPhone = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstComment = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterComment = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strBlackListReportCount = NULL;
	this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strCountReportFault = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifyID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strMD5);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strRegistDate);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterComment);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedFileName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedArtist);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedAlbum);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedLyric);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalFileName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strInfoID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalArtist);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalAlbum);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalLyric);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstComment);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterComment);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strBlackListReportCount);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strCountReportFault);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strModifyID", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifyID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMD5", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strMD5), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegistDate", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strRegistDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strModifiedRegisterName", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strModifiedRegisterEMail", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strModifiedRegisterURL", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strModifiedRegisterPhone", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strModifiedRegisterComment", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterComment), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strModifiedFileName", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedFileName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strModifiedTitle", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strModifiedArtist", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedArtist), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strModifiedAlbum", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedAlbum), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strModifiedLyric", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedLyric), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strOriginalFileName", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalFileName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strInfoID", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strInfoID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strOriginalTitle", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strOriginalArtist", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalArtist), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strOriginalAlbum", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalAlbum), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strOriginalLyric", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalLyric), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strOriginalRegisterFirstName", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strOriginalRegisterName", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strOriginalRegisterFirstEMail", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strOriginalRegisterEMail", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strOriginalRegisterFirstURL", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strOriginalRegisterURL", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strOriginalRegisterFirstPhone", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strOriginalRegisterPhone", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strOriginalRegisterFirstComment", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstComment), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strOriginalRegisterComment", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterComment), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strBlackListReportCount", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strBlackListReportCount), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCountReportFault", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strCountReportFault), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strModifyID1 = 1;
	size_t soap_flag_strMD51 = 1;
	size_t soap_flag_strRegistDate1 = 1;
	size_t soap_flag_strModifiedRegisterName1 = 1;
	size_t soap_flag_strModifiedRegisterEMail1 = 1;
	size_t soap_flag_strModifiedRegisterURL1 = 1;
	size_t soap_flag_strModifiedRegisterPhone1 = 1;
	size_t soap_flag_strModifiedRegisterComment1 = 1;
	size_t soap_flag_strModifiedFileName1 = 1;
	size_t soap_flag_strModifiedTitle1 = 1;
	size_t soap_flag_strModifiedArtist1 = 1;
	size_t soap_flag_strModifiedAlbum1 = 1;
	size_t soap_flag_strModifiedLyric1 = 1;
	size_t soap_flag_strOriginalFileName1 = 1;
	size_t soap_flag_strInfoID1 = 1;
	size_t soap_flag_strOriginalTitle1 = 1;
	size_t soap_flag_strOriginalArtist1 = 1;
	size_t soap_flag_strOriginalAlbum1 = 1;
	size_t soap_flag_strOriginalLyric1 = 1;
	size_t soap_flag_strOriginalRegisterFirstName1 = 1;
	size_t soap_flag_strOriginalRegisterName1 = 1;
	size_t soap_flag_strOriginalRegisterFirstEMail1 = 1;
	size_t soap_flag_strOriginalRegisterEMail1 = 1;
	size_t soap_flag_strOriginalRegisterFirstURL1 = 1;
	size_t soap_flag_strOriginalRegisterURL1 = 1;
	size_t soap_flag_strOriginalRegisterFirstPhone1 = 1;
	size_t soap_flag_strOriginalRegisterPhone1 = 1;
	size_t soap_flag_strOriginalRegisterFirstComment1 = 1;
	size_t soap_flag_strOriginalRegisterComment1 = 1;
	size_t soap_flag_strBlackListReportCount1 = 1;
	size_t soap_flag_strCountReportFault1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strModifyID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strModifyID", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifyID), "xsd:string"))
				{	soap_flag_strModifyID1--;
					continue;
				}
			if (soap_flag_strMD51 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMD5", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strMD5), "xsd:string"))
				{	soap_flag_strMD51--;
					continue;
				}
			if (soap_flag_strRegistDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegistDate", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strRegistDate), "xsd:string"))
				{	soap_flag_strRegistDate1--;
					continue;
				}
			if (soap_flag_strModifiedRegisterName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strModifiedRegisterName", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterName), "xsd:string"))
				{	soap_flag_strModifiedRegisterName1--;
					continue;
				}
			if (soap_flag_strModifiedRegisterEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strModifiedRegisterEMail", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterEMail), "xsd:string"))
				{	soap_flag_strModifiedRegisterEMail1--;
					continue;
				}
			if (soap_flag_strModifiedRegisterURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strModifiedRegisterURL", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterURL), "xsd:string"))
				{	soap_flag_strModifiedRegisterURL1--;
					continue;
				}
			if (soap_flag_strModifiedRegisterPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strModifiedRegisterPhone", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterPhone), "xsd:string"))
				{	soap_flag_strModifiedRegisterPhone1--;
					continue;
				}
			if (soap_flag_strModifiedRegisterComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strModifiedRegisterComment", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedRegisterComment), "xsd:string"))
				{	soap_flag_strModifiedRegisterComment1--;
					continue;
				}
			if (soap_flag_strModifiedFileName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strModifiedFileName", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedFileName), "xsd:string"))
				{	soap_flag_strModifiedFileName1--;
					continue;
				}
			if (soap_flag_strModifiedTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strModifiedTitle", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedTitle), "xsd:string"))
				{	soap_flag_strModifiedTitle1--;
					continue;
				}
			if (soap_flag_strModifiedArtist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strModifiedArtist", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedArtist), "xsd:string"))
				{	soap_flag_strModifiedArtist1--;
					continue;
				}
			if (soap_flag_strModifiedAlbum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strModifiedAlbum", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedAlbum), "xsd:string"))
				{	soap_flag_strModifiedAlbum1--;
					continue;
				}
			if (soap_flag_strModifiedLyric1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strModifiedLyric", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strModifiedLyric), "xsd:string"))
				{	soap_flag_strModifiedLyric1--;
					continue;
				}
			if (soap_flag_strOriginalFileName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strOriginalFileName", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalFileName), "xsd:string"))
				{	soap_flag_strOriginalFileName1--;
					continue;
				}
			if (soap_flag_strInfoID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strInfoID", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strInfoID), "xsd:string"))
				{	soap_flag_strInfoID1--;
					continue;
				}
			if (soap_flag_strOriginalTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strOriginalTitle", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalTitle), "xsd:string"))
				{	soap_flag_strOriginalTitle1--;
					continue;
				}
			if (soap_flag_strOriginalArtist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strOriginalArtist", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalArtist), "xsd:string"))
				{	soap_flag_strOriginalArtist1--;
					continue;
				}
			if (soap_flag_strOriginalAlbum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strOriginalAlbum", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalAlbum), "xsd:string"))
				{	soap_flag_strOriginalAlbum1--;
					continue;
				}
			if (soap_flag_strOriginalLyric1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strOriginalLyric", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalLyric), "xsd:string"))
				{	soap_flag_strOriginalLyric1--;
					continue;
				}
			if (soap_flag_strOriginalRegisterFirstName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strOriginalRegisterFirstName", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstName), "xsd:string"))
				{	soap_flag_strOriginalRegisterFirstName1--;
					continue;
				}
			if (soap_flag_strOriginalRegisterName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strOriginalRegisterName", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterName), "xsd:string"))
				{	soap_flag_strOriginalRegisterName1--;
					continue;
				}
			if (soap_flag_strOriginalRegisterFirstEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strOriginalRegisterFirstEMail", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstEMail), "xsd:string"))
				{	soap_flag_strOriginalRegisterFirstEMail1--;
					continue;
				}
			if (soap_flag_strOriginalRegisterEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strOriginalRegisterEMail", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterEMail), "xsd:string"))
				{	soap_flag_strOriginalRegisterEMail1--;
					continue;
				}
			if (soap_flag_strOriginalRegisterFirstURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strOriginalRegisterFirstURL", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstURL), "xsd:string"))
				{	soap_flag_strOriginalRegisterFirstURL1--;
					continue;
				}
			if (soap_flag_strOriginalRegisterURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strOriginalRegisterURL", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterURL), "xsd:string"))
				{	soap_flag_strOriginalRegisterURL1--;
					continue;
				}
			if (soap_flag_strOriginalRegisterFirstPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strOriginalRegisterFirstPhone", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstPhone), "xsd:string"))
				{	soap_flag_strOriginalRegisterFirstPhone1--;
					continue;
				}
			if (soap_flag_strOriginalRegisterPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strOriginalRegisterPhone", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterPhone), "xsd:string"))
				{	soap_flag_strOriginalRegisterPhone1--;
					continue;
				}
			if (soap_flag_strOriginalRegisterFirstComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strOriginalRegisterFirstComment", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterFirstComment), "xsd:string"))
				{	soap_flag_strOriginalRegisterFirstComment1--;
					continue;
				}
			if (soap_flag_strOriginalRegisterComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strOriginalRegisterComment", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strOriginalRegisterComment), "xsd:string"))
				{	soap_flag_strOriginalRegisterComment1--;
					continue;
				}
			if (soap_flag_strBlackListReportCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strBlackListReportCount", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strBlackListReportCount), "xsd:string"))
				{	soap_flag_strBlackListReportCount1--;
					continue;
				}
			if (soap_flag_strCountReportFault1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCountReportFault", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::strCountReportFault), "xsd:string"))
				{	soap_flag_strCountReportFault1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN, 0, sizeof(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN), 0, soap_copy_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_MODIFY_LIST_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN);
		((ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN*)p = *(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN*)q;
}

void ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, &this->ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN);
	/* transient soap skipped */
}

void ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, &this->ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN);
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, "ns1:ST_GET_MODIFY_LIST_RETURN", -1, &(a->ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN, sizeof(ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, "ns1:ST_GET_MODIFY_LIST_RETURN", &(a->ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN), "ns1:ST_GET_MODIFY_LIST_RETURN"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN, 0, sizeof(ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN), 0, soap_copy_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfST_GET_MODIFY_LIST_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN);
		((ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN*)p = *(ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN*)q;
}

void ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY::nAdministratorID);
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:nAdministratorID", -1, &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY::nAdministratorID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nAdministratorID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nAdministratorID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nAdministratorID", &(a->ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY::nAdministratorID), "xsd:int"))
				{	soap_flag_nAdministratorID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY, 0, sizeof(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nAdministratorID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_MODIFY_LIST_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY);
		((ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY*)p = *(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY*)q;
}

void ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strReportID = NULL;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strMD5 = NULL;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegistDate = NULL;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strComment = NULL;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strFileName = NULL;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strMainTitle = NULL;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strMainArtist = NULL;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strMainAlbum = NULL;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strInfoID = NULL;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strInfoTitle = NULL;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strInfoArtist = NULL;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strInfoAlbum = NULL;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strLinkCount = NULL;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strLyric = NULL;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterFirstName = NULL;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterName = NULL;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterFirstURL = NULL;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterURL = NULL;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterFirstComment = NULL;
	this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterComment = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strReportID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strMD5);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegistDate);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strComment);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strFileName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strMainTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strMainArtist);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strMainAlbum);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strInfoID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strInfoTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strInfoArtist);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strInfoAlbum);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strLinkCount);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strLyric);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterFirstName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterFirstURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterFirstComment);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterComment);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strReportID", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strReportID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMD5", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strMD5), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegistDate", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegistDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strComment", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strComment), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strFileName", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strFileName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMainTitle", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strMainTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMainArtist", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strMainArtist), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMainAlbum", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strMainAlbum), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strInfoID", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strInfoID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strInfoTitle", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strInfoTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strInfoArtist", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strInfoArtist), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strInfoAlbum", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strInfoAlbum), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strLinkCount", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strLinkCount), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strLyric", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strLyric), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstName", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterFirstName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterName", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstURL", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterFirstURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterURL", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstComment", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterFirstComment), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterComment", -1, &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterComment), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strReportID1 = 1;
	size_t soap_flag_strMD51 = 1;
	size_t soap_flag_strRegistDate1 = 1;
	size_t soap_flag_strComment1 = 1;
	size_t soap_flag_strFileName1 = 1;
	size_t soap_flag_strMainTitle1 = 1;
	size_t soap_flag_strMainArtist1 = 1;
	size_t soap_flag_strMainAlbum1 = 1;
	size_t soap_flag_strInfoID1 = 1;
	size_t soap_flag_strInfoTitle1 = 1;
	size_t soap_flag_strInfoArtist1 = 1;
	size_t soap_flag_strInfoAlbum1 = 1;
	size_t soap_flag_strLinkCount1 = 1;
	size_t soap_flag_strLyric1 = 1;
	size_t soap_flag_strRegisterFirstName1 = 1;
	size_t soap_flag_strRegisterName1 = 1;
	size_t soap_flag_strRegisterFirstURL1 = 1;
	size_t soap_flag_strRegisterURL1 = 1;
	size_t soap_flag_strRegisterFirstComment1 = 1;
	size_t soap_flag_strRegisterComment1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strReportID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strReportID", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strReportID), "xsd:string"))
				{	soap_flag_strReportID1--;
					continue;
				}
			if (soap_flag_strMD51 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMD5", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strMD5), "xsd:string"))
				{	soap_flag_strMD51--;
					continue;
				}
			if (soap_flag_strRegistDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegistDate", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegistDate), "xsd:string"))
				{	soap_flag_strRegistDate1--;
					continue;
				}
			if (soap_flag_strComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strComment", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strComment), "xsd:string"))
				{	soap_flag_strComment1--;
					continue;
				}
			if (soap_flag_strFileName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strFileName", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strFileName), "xsd:string"))
				{	soap_flag_strFileName1--;
					continue;
				}
			if (soap_flag_strMainTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMainTitle", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strMainTitle), "xsd:string"))
				{	soap_flag_strMainTitle1--;
					continue;
				}
			if (soap_flag_strMainArtist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMainArtist", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strMainArtist), "xsd:string"))
				{	soap_flag_strMainArtist1--;
					continue;
				}
			if (soap_flag_strMainAlbum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMainAlbum", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strMainAlbum), "xsd:string"))
				{	soap_flag_strMainAlbum1--;
					continue;
				}
			if (soap_flag_strInfoID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strInfoID", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strInfoID), "xsd:string"))
				{	soap_flag_strInfoID1--;
					continue;
				}
			if (soap_flag_strInfoTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strInfoTitle", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strInfoTitle), "xsd:string"))
				{	soap_flag_strInfoTitle1--;
					continue;
				}
			if (soap_flag_strInfoArtist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strInfoArtist", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strInfoArtist), "xsd:string"))
				{	soap_flag_strInfoArtist1--;
					continue;
				}
			if (soap_flag_strInfoAlbum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strInfoAlbum", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strInfoAlbum), "xsd:string"))
				{	soap_flag_strInfoAlbum1--;
					continue;
				}
			if (soap_flag_strLinkCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strLinkCount", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strLinkCount), "xsd:string"))
				{	soap_flag_strLinkCount1--;
					continue;
				}
			if (soap_flag_strLyric1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strLyric", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strLyric), "xsd:string"))
				{	soap_flag_strLyric1--;
					continue;
				}
			if (soap_flag_strRegisterFirstName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstName", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterFirstName), "xsd:string"))
				{	soap_flag_strRegisterFirstName1--;
					continue;
				}
			if (soap_flag_strRegisterName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterName", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterName), "xsd:string"))
				{	soap_flag_strRegisterName1--;
					continue;
				}
			if (soap_flag_strRegisterFirstURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstURL", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterFirstURL), "xsd:string"))
				{	soap_flag_strRegisterFirstURL1--;
					continue;
				}
			if (soap_flag_strRegisterURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterURL", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterURL), "xsd:string"))
				{	soap_flag_strRegisterURL1--;
					continue;
				}
			if (soap_flag_strRegisterFirstComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstComment", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterFirstComment), "xsd:string"))
				{	soap_flag_strRegisterFirstComment1--;
					continue;
				}
			if (soap_flag_strRegisterComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterComment", &(a->ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::strRegisterComment), "xsd:string"))
				{	soap_flag_strRegisterComment1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN, 0, sizeof(ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN), 0, soap_copy_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_REPORTFAULT_LIST_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN);
		((ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN*)p = *(ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN*)q;
}

void ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, &this->ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN);
	/* transient soap skipped */
}

void ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, &this->ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN);
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, "ns1:ST_GET_REPORTFAULT_LIST_RETURN", -1, &(a->ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN, sizeof(ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, "ns1:ST_GET_REPORTFAULT_LIST_RETURN", &(a->ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN), "ns1:ST_GET_REPORTFAULT_LIST_RETURN"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN, 0, sizeof(ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN), 0, soap_copy_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfST_GET_REPORTFAULT_LIST_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN);
		((ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN*)p = *(ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN*)q;
}

void ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strInfoID = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegistDate = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strTitle = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strArtist = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strAlbum = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strLinkCount = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strOnlyLyricword = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strLyric = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstName = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterName = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstEMail = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterEMail = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstURL = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterURL = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstPhone = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterPhone = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstComment = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterComment = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strInfoID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegistDate);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strArtist);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strAlbum);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strLinkCount);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strOnlyLyricword);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strLyric);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstComment);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterComment);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strInfoID", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strInfoID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegistDate", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegistDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strTitle", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strArtist", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strArtist), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strAlbum", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strAlbum), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strLinkCount", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strLinkCount), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strOnlyLyricword", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strOnlyLyricword), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strLyric", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strLyric), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstName", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterName", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstEMail", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterEMail", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstURL", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterURL", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstPhone", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterPhone", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstComment", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstComment), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterComment", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterComment), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strInfoID1 = 1;
	size_t soap_flag_strRegistDate1 = 1;
	size_t soap_flag_strTitle1 = 1;
	size_t soap_flag_strArtist1 = 1;
	size_t soap_flag_strAlbum1 = 1;
	size_t soap_flag_strLinkCount1 = 1;
	size_t soap_flag_strOnlyLyricword1 = 1;
	size_t soap_flag_strLyric1 = 1;
	size_t soap_flag_strRegisterFirstName1 = 1;
	size_t soap_flag_strRegisterName1 = 1;
	size_t soap_flag_strRegisterFirstEMail1 = 1;
	size_t soap_flag_strRegisterEMail1 = 1;
	size_t soap_flag_strRegisterFirstURL1 = 1;
	size_t soap_flag_strRegisterURL1 = 1;
	size_t soap_flag_strRegisterFirstPhone1 = 1;
	size_t soap_flag_strRegisterPhone1 = 1;
	size_t soap_flag_strRegisterFirstComment1 = 1;
	size_t soap_flag_strRegisterComment1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strInfoID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strInfoID", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strInfoID), "xsd:string"))
				{	soap_flag_strInfoID1--;
					continue;
				}
			if (soap_flag_strRegistDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegistDate", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegistDate), "xsd:string"))
				{	soap_flag_strRegistDate1--;
					continue;
				}
			if (soap_flag_strTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strTitle", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strTitle), "xsd:string"))
				{	soap_flag_strTitle1--;
					continue;
				}
			if (soap_flag_strArtist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strArtist", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strArtist), "xsd:string"))
				{	soap_flag_strArtist1--;
					continue;
				}
			if (soap_flag_strAlbum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strAlbum", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strAlbum), "xsd:string"))
				{	soap_flag_strAlbum1--;
					continue;
				}
			if (soap_flag_strLinkCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strLinkCount", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strLinkCount), "xsd:string"))
				{	soap_flag_strLinkCount1--;
					continue;
				}
			if (soap_flag_strOnlyLyricword1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strOnlyLyricword", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strOnlyLyricword), "xsd:string"))
				{	soap_flag_strOnlyLyricword1--;
					continue;
				}
			if (soap_flag_strLyric1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strLyric", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strLyric), "xsd:string"))
				{	soap_flag_strLyric1--;
					continue;
				}
			if (soap_flag_strRegisterFirstName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstName", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstName), "xsd:string"))
				{	soap_flag_strRegisterFirstName1--;
					continue;
				}
			if (soap_flag_strRegisterName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterName", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterName), "xsd:string"))
				{	soap_flag_strRegisterName1--;
					continue;
				}
			if (soap_flag_strRegisterFirstEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstEMail", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstEMail), "xsd:string"))
				{	soap_flag_strRegisterFirstEMail1--;
					continue;
				}
			if (soap_flag_strRegisterEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterEMail", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterEMail), "xsd:string"))
				{	soap_flag_strRegisterEMail1--;
					continue;
				}
			if (soap_flag_strRegisterFirstURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstURL", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstURL), "xsd:string"))
				{	soap_flag_strRegisterFirstURL1--;
					continue;
				}
			if (soap_flag_strRegisterURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterURL", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterURL), "xsd:string"))
				{	soap_flag_strRegisterURL1--;
					continue;
				}
			if (soap_flag_strRegisterFirstPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstPhone", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstPhone), "xsd:string"))
				{	soap_flag_strRegisterFirstPhone1--;
					continue;
				}
			if (soap_flag_strRegisterPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterPhone", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterPhone), "xsd:string"))
				{	soap_flag_strRegisterPhone1--;
					continue;
				}
			if (soap_flag_strRegisterFirstComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstComment", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterFirstComment), "xsd:string"))
				{	soap_flag_strRegisterFirstComment1--;
					continue;
				}
			if (soap_flag_strRegisterComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterComment", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::strRegisterComment), "xsd:string"))
				{	soap_flag_strRegisterComment1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN, 0, sizeof(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN), 0, soap_copy_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_LYRIC_LIST_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN);
		((ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN*)p = *(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN*)q;
}

void ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, &this->ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN);
	/* transient soap skipped */
}

void ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, &this->ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN);
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, "ns1:ST_GET_LYRIC_LIST_RETURN", -1, &(a->ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN, sizeof(ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, "ns1:ST_GET_LYRIC_LIST_RETURN", &(a->ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN), "ns1:ST_GET_LYRIC_LIST_RETURN"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN, 0, sizeof(ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN), 0, soap_copy_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfST_GET_LYRIC_LIST_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN);
		((ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN*)p = *(ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN*)q;
}

void ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strTitle = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strArtist = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strAlbum = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strStartDate = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strEndDate = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strArtist);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strAlbum);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strStartDate);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strEndDate);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strTitle", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strArtist", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strArtist), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strAlbum", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strAlbum), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strStartDate", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strStartDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strEndDate", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strEndDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strTitle1 = 1;
	size_t soap_flag_strArtist1 = 1;
	size_t soap_flag_strAlbum1 = 1;
	size_t soap_flag_strStartDate1 = 1;
	size_t soap_flag_strEndDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strTitle", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strTitle), "xsd:string"))
				{	soap_flag_strTitle1--;
					continue;
				}
			if (soap_flag_strArtist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strArtist", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strArtist), "xsd:string"))
				{	soap_flag_strArtist1--;
					continue;
				}
			if (soap_flag_strAlbum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strAlbum", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strAlbum), "xsd:string"))
				{	soap_flag_strAlbum1--;
					continue;
				}
			if (soap_flag_strStartDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strStartDate", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strStartDate), "xsd:string"))
				{	soap_flag_strStartDate1--;
					continue;
				}
			if (soap_flag_strEndDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strEndDate", &(a->ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::strEndDate), "xsd:string"))
				{	soap_flag_strEndDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY, 0, sizeof(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_LYRIC_LIST_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY);
		((ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY*)p = *(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY*)q;
}

void ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::strChecksum = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::strVersion = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::strMACAddress = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::strIPAddress = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::strChecksum);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::strVersion);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::strMACAddress);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::strIPAddress);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strChecksum", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::strChecksum), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strVersion", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::strVersion), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMACAddress", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::strMACAddress), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strIPAddress", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::strIPAddress), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strChecksum1 = 1;
	size_t soap_flag_strVersion1 = 1;
	size_t soap_flag_strMACAddress1 = 1;
	size_t soap_flag_strIPAddress1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strChecksum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strChecksum", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::strChecksum), "xsd:string"))
				{	soap_flag_strChecksum1--;
					continue;
				}
			if (soap_flag_strVersion1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strVersion", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::strVersion), "xsd:string"))
				{	soap_flag_strVersion1--;
					continue;
				}
			if (soap_flag_strMACAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMACAddress", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::strMACAddress), "xsd:string"))
				{	soap_flag_strMACAddress1--;
					continue;
				}
			if (soap_flag_strIPAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strIPAddress", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::strIPAddress), "xsd:string"))
				{	soap_flag_strIPAddress1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY, 0, sizeof(ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_LYRIC5_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY);
		((ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY*)p = *(ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY*)q;
}

void ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strStatusID = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strInfoID = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegistDate = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strTitle = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strArtist = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strAlbum = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strLyric = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstName = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstEMail = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstURL = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstPhone = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstComment = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterName = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterEMail = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterURL = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterPhone = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterComment = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strStatusID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strInfoID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegistDate);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strArtist);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strAlbum);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strLyric);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstComment);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterComment);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strStatusID", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strStatusID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strInfoID", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strInfoID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegistDate", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegistDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strTitle", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strArtist", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strArtist), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strAlbum", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strAlbum), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strLyric", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strLyric), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstName", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstEMail", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstURL", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstPhone", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstComment", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstComment), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterName", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterEMail", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterURL", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterPhone", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterComment", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterComment), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strStatusID1 = 1;
	size_t soap_flag_strInfoID1 = 1;
	size_t soap_flag_strRegistDate1 = 1;
	size_t soap_flag_strTitle1 = 1;
	size_t soap_flag_strArtist1 = 1;
	size_t soap_flag_strAlbum1 = 1;
	size_t soap_flag_strLyric1 = 1;
	size_t soap_flag_strRegisterFirstName1 = 1;
	size_t soap_flag_strRegisterFirstEMail1 = 1;
	size_t soap_flag_strRegisterFirstURL1 = 1;
	size_t soap_flag_strRegisterFirstPhone1 = 1;
	size_t soap_flag_strRegisterFirstComment1 = 1;
	size_t soap_flag_strRegisterName1 = 1;
	size_t soap_flag_strRegisterEMail1 = 1;
	size_t soap_flag_strRegisterURL1 = 1;
	size_t soap_flag_strRegisterPhone1 = 1;
	size_t soap_flag_strRegisterComment1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strStatusID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strStatusID", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strStatusID), "xsd:string"))
				{	soap_flag_strStatusID1--;
					continue;
				}
			if (soap_flag_strInfoID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strInfoID", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strInfoID), "xsd:string"))
				{	soap_flag_strInfoID1--;
					continue;
				}
			if (soap_flag_strRegistDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegistDate", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegistDate), "xsd:string"))
				{	soap_flag_strRegistDate1--;
					continue;
				}
			if (soap_flag_strTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strTitle", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strTitle), "xsd:string"))
				{	soap_flag_strTitle1--;
					continue;
				}
			if (soap_flag_strArtist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strArtist", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strArtist), "xsd:string"))
				{	soap_flag_strArtist1--;
					continue;
				}
			if (soap_flag_strAlbum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strAlbum", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strAlbum), "xsd:string"))
				{	soap_flag_strAlbum1--;
					continue;
				}
			if (soap_flag_strLyric1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strLyric", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strLyric), "xsd:string"))
				{	soap_flag_strLyric1--;
					continue;
				}
			if (soap_flag_strRegisterFirstName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstName", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstName), "xsd:string"))
				{	soap_flag_strRegisterFirstName1--;
					continue;
				}
			if (soap_flag_strRegisterFirstEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstEMail", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstEMail), "xsd:string"))
				{	soap_flag_strRegisterFirstEMail1--;
					continue;
				}
			if (soap_flag_strRegisterFirstURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstURL", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstURL), "xsd:string"))
				{	soap_flag_strRegisterFirstURL1--;
					continue;
				}
			if (soap_flag_strRegisterFirstPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstPhone", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstPhone), "xsd:string"))
				{	soap_flag_strRegisterFirstPhone1--;
					continue;
				}
			if (soap_flag_strRegisterFirstComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstComment", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterFirstComment), "xsd:string"))
				{	soap_flag_strRegisterFirstComment1--;
					continue;
				}
			if (soap_flag_strRegisterName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterName", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterName), "xsd:string"))
				{	soap_flag_strRegisterName1--;
					continue;
				}
			if (soap_flag_strRegisterEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterEMail", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterEMail), "xsd:string"))
				{	soap_flag_strRegisterEMail1--;
					continue;
				}
			if (soap_flag_strRegisterURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterURL", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterURL), "xsd:string"))
				{	soap_flag_strRegisterURL1--;
					continue;
				}
			if (soap_flag_strRegisterPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterPhone", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterPhone), "xsd:string"))
				{	soap_flag_strRegisterPhone1--;
					continue;
				}
			if (soap_flag_strRegisterComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterComment", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::strRegisterComment), "xsd:string"))
				{	soap_flag_strRegisterComment1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN, 0, sizeof(ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN), 0, soap_copy_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_LYRIC4_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN);
		((ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN*)p = *(ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN*)q;
}

void ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::strChecksum = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::strVersion = NULL;
	soap_default_int(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::nPlayTime);
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::strMACAddress = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::strIPAddress = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::strChecksum);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::strVersion);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::strMACAddress);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::strIPAddress);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strChecksum", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::strChecksum), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strVersion", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::strVersion), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:nPlayTime", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::nPlayTime), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMACAddress", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::strMACAddress), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strIPAddress", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::strIPAddress), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strChecksum1 = 1;
	size_t soap_flag_strVersion1 = 1;
	size_t soap_flag_nPlayTime1 = 1;
	size_t soap_flag_strMACAddress1 = 1;
	size_t soap_flag_strIPAddress1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strChecksum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strChecksum", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::strChecksum), "xsd:string"))
				{	soap_flag_strChecksum1--;
					continue;
				}
			if (soap_flag_strVersion1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strVersion", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::strVersion), "xsd:string"))
				{	soap_flag_strVersion1--;
					continue;
				}
			if (soap_flag_nPlayTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nPlayTime", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::nPlayTime), "xsd:int"))
				{	soap_flag_nPlayTime1--;
					continue;
				}
			if (soap_flag_strMACAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMACAddress", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::strMACAddress), "xsd:string"))
				{	soap_flag_strMACAddress1--;
					continue;
				}
			if (soap_flag_strIPAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strIPAddress", &(a->ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::strIPAddress), "xsd:string"))
				{	soap_flag_strIPAddress1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY, 0, sizeof(ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nPlayTime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_LYRIC4_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY);
		((ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY*)p = *(ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY*)q;
}

void ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strStatusID = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strInfoID = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegistDate = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strTitle = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strArtist = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strAlbum = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strLyric = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstName = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstEMail = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstURL = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstPhone = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstComment = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterName = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterEMail = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterURL = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterPhone = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterComment = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strStatusID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strInfoID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegistDate);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strArtist);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strAlbum);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strLyric);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstComment);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterComment);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strStatusID", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strStatusID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strInfoID", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strInfoID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegistDate", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegistDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strTitle", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strArtist", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strArtist), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strAlbum", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strAlbum), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strLyric", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strLyric), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstName", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstEMail", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstURL", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstPhone", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstComment", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstComment), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterName", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterEMail", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterURL", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterPhone", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterComment", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterComment), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strStatusID1 = 1;
	size_t soap_flag_strInfoID1 = 1;
	size_t soap_flag_strRegistDate1 = 1;
	size_t soap_flag_strTitle1 = 1;
	size_t soap_flag_strArtist1 = 1;
	size_t soap_flag_strAlbum1 = 1;
	size_t soap_flag_strLyric1 = 1;
	size_t soap_flag_strRegisterFirstName1 = 1;
	size_t soap_flag_strRegisterFirstEMail1 = 1;
	size_t soap_flag_strRegisterFirstURL1 = 1;
	size_t soap_flag_strRegisterFirstPhone1 = 1;
	size_t soap_flag_strRegisterFirstComment1 = 1;
	size_t soap_flag_strRegisterName1 = 1;
	size_t soap_flag_strRegisterEMail1 = 1;
	size_t soap_flag_strRegisterURL1 = 1;
	size_t soap_flag_strRegisterPhone1 = 1;
	size_t soap_flag_strRegisterComment1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strStatusID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strStatusID", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strStatusID), "xsd:string"))
				{	soap_flag_strStatusID1--;
					continue;
				}
			if (soap_flag_strInfoID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strInfoID", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strInfoID), "xsd:string"))
				{	soap_flag_strInfoID1--;
					continue;
				}
			if (soap_flag_strRegistDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegistDate", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegistDate), "xsd:string"))
				{	soap_flag_strRegistDate1--;
					continue;
				}
			if (soap_flag_strTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strTitle", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strTitle), "xsd:string"))
				{	soap_flag_strTitle1--;
					continue;
				}
			if (soap_flag_strArtist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strArtist", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strArtist), "xsd:string"))
				{	soap_flag_strArtist1--;
					continue;
				}
			if (soap_flag_strAlbum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strAlbum", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strAlbum), "xsd:string"))
				{	soap_flag_strAlbum1--;
					continue;
				}
			if (soap_flag_strLyric1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strLyric", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strLyric), "xsd:string"))
				{	soap_flag_strLyric1--;
					continue;
				}
			if (soap_flag_strRegisterFirstName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstName", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstName), "xsd:string"))
				{	soap_flag_strRegisterFirstName1--;
					continue;
				}
			if (soap_flag_strRegisterFirstEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstEMail", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstEMail), "xsd:string"))
				{	soap_flag_strRegisterFirstEMail1--;
					continue;
				}
			if (soap_flag_strRegisterFirstURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstURL", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstURL), "xsd:string"))
				{	soap_flag_strRegisterFirstURL1--;
					continue;
				}
			if (soap_flag_strRegisterFirstPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstPhone", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstPhone), "xsd:string"))
				{	soap_flag_strRegisterFirstPhone1--;
					continue;
				}
			if (soap_flag_strRegisterFirstComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstComment", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterFirstComment), "xsd:string"))
				{	soap_flag_strRegisterFirstComment1--;
					continue;
				}
			if (soap_flag_strRegisterName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterName", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterName), "xsd:string"))
				{	soap_flag_strRegisterName1--;
					continue;
				}
			if (soap_flag_strRegisterEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterEMail", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterEMail), "xsd:string"))
				{	soap_flag_strRegisterEMail1--;
					continue;
				}
			if (soap_flag_strRegisterURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterURL", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterURL), "xsd:string"))
				{	soap_flag_strRegisterURL1--;
					continue;
				}
			if (soap_flag_strRegisterPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterPhone", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterPhone), "xsd:string"))
				{	soap_flag_strRegisterPhone1--;
					continue;
				}
			if (soap_flag_strRegisterComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterComment", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::strRegisterComment), "xsd:string"))
				{	soap_flag_strRegisterComment1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN, 0, sizeof(ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN), 0, soap_copy_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_LYRIC3_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN);
		((ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN*)p = *(ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN*)q;
}

void ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strChecksum = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strMD5 = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strVersion = NULL;
	soap_default_int(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::nPlayTime);
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strMACAddress = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strIPAddress = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strChecksum);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strMD5);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strVersion);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strMACAddress);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strIPAddress);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strChecksum", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strChecksum), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMD5", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strMD5), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strVersion", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strVersion), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:nPlayTime", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::nPlayTime), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMACAddress", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strMACAddress), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strIPAddress", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strIPAddress), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strChecksum1 = 1;
	size_t soap_flag_strMD51 = 1;
	size_t soap_flag_strVersion1 = 1;
	size_t soap_flag_nPlayTime1 = 1;
	size_t soap_flag_strMACAddress1 = 1;
	size_t soap_flag_strIPAddress1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strChecksum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strChecksum", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strChecksum), "xsd:string"))
				{	soap_flag_strChecksum1--;
					continue;
				}
			if (soap_flag_strMD51 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMD5", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strMD5), "xsd:string"))
				{	soap_flag_strMD51--;
					continue;
				}
			if (soap_flag_strVersion1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strVersion", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strVersion), "xsd:string"))
				{	soap_flag_strVersion1--;
					continue;
				}
			if (soap_flag_nPlayTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nPlayTime", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::nPlayTime), "xsd:int"))
				{	soap_flag_nPlayTime1--;
					continue;
				}
			if (soap_flag_strMACAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMACAddress", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strMACAddress), "xsd:string"))
				{	soap_flag_strMACAddress1--;
					continue;
				}
			if (soap_flag_strIPAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strIPAddress", &(a->ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::strIPAddress), "xsd:string"))
				{	soap_flag_strIPAddress1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY, 0, sizeof(ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nPlayTime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_LYRIC3_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY);
		((ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY*)p = *(ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY*)q;
}

void ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY::strChecksum = NULL;
	this->ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY::strMACAddress = NULL;
	this->ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY::strVersion = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY::strChecksum);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY::strMACAddress);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY::strVersion);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strChecksum", -1, &(a->ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY::strChecksum), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMACAddress", -1, &(a->ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY::strMACAddress), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strVersion", -1, &(a->ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY::strVersion), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY, sizeof(ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strChecksum1 = 1;
	size_t soap_flag_strMACAddress1 = 1;
	size_t soap_flag_strVersion1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strChecksum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strChecksum", &(a->ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY::strChecksum), "xsd:string"))
				{	soap_flag_strChecksum1--;
					continue;
				}
			if (soap_flag_strMACAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMACAddress", &(a->ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY::strMACAddress), "xsd:string"))
				{	soap_flag_strMACAddress1--;
					continue;
				}
			if (soap_flag_strVersion1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strVersion", &(a->ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY::strVersion), "xsd:string"))
				{	soap_flag_strVersion1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY, 0, sizeof(ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_IS_REPORTED_FAULT_LYRIC_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY);
		((ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY*)p = *(ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY*)q;
}

void ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strChecksum = NULL;
	this->ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strMACAddress = NULL;
	this->ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strVersion = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strChecksum);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strMACAddress);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strVersion);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strChecksum", -1, &(a->ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strChecksum), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMACAddress", -1, &(a->ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strMACAddress), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strVersion", -1, &(a->ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strVersion), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY, sizeof(ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strChecksum1 = 1;
	size_t soap_flag_strMACAddress1 = 1;
	size_t soap_flag_strVersion1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strChecksum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strChecksum", &(a->ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strChecksum), "xsd:string"))
				{	soap_flag_strChecksum1--;
					continue;
				}
			if (soap_flag_strMACAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMACAddress", &(a->ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strMACAddress), "xsd:string"))
				{	soap_flag_strMACAddress1--;
					continue;
				}
			if (soap_flag_strVersion1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strVersion", &(a->ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strVersion), "xsd:string"))
				{	soap_flag_strVersion1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY, 0, sizeof(ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_IS_REPORTED_RECOMMENDATION_LYRIC_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY);
		((ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY*)p = *(ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY*)q;
}

void ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strChecksum = NULL;
	this->ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strMACAddress = NULL;
	this->ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strVersion = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strChecksum);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strMACAddress);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strVersion);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strChecksum", -1, &(a->ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strChecksum), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMACAddress", -1, &(a->ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strMACAddress), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strVersion", -1, &(a->ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strVersion), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY, sizeof(ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strChecksum1 = 1;
	size_t soap_flag_strMACAddress1 = 1;
	size_t soap_flag_strVersion1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strChecksum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strChecksum", &(a->ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strChecksum), "xsd:string"))
				{	soap_flag_strChecksum1--;
					continue;
				}
			if (soap_flag_strMACAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMACAddress", &(a->ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strMACAddress), "xsd:string"))
				{	soap_flag_strMACAddress1--;
					continue;
				}
			if (soap_flag_strVersion1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strVersion", &(a->ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::strVersion), "xsd:string"))
				{	soap_flag_strVersion1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY, 0, sizeof(ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_REPORT_RECOMMENDATION_LYRIC_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY);
		((ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY*)p = *(ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY*)q;
}

void ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::strChecksum = NULL;
	this->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::strComment = NULL;
	this->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::strMACAddress = NULL;
	this->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::strVersion = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::strChecksum);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::strComment);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::strMACAddress);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::strVersion);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strChecksum", -1, &(a->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::strChecksum), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strComment", -1, &(a->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::strComment), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMACAddress", -1, &(a->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::strMACAddress), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strVersion", -1, &(a->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::strVersion), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY, sizeof(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strChecksum1 = 1;
	size_t soap_flag_strComment1 = 1;
	size_t soap_flag_strMACAddress1 = 1;
	size_t soap_flag_strVersion1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strChecksum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strChecksum", &(a->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::strChecksum), "xsd:string"))
				{	soap_flag_strChecksum1--;
					continue;
				}
			if (soap_flag_strComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strComment", &(a->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::strComment), "xsd:string"))
				{	soap_flag_strComment1--;
					continue;
				}
			if (soap_flag_strMACAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMACAddress", &(a->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::strMACAddress), "xsd:string"))
				{	soap_flag_strMACAddress1--;
					continue;
				}
			if (soap_flag_strVersion1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strVersion", &(a->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::strVersion), "xsd:string"))
				{	soap_flag_strVersion1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY, 0, sizeof(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_REPORT_FAULT_LYRIC2_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(struct soap *soap, ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY);
		((ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY*)p = *(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY*)q;
}

void ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY::strMD5 = NULL;
	this->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY::strComment = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY::strMD5);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY::strComment);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMD5", -1, &(a->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY::strMD5), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strComment", -1, &(a->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY::strComment), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY, sizeof(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strMD51 = 1;
	size_t soap_flag_strComment1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strMD51 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMD5", &(a->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY::strMD5), "xsd:string"))
				{	soap_flag_strMD51--;
					continue;
				}
			if (soap_flag_strComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strComment", &(a->ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY::strComment), "xsd:string"))
				{	soap_flag_strComment1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY, 0, sizeof(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_REPORT_FAULT_LYRIC_WITH_COMMENT_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY);
		((ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY*)p = *(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY*)q;
}

void ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::nUploadLyricType);
	this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strMD5 = NULL;
	this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstName = NULL;
	this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstEMail = NULL;
	this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstURL = NULL;
	this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstPhone = NULL;
	this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstComment = NULL;
	this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterName = NULL;
	this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterEMail = NULL;
	this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterURL = NULL;
	this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterPhone = NULL;
	this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterComment = NULL;
	this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strFileName = NULL;
	this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strTitle = NULL;
	this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strArtist = NULL;
	this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strAlbum = NULL;
	soap_default_int(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::nInfoID);
	this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strLyric = NULL;
	soap_default_unsignedInt(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::nPlayTime);
	this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strVersion = NULL;
	this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strMACAddress = NULL;
	this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strIPAddress = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strMD5);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstComment);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterComment);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strFileName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strArtist);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strAlbum);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strLyric);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strVersion);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strMACAddress);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strIPAddress);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:nUploadLyricType", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::nUploadLyricType), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMD5", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strMD5), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstName", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstEMail", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstURL", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstPhone", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstComment", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstComment), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterName", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterEMail", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterURL", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterPhone", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterComment", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterComment), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strFileName", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strFileName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strTitle", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strArtist", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strArtist), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strAlbum", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strAlbum), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:nInfoID", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::nInfoID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strLyric", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strLyric), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:nPlayTime", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::nPlayTime), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strVersion", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strVersion), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strMACAddress", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strMACAddress), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strIPAddress", -1, &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strIPAddress), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY, sizeof(ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nUploadLyricType1 = 1;
	size_t soap_flag_strMD51 = 1;
	size_t soap_flag_strRegisterFirstName1 = 1;
	size_t soap_flag_strRegisterFirstEMail1 = 1;
	size_t soap_flag_strRegisterFirstURL1 = 1;
	size_t soap_flag_strRegisterFirstPhone1 = 1;
	size_t soap_flag_strRegisterFirstComment1 = 1;
	size_t soap_flag_strRegisterName1 = 1;
	size_t soap_flag_strRegisterEMail1 = 1;
	size_t soap_flag_strRegisterURL1 = 1;
	size_t soap_flag_strRegisterPhone1 = 1;
	size_t soap_flag_strRegisterComment1 = 1;
	size_t soap_flag_strFileName1 = 1;
	size_t soap_flag_strTitle1 = 1;
	size_t soap_flag_strArtist1 = 1;
	size_t soap_flag_strAlbum1 = 1;
	size_t soap_flag_nInfoID1 = 1;
	size_t soap_flag_strLyric1 = 1;
	size_t soap_flag_nPlayTime1 = 1;
	size_t soap_flag_strVersion1 = 1;
	size_t soap_flag_strMACAddress1 = 1;
	size_t soap_flag_strIPAddress1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nUploadLyricType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nUploadLyricType", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::nUploadLyricType), "xsd:int"))
				{	soap_flag_nUploadLyricType1--;
					continue;
				}
			if (soap_flag_strMD51 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMD5", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strMD5), "xsd:string"))
				{	soap_flag_strMD51--;
					continue;
				}
			if (soap_flag_strRegisterFirstName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstName", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstName), "xsd:string"))
				{	soap_flag_strRegisterFirstName1--;
					continue;
				}
			if (soap_flag_strRegisterFirstEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstEMail", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstEMail), "xsd:string"))
				{	soap_flag_strRegisterFirstEMail1--;
					continue;
				}
			if (soap_flag_strRegisterFirstURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstURL", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstURL), "xsd:string"))
				{	soap_flag_strRegisterFirstURL1--;
					continue;
				}
			if (soap_flag_strRegisterFirstPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstPhone", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstPhone), "xsd:string"))
				{	soap_flag_strRegisterFirstPhone1--;
					continue;
				}
			if (soap_flag_strRegisterFirstComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstComment", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterFirstComment), "xsd:string"))
				{	soap_flag_strRegisterFirstComment1--;
					continue;
				}
			if (soap_flag_strRegisterName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterName", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterName), "xsd:string"))
				{	soap_flag_strRegisterName1--;
					continue;
				}
			if (soap_flag_strRegisterEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterEMail", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterEMail), "xsd:string"))
				{	soap_flag_strRegisterEMail1--;
					continue;
				}
			if (soap_flag_strRegisterURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterURL", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterURL), "xsd:string"))
				{	soap_flag_strRegisterURL1--;
					continue;
				}
			if (soap_flag_strRegisterPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterPhone", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterPhone), "xsd:string"))
				{	soap_flag_strRegisterPhone1--;
					continue;
				}
			if (soap_flag_strRegisterComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterComment", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strRegisterComment), "xsd:string"))
				{	soap_flag_strRegisterComment1--;
					continue;
				}
			if (soap_flag_strFileName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strFileName", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strFileName), "xsd:string"))
				{	soap_flag_strFileName1--;
					continue;
				}
			if (soap_flag_strTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strTitle", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strTitle), "xsd:string"))
				{	soap_flag_strTitle1--;
					continue;
				}
			if (soap_flag_strArtist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strArtist", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strArtist), "xsd:string"))
				{	soap_flag_strArtist1--;
					continue;
				}
			if (soap_flag_strAlbum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strAlbum", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strAlbum), "xsd:string"))
				{	soap_flag_strAlbum1--;
					continue;
				}
			if (soap_flag_nInfoID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nInfoID", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::nInfoID), "xsd:int"))
				{	soap_flag_nInfoID1--;
					continue;
				}
			if (soap_flag_strLyric1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strLyric", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strLyric), "xsd:string"))
				{	soap_flag_strLyric1--;
					continue;
				}
			if (soap_flag_nPlayTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:nPlayTime", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::nPlayTime), "xsd:unsignedInt"))
				{	soap_flag_nPlayTime1--;
					continue;
				}
			if (soap_flag_strVersion1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strVersion", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strVersion), "xsd:string"))
				{	soap_flag_strVersion1--;
					continue;
				}
			if (soap_flag_strMACAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strMACAddress", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strMACAddress), "xsd:string"))
				{	soap_flag_strMACAddress1--;
					continue;
				}
			if (soap_flag_strIPAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strIPAddress", &(a->ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::strIPAddress), "xsd:string"))
				{	soap_flag_strIPAddress1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY, 0, sizeof(ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nUploadLyricType1 > 0 || soap_flag_nInfoID1 > 0 || soap_flag_nPlayTime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_UPLOAD_LYRIC_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY);
		((ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY*)p = *(ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY*)q;
}

void ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN::strResembleLyricCount = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN::strResembleLyricCount);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strResembleLyricCount", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN::strResembleLyricCount), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strResembleLyricCount1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strResembleLyricCount1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strResembleLyricCount", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN::strResembleLyricCount), "xsd:string"))
				{	soap_flag_strResembleLyricCount1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN, 0, sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN), 0, soap_copy_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_RESEMBLELYRIC2_COUNT_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN);
		((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN*)p = *(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN*)q;
}

void ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY::strTitle = NULL;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY::strArtistName = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY::strTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY::strArtistName);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strTitle", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY::strTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strArtistName", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY::strArtistName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strTitle1 = 1;
	size_t soap_flag_strArtistName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strTitle", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY::strTitle), "xsd:string"))
				{	soap_flag_strTitle1--;
					continue;
				}
			if (soap_flag_strArtistName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strArtistName", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY::strArtistName), "xsd:string"))
				{	soap_flag_strArtistName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY, 0, sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_RESEMBLELYRIC2_COUNT_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY);
		((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY*)p = *(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY*)q;
}

void ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strInfoID = NULL;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strOnlyLyricWord = NULL;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strTitle = NULL;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strLyric = NULL;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strArtistName = NULL;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strAlbumName = NULL;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstName = NULL;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstEMail = NULL;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstURL = NULL;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstPhone = NULL;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstComment = NULL;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterName = NULL;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterEMail = NULL;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterURL = NULL;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterPhone = NULL;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterComment = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strInfoID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strOnlyLyricWord);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strLyric);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strArtistName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strAlbumName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstComment);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterComment);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strInfoID", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strInfoID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strOnlyLyricWord", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strOnlyLyricWord), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strTitle", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strLyric", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strLyric), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strArtistName", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strArtistName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strAlbumName", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strAlbumName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstName", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstEMail", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstURL", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstPhone", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstComment", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstComment), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterName", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterEMail", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterURL", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterPhone", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterComment", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterComment), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strInfoID1 = 1;
	size_t soap_flag_strOnlyLyricWord1 = 1;
	size_t soap_flag_strTitle1 = 1;
	size_t soap_flag_strLyric1 = 1;
	size_t soap_flag_strArtistName1 = 1;
	size_t soap_flag_strAlbumName1 = 1;
	size_t soap_flag_strRegisterFirstName1 = 1;
	size_t soap_flag_strRegisterFirstEMail1 = 1;
	size_t soap_flag_strRegisterFirstURL1 = 1;
	size_t soap_flag_strRegisterFirstPhone1 = 1;
	size_t soap_flag_strRegisterFirstComment1 = 1;
	size_t soap_flag_strRegisterName1 = 1;
	size_t soap_flag_strRegisterEMail1 = 1;
	size_t soap_flag_strRegisterURL1 = 1;
	size_t soap_flag_strRegisterPhone1 = 1;
	size_t soap_flag_strRegisterComment1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strInfoID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strInfoID", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strInfoID), "xsd:string"))
				{	soap_flag_strInfoID1--;
					continue;
				}
			if (soap_flag_strOnlyLyricWord1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strOnlyLyricWord", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strOnlyLyricWord), "xsd:string"))
				{	soap_flag_strOnlyLyricWord1--;
					continue;
				}
			if (soap_flag_strTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strTitle", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strTitle), "xsd:string"))
				{	soap_flag_strTitle1--;
					continue;
				}
			if (soap_flag_strLyric1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strLyric", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strLyric), "xsd:string"))
				{	soap_flag_strLyric1--;
					continue;
				}
			if (soap_flag_strArtistName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strArtistName", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strArtistName), "xsd:string"))
				{	soap_flag_strArtistName1--;
					continue;
				}
			if (soap_flag_strAlbumName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strAlbumName", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strAlbumName), "xsd:string"))
				{	soap_flag_strAlbumName1--;
					continue;
				}
			if (soap_flag_strRegisterFirstName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstName", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstName), "xsd:string"))
				{	soap_flag_strRegisterFirstName1--;
					continue;
				}
			if (soap_flag_strRegisterFirstEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstEMail", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstEMail), "xsd:string"))
				{	soap_flag_strRegisterFirstEMail1--;
					continue;
				}
			if (soap_flag_strRegisterFirstURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstURL", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstURL), "xsd:string"))
				{	soap_flag_strRegisterFirstURL1--;
					continue;
				}
			if (soap_flag_strRegisterFirstPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstPhone", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstPhone), "xsd:string"))
				{	soap_flag_strRegisterFirstPhone1--;
					continue;
				}
			if (soap_flag_strRegisterFirstComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstComment", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterFirstComment), "xsd:string"))
				{	soap_flag_strRegisterFirstComment1--;
					continue;
				}
			if (soap_flag_strRegisterName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterName", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterName), "xsd:string"))
				{	soap_flag_strRegisterName1--;
					continue;
				}
			if (soap_flag_strRegisterEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterEMail", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterEMail), "xsd:string"))
				{	soap_flag_strRegisterEMail1--;
					continue;
				}
			if (soap_flag_strRegisterURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterURL", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterURL), "xsd:string"))
				{	soap_flag_strRegisterURL1--;
					continue;
				}
			if (soap_flag_strRegisterPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterPhone", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterPhone), "xsd:string"))
				{	soap_flag_strRegisterPhone1--;
					continue;
				}
			if (soap_flag_strRegisterComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterComment", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::strRegisterComment), "xsd:string"))
				{	soap_flag_strRegisterComment1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN, 0, sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN), 0, soap_copy_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_RESEMBLELYRIC2_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN);
		((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN*)p = *(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN*)q;
}

void ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, &this->ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN);
	/* transient soap skipped */
}

void ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, &this->ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN);
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, "ns1:ST_GET_RESEMBLELYRIC2_RETURN", -1, &(a->ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN, sizeof(ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, "ns1:ST_GET_RESEMBLELYRIC2_RETURN", &(a->ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN), "ns1:ST_GET_RESEMBLELYRIC2_RETURN"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN, 0, sizeof(ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN), 0, soap_copy_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfST_GET_RESEMBLELYRIC2_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN);
		((ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN*)p = *(ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN*)q;
}

void ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY::strTitle = NULL;
	this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY::strArtistName = NULL;
	soap_default_int(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY::nCurPage);
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY::strTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY::strArtistName);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strTitle", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY::strTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strArtistName", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY::strArtistName), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:nCurPage", -1, &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY::nCurPage), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strTitle1 = 1;
	size_t soap_flag_strArtistName1 = 1;
	size_t soap_flag_nCurPage1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strTitle", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY::strTitle), "xsd:string"))
				{	soap_flag_strTitle1--;
					continue;
				}
			if (soap_flag_strArtistName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strArtistName", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY::strArtistName), "xsd:string"))
				{	soap_flag_strArtistName1--;
					continue;
				}
			if (soap_flag_nCurPage1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:nCurPage", &(a->ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY::nCurPage), "xsd:int"))
				{	soap_flag_nCurPage1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY, 0, sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY), 0, soap_copy_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nCurPage1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_RESEMBLELYRIC2_QUERY", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY);
		((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY*)p = *(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY*)q;
}

void ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strStatusID = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strInfoID = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegistDate = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strTitle = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strArtist = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strAlbum = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strCountGood = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strCountBad = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strLyric = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstName = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstEMail = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstURL = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstPhone = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstComment = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterName = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterEMail = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterURL = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterPhone = NULL;
	this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterComment = NULL;
	/* transient soap skipped */
}

void ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strStatusID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strInfoID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegistDate);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strArtist);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strAlbum);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strCountGood);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strCountBad);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strLyric);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstComment);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterEMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterURL);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterPhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterComment);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strStatusID", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strStatusID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strInfoID", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strInfoID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegistDate", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegistDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strTitle", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strArtist", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strArtist), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strAlbum", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strAlbum), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCountGood", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strCountGood), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strCountBad", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strCountBad), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strLyric", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strLyric), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstName", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstEMail", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstURL", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstPhone", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterFirstComment", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstComment), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterName", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterEMail", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterEMail), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterURL", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterPhone", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterPhone), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strRegisterComment", -1, &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterComment), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN * SOAP_FMAC4 soap_in_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strStatusID1 = 1;
	size_t soap_flag_strInfoID1 = 1;
	size_t soap_flag_strRegistDate1 = 1;
	size_t soap_flag_strTitle1 = 1;
	size_t soap_flag_strArtist1 = 1;
	size_t soap_flag_strAlbum1 = 1;
	size_t soap_flag_strCountGood1 = 1;
	size_t soap_flag_strCountBad1 = 1;
	size_t soap_flag_strLyric1 = 1;
	size_t soap_flag_strRegisterFirstName1 = 1;
	size_t soap_flag_strRegisterFirstEMail1 = 1;
	size_t soap_flag_strRegisterFirstURL1 = 1;
	size_t soap_flag_strRegisterFirstPhone1 = 1;
	size_t soap_flag_strRegisterFirstComment1 = 1;
	size_t soap_flag_strRegisterName1 = 1;
	size_t soap_flag_strRegisterEMail1 = 1;
	size_t soap_flag_strRegisterURL1 = 1;
	size_t soap_flag_strRegisterPhone1 = 1;
	size_t soap_flag_strRegisterComment1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strStatusID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strStatusID", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strStatusID), "xsd:string"))
				{	soap_flag_strStatusID1--;
					continue;
				}
			if (soap_flag_strInfoID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strInfoID", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strInfoID), "xsd:string"))
				{	soap_flag_strInfoID1--;
					continue;
				}
			if (soap_flag_strRegistDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegistDate", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegistDate), "xsd:string"))
				{	soap_flag_strRegistDate1--;
					continue;
				}
			if (soap_flag_strTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strTitle", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strTitle), "xsd:string"))
				{	soap_flag_strTitle1--;
					continue;
				}
			if (soap_flag_strArtist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strArtist", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strArtist), "xsd:string"))
				{	soap_flag_strArtist1--;
					continue;
				}
			if (soap_flag_strAlbum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strAlbum", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strAlbum), "xsd:string"))
				{	soap_flag_strAlbum1--;
					continue;
				}
			if (soap_flag_strCountGood1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCountGood", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strCountGood), "xsd:string"))
				{	soap_flag_strCountGood1--;
					continue;
				}
			if (soap_flag_strCountBad1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strCountBad", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strCountBad), "xsd:string"))
				{	soap_flag_strCountBad1--;
					continue;
				}
			if (soap_flag_strLyric1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strLyric", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strLyric), "xsd:string"))
				{	soap_flag_strLyric1--;
					continue;
				}
			if (soap_flag_strRegisterFirstName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstName", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstName), "xsd:string"))
				{	soap_flag_strRegisterFirstName1--;
					continue;
				}
			if (soap_flag_strRegisterFirstEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstEMail", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstEMail), "xsd:string"))
				{	soap_flag_strRegisterFirstEMail1--;
					continue;
				}
			if (soap_flag_strRegisterFirstURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstURL", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstURL), "xsd:string"))
				{	soap_flag_strRegisterFirstURL1--;
					continue;
				}
			if (soap_flag_strRegisterFirstPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstPhone", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstPhone), "xsd:string"))
				{	soap_flag_strRegisterFirstPhone1--;
					continue;
				}
			if (soap_flag_strRegisterFirstComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterFirstComment", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterFirstComment), "xsd:string"))
				{	soap_flag_strRegisterFirstComment1--;
					continue;
				}
			if (soap_flag_strRegisterName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterName", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterName), "xsd:string"))
				{	soap_flag_strRegisterName1--;
					continue;
				}
			if (soap_flag_strRegisterEMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterEMail", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterEMail), "xsd:string"))
				{	soap_flag_strRegisterEMail1--;
					continue;
				}
			if (soap_flag_strRegisterURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterURL", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterURL), "xsd:string"))
				{	soap_flag_strRegisterURL1--;
					continue;
				}
			if (soap_flag_strRegisterPhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterPhone", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterPhone), "xsd:string"))
				{	soap_flag_strRegisterPhone1--;
					continue;
				}
			if (soap_flag_strRegisterComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:strRegisterComment", &(a->ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::strRegisterComment), "xsd:string"))
				{	soap_flag_strRegisterComment1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN, 0, sizeof(ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN), 0, soap_copy_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN);
	if (this->soap_out(soap, tag?tag:"ns1:ST_GET_LYRIC5_RETURN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN * SOAP_FMAC4 soap_get_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN);
		if (size)
			*size = sizeof(ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN);
		((ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN %p -> %p\n", q, p));
	*(ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN*)p = *(ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN*)q;
}

void ns1__ST_USCOREMUREKAINFO_USCORESERVICE::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::murekaID);
	this->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::title = NULL;
	this->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::artist = NULL;
	this->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::album = NULL;
	soap_default_int(soap, &this->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::trackNo);
	this->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::diskNo = NULL;
	this->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::bellingServiceUrl = NULL;
	soap_default_bool(soap, &this->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::hasBellingContents);
	/* transient soap skipped */
}

void ns1__ST_USCOREMUREKAINFO_USCORESERVICE::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::title);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::artist);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::album);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::diskNo);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::bellingServiceUrl);
	/* transient soap skipped */
#endif
}

int ns1__ST_USCOREMUREKAINFO_USCORESERVICE::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ST_USCOREMUREKAINFO_USCORESERVICE(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ST_USCOREMUREKAINFO_USCORESERVICE(struct soap *soap, const char *tag, int id, const ns1__ST_USCOREMUREKAINFO_USCORESERVICE *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ST_USCOREMUREKAINFO_USCORESERVICE), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:murekaID", -1, &(a->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::murekaID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:title", -1, &(a->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::title), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:artist", -1, &(a->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::artist), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:album", -1, &(a->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::album), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:trackNo", -1, &(a->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::trackNo), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:diskNo", -1, &(a->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::diskNo), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:bellingServiceUrl", -1, &(a->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::bellingServiceUrl), ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:hasBellingContents", -1, &(a->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::hasBellingContents), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ST_USCOREMUREKAINFO_USCORESERVICE::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ST_USCOREMUREKAINFO_USCORESERVICE(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ST_USCOREMUREKAINFO_USCORESERVICE * SOAP_FMAC4 soap_in_ns1__ST_USCOREMUREKAINFO_USCORESERVICE(struct soap *soap, const char *tag, ns1__ST_USCOREMUREKAINFO_USCORESERVICE *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ST_USCOREMUREKAINFO_USCORESERVICE *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ST_USCOREMUREKAINFO_USCORESERVICE, sizeof(ns1__ST_USCOREMUREKAINFO_USCORESERVICE), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ST_USCOREMUREKAINFO_USCORESERVICE)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ST_USCOREMUREKAINFO_USCORESERVICE *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_murekaID1 = 1;
	size_t soap_flag_title1 = 1;
	size_t soap_flag_artist1 = 1;
	size_t soap_flag_album1 = 1;
	size_t soap_flag_trackNo1 = 1;
	size_t soap_flag_diskNo1 = 1;
	size_t soap_flag_bellingServiceUrl1 = 1;
	size_t soap_flag_hasBellingContents1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_murekaID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:murekaID", &(a->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::murekaID), "xsd:int"))
				{	soap_flag_murekaID1--;
					continue;
				}
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:title", &(a->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			if (soap_flag_artist1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:artist", &(a->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::artist), "xsd:string"))
				{	soap_flag_artist1--;
					continue;
				}
			if (soap_flag_album1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:album", &(a->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::album), "xsd:string"))
				{	soap_flag_album1--;
					continue;
				}
			if (soap_flag_trackNo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:trackNo", &(a->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::trackNo), "xsd:int"))
				{	soap_flag_trackNo1--;
					continue;
				}
			if (soap_flag_diskNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:diskNo", &(a->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::diskNo), "xsd:string"))
				{	soap_flag_diskNo1--;
					continue;
				}
			if (soap_flag_bellingServiceUrl1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:bellingServiceUrl", &(a->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::bellingServiceUrl), "xsd:string"))
				{	soap_flag_bellingServiceUrl1--;
					continue;
				}
			if (soap_flag_hasBellingContents1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:hasBellingContents", &(a->ns1__ST_USCOREMUREKAINFO_USCORESERVICE::hasBellingContents), "xsd:boolean"))
				{	soap_flag_hasBellingContents1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ST_USCOREMUREKAINFO_USCORESERVICE *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ST_USCOREMUREKAINFO_USCORESERVICE, 0, sizeof(ns1__ST_USCOREMUREKAINFO_USCORESERVICE), 0, soap_copy_ns1__ST_USCOREMUREKAINFO_USCORESERVICE);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_murekaID1 > 0 || soap_flag_trackNo1 > 0 || soap_flag_hasBellingContents1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ST_USCOREMUREKAINFO_USCORESERVICE::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ST_USCOREMUREKAINFO_USCORESERVICE);
	if (this->soap_out(soap, tag?tag:"ns1:ST_MUREKAINFO_SERVICE", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ST_USCOREMUREKAINFO_USCORESERVICE::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ST_USCOREMUREKAINFO_USCORESERVICE(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ST_USCOREMUREKAINFO_USCORESERVICE * SOAP_FMAC4 soap_get_ns1__ST_USCOREMUREKAINFO_USCORESERVICE(struct soap *soap, ns1__ST_USCOREMUREKAINFO_USCORESERVICE *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ST_USCOREMUREKAINFO_USCORESERVICE(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ST_USCOREMUREKAINFO_USCORESERVICE * SOAP_FMAC2 soap_instantiate_ns1__ST_USCOREMUREKAINFO_USCORESERVICE(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ST_USCOREMUREKAINFO_USCORESERVICE(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ST_USCOREMUREKAINFO_USCORESERVICE, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ST_USCOREMUREKAINFO_USCORESERVICE);
		if (size)
			*size = sizeof(ns1__ST_USCOREMUREKAINFO_USCORESERVICE);
		((ns1__ST_USCOREMUREKAINFO_USCORESERVICE*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__ST_USCOREMUREKAINFO_USCORESERVICE, n);
		if (size)
			*size = n * sizeof(ns1__ST_USCOREMUREKAINFO_USCORESERVICE);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ST_USCOREMUREKAINFO_USCORESERVICE*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ST_USCOREMUREKAINFO_USCORESERVICE*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ST_USCOREMUREKAINFO_USCORESERVICE(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ST_USCOREMUREKAINFO_USCORESERVICE %p -> %p\n", q, p));
	*(ns1__ST_USCOREMUREKAINFO_USCORESERVICE*)p = *(ns1__ST_USCOREMUREKAINFO_USCORESERVICE*)q;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)(void*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
#endif
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)(void*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)(void*)&a->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)(void*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary);
	if (this->soap_out(soap, tag?tag:"xsd:base64Binary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary);
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__base64Binary, n);
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__base64Binary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetLatestLyricID_(struct soap *soap, struct __ns1__AdminGetLatestLyricID_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetLatestLyricID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetLatestLyricID_(struct soap *soap, const struct __ns1__AdminGetLatestLyricID_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetLatestLyricID(soap, &a->ns1__AdminGetLatestLyricID);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetLatestLyricID_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetLatestLyricID_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetLatestLyricID(soap, "ns1:AdminGetLatestLyricID", -1, &a->ns1__AdminGetLatestLyricID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetLatestLyricID_ * SOAP_FMAC4 soap_in___ns1__AdminGetLatestLyricID_(struct soap *soap, const char *tag, struct __ns1__AdminGetLatestLyricID_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetLatestLyricID = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetLatestLyricID_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetLatestLyricID_, sizeof(struct __ns1__AdminGetLatestLyricID_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetLatestLyricID_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetLatestLyricID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetLatestLyricID(soap, "ns1:AdminGetLatestLyricID", &a->ns1__AdminGetLatestLyricID, ""))
				{	soap_flag_ns1__AdminGetLatestLyricID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetLatestLyricID_(struct soap *soap, const struct __ns1__AdminGetLatestLyricID_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetLatestLyricID_(soap, tag?tag:"-ns1:AdminGetLatestLyricID", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetLatestLyricID_ * SOAP_FMAC4 soap_get___ns1__AdminGetLatestLyricID_(struct soap *soap, struct __ns1__AdminGetLatestLyricID_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetLatestLyricID_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetLatestLyricID_ * SOAP_FMAC2 soap_instantiate___ns1__AdminGetLatestLyricID_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetLatestLyricID_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetLatestLyricID_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetLatestLyricID_);
		if (size)
			*size = sizeof(struct __ns1__AdminGetLatestLyricID_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetLatestLyricID_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetLatestLyricID_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetLatestLyricID_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetLatestLyricID_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetLatestLyricID_ %p -> %p\n", q, p));
	*(struct __ns1__AdminGetLatestLyricID_*)p = *(struct __ns1__AdminGetLatestLyricID_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminDeleteLyrics_(struct soap *soap, struct __ns1__AdminDeleteLyrics_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminDeleteLyrics = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminDeleteLyrics_(struct soap *soap, const struct __ns1__AdminDeleteLyrics_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminDeleteLyrics(soap, &a->ns1__AdminDeleteLyrics);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminDeleteLyrics_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminDeleteLyrics_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminDeleteLyrics(soap, "ns1:AdminDeleteLyrics", -1, &a->ns1__AdminDeleteLyrics, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminDeleteLyrics_ * SOAP_FMAC4 soap_in___ns1__AdminDeleteLyrics_(struct soap *soap, const char *tag, struct __ns1__AdminDeleteLyrics_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminDeleteLyrics = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminDeleteLyrics_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminDeleteLyrics_, sizeof(struct __ns1__AdminDeleteLyrics_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminDeleteLyrics_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminDeleteLyrics && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminDeleteLyrics(soap, "ns1:AdminDeleteLyrics", &a->ns1__AdminDeleteLyrics, ""))
				{	soap_flag_ns1__AdminDeleteLyrics--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminDeleteLyrics_(struct soap *soap, const struct __ns1__AdminDeleteLyrics_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminDeleteLyrics_(soap, tag?tag:"-ns1:AdminDeleteLyrics", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminDeleteLyrics_ * SOAP_FMAC4 soap_get___ns1__AdminDeleteLyrics_(struct soap *soap, struct __ns1__AdminDeleteLyrics_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminDeleteLyrics_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminDeleteLyrics_ * SOAP_FMAC2 soap_instantiate___ns1__AdminDeleteLyrics_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminDeleteLyrics_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminDeleteLyrics_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminDeleteLyrics_);
		if (size)
			*size = sizeof(struct __ns1__AdminDeleteLyrics_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminDeleteLyrics_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminDeleteLyrics_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminDeleteLyrics_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminDeleteLyrics_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminDeleteLyrics_ %p -> %p\n", q, p));
	*(struct __ns1__AdminDeleteLyrics_*)p = *(struct __ns1__AdminDeleteLyrics_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetLyrics_(struct soap *soap, struct __ns1__AdminGetLyrics_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetLyrics = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetLyrics_(struct soap *soap, const struct __ns1__AdminGetLyrics_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetLyrics(soap, &a->ns1__AdminGetLyrics);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetLyrics_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetLyrics_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetLyrics(soap, "ns1:AdminGetLyrics", -1, &a->ns1__AdminGetLyrics, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetLyrics_ * SOAP_FMAC4 soap_in___ns1__AdminGetLyrics_(struct soap *soap, const char *tag, struct __ns1__AdminGetLyrics_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetLyrics = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetLyrics_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetLyrics_, sizeof(struct __ns1__AdminGetLyrics_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetLyrics_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetLyrics && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetLyrics(soap, "ns1:AdminGetLyrics", &a->ns1__AdminGetLyrics, ""))
				{	soap_flag_ns1__AdminGetLyrics--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetLyrics_(struct soap *soap, const struct __ns1__AdminGetLyrics_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetLyrics_(soap, tag?tag:"-ns1:AdminGetLyrics", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetLyrics_ * SOAP_FMAC4 soap_get___ns1__AdminGetLyrics_(struct soap *soap, struct __ns1__AdminGetLyrics_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetLyrics_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetLyrics_ * SOAP_FMAC2 soap_instantiate___ns1__AdminGetLyrics_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetLyrics_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetLyrics_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetLyrics_);
		if (size)
			*size = sizeof(struct __ns1__AdminGetLyrics_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetLyrics_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetLyrics_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetLyrics_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetLyrics_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetLyrics_ %p -> %p\n", q, p));
	*(struct __ns1__AdminGetLyrics_*)p = *(struct __ns1__AdminGetLyrics_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminLoginLyricMonitor_(struct soap *soap, struct __ns1__AdminLoginLyricMonitor_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminLoginLyricMonitor = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminLoginLyricMonitor_(struct soap *soap, const struct __ns1__AdminLoginLyricMonitor_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminLoginLyricMonitor(soap, &a->ns1__AdminLoginLyricMonitor);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminLoginLyricMonitor_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminLoginLyricMonitor_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminLoginLyricMonitor(soap, "ns1:AdminLoginLyricMonitor", -1, &a->ns1__AdminLoginLyricMonitor, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminLoginLyricMonitor_ * SOAP_FMAC4 soap_in___ns1__AdminLoginLyricMonitor_(struct soap *soap, const char *tag, struct __ns1__AdminLoginLyricMonitor_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminLoginLyricMonitor = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminLoginLyricMonitor_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminLoginLyricMonitor_, sizeof(struct __ns1__AdminLoginLyricMonitor_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminLoginLyricMonitor_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminLoginLyricMonitor && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminLoginLyricMonitor(soap, "ns1:AdminLoginLyricMonitor", &a->ns1__AdminLoginLyricMonitor, ""))
				{	soap_flag_ns1__AdminLoginLyricMonitor--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminLoginLyricMonitor_(struct soap *soap, const struct __ns1__AdminLoginLyricMonitor_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminLoginLyricMonitor_(soap, tag?tag:"-ns1:AdminLoginLyricMonitor", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminLoginLyricMonitor_ * SOAP_FMAC4 soap_get___ns1__AdminLoginLyricMonitor_(struct soap *soap, struct __ns1__AdminLoginLyricMonitor_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminLoginLyricMonitor_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminLoginLyricMonitor_ * SOAP_FMAC2 soap_instantiate___ns1__AdminLoginLyricMonitor_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminLoginLyricMonitor_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminLoginLyricMonitor_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminLoginLyricMonitor_);
		if (size)
			*size = sizeof(struct __ns1__AdminLoginLyricMonitor_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminLoginLyricMonitor_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminLoginLyricMonitor_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminLoginLyricMonitor_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminLoginLyricMonitor_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminLoginLyricMonitor_ %p -> %p\n", q, p));
	*(struct __ns1__AdminLoginLyricMonitor_*)p = *(struct __ns1__AdminLoginLyricMonitor_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSearchLyricCount_(struct soap *soap, struct __ns1__GetSearchLyricCount_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetSearchLyricCount = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSearchLyricCount_(struct soap *soap, const struct __ns1__GetSearchLyricCount_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetSearchLyricCount(soap, &a->ns1__GetSearchLyricCount);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSearchLyricCount_(struct soap *soap, const char *tag, int id, const struct __ns1__GetSearchLyricCount_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetSearchLyricCount(soap, "ns1:GetSearchLyricCount", -1, &a->ns1__GetSearchLyricCount, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetSearchLyricCount_ * SOAP_FMAC4 soap_in___ns1__GetSearchLyricCount_(struct soap *soap, const char *tag, struct __ns1__GetSearchLyricCount_ *a, const char *type)
{
	size_t soap_flag_ns1__GetSearchLyricCount = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetSearchLyricCount_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetSearchLyricCount_, sizeof(struct __ns1__GetSearchLyricCount_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetSearchLyricCount_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetSearchLyricCount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetSearchLyricCount(soap, "ns1:GetSearchLyricCount", &a->ns1__GetSearchLyricCount, ""))
				{	soap_flag_ns1__GetSearchLyricCount--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSearchLyricCount_(struct soap *soap, const struct __ns1__GetSearchLyricCount_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetSearchLyricCount_(soap, tag?tag:"-ns1:GetSearchLyricCount", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetSearchLyricCount_ * SOAP_FMAC4 soap_get___ns1__GetSearchLyricCount_(struct soap *soap, struct __ns1__GetSearchLyricCount_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetSearchLyricCount_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetSearchLyricCount_ * SOAP_FMAC2 soap_instantiate___ns1__GetSearchLyricCount_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetSearchLyricCount_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetSearchLyricCount_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetSearchLyricCount_);
		if (size)
			*size = sizeof(struct __ns1__GetSearchLyricCount_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetSearchLyricCount_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetSearchLyricCount_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetSearchLyricCount_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetSearchLyricCount_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetSearchLyricCount_ %p -> %p\n", q, p));
	*(struct __ns1__GetSearchLyricCount_*)p = *(struct __ns1__GetSearchLyricCount_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminLoginRightsJPN_(struct soap *soap, struct __ns1__AdminLoginRightsJPN_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminLoginRightsJPN = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminLoginRightsJPN_(struct soap *soap, const struct __ns1__AdminLoginRightsJPN_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminLoginRightsJPN(soap, &a->ns1__AdminLoginRightsJPN);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminLoginRightsJPN_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminLoginRightsJPN_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminLoginRightsJPN(soap, "ns1:AdminLoginRightsJPN", -1, &a->ns1__AdminLoginRightsJPN, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminLoginRightsJPN_ * SOAP_FMAC4 soap_in___ns1__AdminLoginRightsJPN_(struct soap *soap, const char *tag, struct __ns1__AdminLoginRightsJPN_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminLoginRightsJPN = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminLoginRightsJPN_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminLoginRightsJPN_, sizeof(struct __ns1__AdminLoginRightsJPN_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminLoginRightsJPN_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminLoginRightsJPN && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminLoginRightsJPN(soap, "ns1:AdminLoginRightsJPN", &a->ns1__AdminLoginRightsJPN, ""))
				{	soap_flag_ns1__AdminLoginRightsJPN--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminLoginRightsJPN_(struct soap *soap, const struct __ns1__AdminLoginRightsJPN_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminLoginRightsJPN_(soap, tag?tag:"-ns1:AdminLoginRightsJPN", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminLoginRightsJPN_ * SOAP_FMAC4 soap_get___ns1__AdminLoginRightsJPN_(struct soap *soap, struct __ns1__AdminLoginRightsJPN_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminLoginRightsJPN_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminLoginRightsJPN_ * SOAP_FMAC2 soap_instantiate___ns1__AdminLoginRightsJPN_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminLoginRightsJPN_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminLoginRightsJPN_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminLoginRightsJPN_);
		if (size)
			*size = sizeof(struct __ns1__AdminLoginRightsJPN_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminLoginRightsJPN_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminLoginRightsJPN_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminLoginRightsJPN_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminLoginRightsJPN_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminLoginRightsJPN_ %p -> %p\n", q, p));
	*(struct __ns1__AdminLoginRightsJPN_*)p = *(struct __ns1__AdminLoginRightsJPN_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminJPNSearchRightsInfoList_(struct soap *soap, struct __ns1__AdminJPNSearchRightsInfoList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminJPNSearchRightsInfoList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminJPNSearchRightsInfoList_(struct soap *soap, const struct __ns1__AdminJPNSearchRightsInfoList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminJPNSearchRightsInfoList(soap, &a->ns1__AdminJPNSearchRightsInfoList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminJPNSearchRightsInfoList_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminJPNSearchRightsInfoList_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminJPNSearchRightsInfoList(soap, "ns1:AdminJPNSearchRightsInfoList", -1, &a->ns1__AdminJPNSearchRightsInfoList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminJPNSearchRightsInfoList_ * SOAP_FMAC4 soap_in___ns1__AdminJPNSearchRightsInfoList_(struct soap *soap, const char *tag, struct __ns1__AdminJPNSearchRightsInfoList_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminJPNSearchRightsInfoList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminJPNSearchRightsInfoList_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminJPNSearchRightsInfoList_, sizeof(struct __ns1__AdminJPNSearchRightsInfoList_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminJPNSearchRightsInfoList_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminJPNSearchRightsInfoList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminJPNSearchRightsInfoList(soap, "ns1:AdminJPNSearchRightsInfoList", &a->ns1__AdminJPNSearchRightsInfoList, ""))
				{	soap_flag_ns1__AdminJPNSearchRightsInfoList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminJPNSearchRightsInfoList_(struct soap *soap, const struct __ns1__AdminJPNSearchRightsInfoList_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminJPNSearchRightsInfoList_(soap, tag?tag:"-ns1:AdminJPNSearchRightsInfoList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminJPNSearchRightsInfoList_ * SOAP_FMAC4 soap_get___ns1__AdminJPNSearchRightsInfoList_(struct soap *soap, struct __ns1__AdminJPNSearchRightsInfoList_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminJPNSearchRightsInfoList_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminJPNSearchRightsInfoList_ * SOAP_FMAC2 soap_instantiate___ns1__AdminJPNSearchRightsInfoList_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminJPNSearchRightsInfoList_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminJPNSearchRightsInfoList_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminJPNSearchRightsInfoList_);
		if (size)
			*size = sizeof(struct __ns1__AdminJPNSearchRightsInfoList_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminJPNSearchRightsInfoList_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminJPNSearchRightsInfoList_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminJPNSearchRightsInfoList_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminJPNSearchRightsInfoList_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminJPNSearchRightsInfoList_ %p -> %p\n", q, p));
	*(struct __ns1__AdminJPNSearchRightsInfoList_*)p = *(struct __ns1__AdminJPNSearchRightsInfoList_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminJPNSetRightsInfo_(struct soap *soap, struct __ns1__AdminJPNSetRightsInfo_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminJPNSetRightsInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminJPNSetRightsInfo_(struct soap *soap, const struct __ns1__AdminJPNSetRightsInfo_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminJPNSetRightsInfo(soap, &a->ns1__AdminJPNSetRightsInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminJPNSetRightsInfo_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminJPNSetRightsInfo_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminJPNSetRightsInfo(soap, "ns1:AdminJPNSetRightsInfo", -1, &a->ns1__AdminJPNSetRightsInfo, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminJPNSetRightsInfo_ * SOAP_FMAC4 soap_in___ns1__AdminJPNSetRightsInfo_(struct soap *soap, const char *tag, struct __ns1__AdminJPNSetRightsInfo_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminJPNSetRightsInfo = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminJPNSetRightsInfo_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminJPNSetRightsInfo_, sizeof(struct __ns1__AdminJPNSetRightsInfo_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminJPNSetRightsInfo_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminJPNSetRightsInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminJPNSetRightsInfo(soap, "ns1:AdminJPNSetRightsInfo", &a->ns1__AdminJPNSetRightsInfo, ""))
				{	soap_flag_ns1__AdminJPNSetRightsInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminJPNSetRightsInfo_(struct soap *soap, const struct __ns1__AdminJPNSetRightsInfo_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminJPNSetRightsInfo_(soap, tag?tag:"-ns1:AdminJPNSetRightsInfo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminJPNSetRightsInfo_ * SOAP_FMAC4 soap_get___ns1__AdminJPNSetRightsInfo_(struct soap *soap, struct __ns1__AdminJPNSetRightsInfo_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminJPNSetRightsInfo_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminJPNSetRightsInfo_ * SOAP_FMAC2 soap_instantiate___ns1__AdminJPNSetRightsInfo_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminJPNSetRightsInfo_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminJPNSetRightsInfo_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminJPNSetRightsInfo_);
		if (size)
			*size = sizeof(struct __ns1__AdminJPNSetRightsInfo_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminJPNSetRightsInfo_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminJPNSetRightsInfo_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminJPNSetRightsInfo_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminJPNSetRightsInfo_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminJPNSetRightsInfo_ %p -> %p\n", q, p));
	*(struct __ns1__AdminJPNSetRightsInfo_*)p = *(struct __ns1__AdminJPNSetRightsInfo_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminJPNGetRightsInfoByLyricID_(struct soap *soap, struct __ns1__AdminJPNGetRightsInfoByLyricID_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminJPNGetRightsInfoByLyricID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminJPNGetRightsInfoByLyricID_(struct soap *soap, const struct __ns1__AdminJPNGetRightsInfoByLyricID_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID(soap, &a->ns1__AdminJPNGetRightsInfoByLyricID);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminJPNGetRightsInfoByLyricID_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminJPNGetRightsInfoByLyricID_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID(soap, "ns1:AdminJPNGetRightsInfoByLyricID", -1, &a->ns1__AdminJPNGetRightsInfoByLyricID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminJPNGetRightsInfoByLyricID_ * SOAP_FMAC4 soap_in___ns1__AdminJPNGetRightsInfoByLyricID_(struct soap *soap, const char *tag, struct __ns1__AdminJPNGetRightsInfoByLyricID_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminJPNGetRightsInfoByLyricID = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminJPNGetRightsInfoByLyricID_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminJPNGetRightsInfoByLyricID_, sizeof(struct __ns1__AdminJPNGetRightsInfoByLyricID_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminJPNGetRightsInfoByLyricID_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminJPNGetRightsInfoByLyricID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID(soap, "ns1:AdminJPNGetRightsInfoByLyricID", &a->ns1__AdminJPNGetRightsInfoByLyricID, ""))
				{	soap_flag_ns1__AdminJPNGetRightsInfoByLyricID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminJPNGetRightsInfoByLyricID_(struct soap *soap, const struct __ns1__AdminJPNGetRightsInfoByLyricID_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminJPNGetRightsInfoByLyricID_(soap, tag?tag:"-ns1:AdminJPNGetRightsInfoByLyricID", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminJPNGetRightsInfoByLyricID_ * SOAP_FMAC4 soap_get___ns1__AdminJPNGetRightsInfoByLyricID_(struct soap *soap, struct __ns1__AdminJPNGetRightsInfoByLyricID_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminJPNGetRightsInfoByLyricID_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminJPNGetRightsInfoByLyricID_ * SOAP_FMAC2 soap_instantiate___ns1__AdminJPNGetRightsInfoByLyricID_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminJPNGetRightsInfoByLyricID_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminJPNGetRightsInfoByLyricID_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminJPNGetRightsInfoByLyricID_);
		if (size)
			*size = sizeof(struct __ns1__AdminJPNGetRightsInfoByLyricID_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminJPNGetRightsInfoByLyricID_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminJPNGetRightsInfoByLyricID_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminJPNGetRightsInfoByLyricID_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminJPNGetRightsInfoByLyricID_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminJPNGetRightsInfoByLyricID_ %p -> %p\n", q, p));
	*(struct __ns1__AdminJPNGetRightsInfoByLyricID_*)p = *(struct __ns1__AdminJPNGetRightsInfoByLyricID_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminJPNGetRightsInfoByModifyID_(struct soap *soap, struct __ns1__AdminJPNGetRightsInfoByModifyID_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminJPNGetRightsInfoByModifyID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminJPNGetRightsInfoByModifyID_(struct soap *soap, const struct __ns1__AdminJPNGetRightsInfoByModifyID_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID(soap, &a->ns1__AdminJPNGetRightsInfoByModifyID);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminJPNGetRightsInfoByModifyID_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminJPNGetRightsInfoByModifyID_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID(soap, "ns1:AdminJPNGetRightsInfoByModifyID", -1, &a->ns1__AdminJPNGetRightsInfoByModifyID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminJPNGetRightsInfoByModifyID_ * SOAP_FMAC4 soap_in___ns1__AdminJPNGetRightsInfoByModifyID_(struct soap *soap, const char *tag, struct __ns1__AdminJPNGetRightsInfoByModifyID_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminJPNGetRightsInfoByModifyID = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminJPNGetRightsInfoByModifyID_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminJPNGetRightsInfoByModifyID_, sizeof(struct __ns1__AdminJPNGetRightsInfoByModifyID_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminJPNGetRightsInfoByModifyID_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminJPNGetRightsInfoByModifyID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID(soap, "ns1:AdminJPNGetRightsInfoByModifyID", &a->ns1__AdminJPNGetRightsInfoByModifyID, ""))
				{	soap_flag_ns1__AdminJPNGetRightsInfoByModifyID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminJPNGetRightsInfoByModifyID_(struct soap *soap, const struct __ns1__AdminJPNGetRightsInfoByModifyID_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminJPNGetRightsInfoByModifyID_(soap, tag?tag:"-ns1:AdminJPNGetRightsInfoByModifyID", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminJPNGetRightsInfoByModifyID_ * SOAP_FMAC4 soap_get___ns1__AdminJPNGetRightsInfoByModifyID_(struct soap *soap, struct __ns1__AdminJPNGetRightsInfoByModifyID_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminJPNGetRightsInfoByModifyID_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminJPNGetRightsInfoByModifyID_ * SOAP_FMAC2 soap_instantiate___ns1__AdminJPNGetRightsInfoByModifyID_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminJPNGetRightsInfoByModifyID_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminJPNGetRightsInfoByModifyID_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminJPNGetRightsInfoByModifyID_);
		if (size)
			*size = sizeof(struct __ns1__AdminJPNGetRightsInfoByModifyID_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminJPNGetRightsInfoByModifyID_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminJPNGetRightsInfoByModifyID_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminJPNGetRightsInfoByModifyID_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminJPNGetRightsInfoByModifyID_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminJPNGetRightsInfoByModifyID_ %p -> %p\n", q, p));
	*(struct __ns1__AdminJPNGetRightsInfoByModifyID_*)p = *(struct __ns1__AdminJPNGetRightsInfoByModifyID_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLyricByID2_(struct soap *soap, struct __ns1__GetLyricByID2_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetLyricByID2 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLyricByID2_(struct soap *soap, const struct __ns1__GetLyricByID2_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetLyricByID2(soap, &a->ns1__GetLyricByID2);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLyricByID2_(struct soap *soap, const char *tag, int id, const struct __ns1__GetLyricByID2_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetLyricByID2(soap, "ns1:GetLyricByID2", -1, &a->ns1__GetLyricByID2, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyricByID2_ * SOAP_FMAC4 soap_in___ns1__GetLyricByID2_(struct soap *soap, const char *tag, struct __ns1__GetLyricByID2_ *a, const char *type)
{
	size_t soap_flag_ns1__GetLyricByID2 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetLyricByID2_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLyricByID2_, sizeof(struct __ns1__GetLyricByID2_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLyricByID2_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetLyricByID2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetLyricByID2(soap, "ns1:GetLyricByID2", &a->ns1__GetLyricByID2, ""))
				{	soap_flag_ns1__GetLyricByID2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLyricByID2_(struct soap *soap, const struct __ns1__GetLyricByID2_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLyricByID2_(soap, tag?tag:"-ns1:GetLyricByID2", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyricByID2_ * SOAP_FMAC4 soap_get___ns1__GetLyricByID2_(struct soap *soap, struct __ns1__GetLyricByID2_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLyricByID2_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLyricByID2_ * SOAP_FMAC2 soap_instantiate___ns1__GetLyricByID2_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLyricByID2_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLyricByID2_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLyricByID2_);
		if (size)
			*size = sizeof(struct __ns1__GetLyricByID2_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetLyricByID2_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetLyricByID2_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetLyricByID2_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLyricByID2_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLyricByID2_ %p -> %p\n", q, p));
	*(struct __ns1__GetLyricByID2_*)p = *(struct __ns1__GetLyricByID2_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLyricByID_(struct soap *soap, struct __ns1__GetLyricByID_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetLyricByID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLyricByID_(struct soap *soap, const struct __ns1__GetLyricByID_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetLyricByID(soap, &a->ns1__GetLyricByID);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLyricByID_(struct soap *soap, const char *tag, int id, const struct __ns1__GetLyricByID_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetLyricByID(soap, "ns1:GetLyricByID", -1, &a->ns1__GetLyricByID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyricByID_ * SOAP_FMAC4 soap_in___ns1__GetLyricByID_(struct soap *soap, const char *tag, struct __ns1__GetLyricByID_ *a, const char *type)
{
	size_t soap_flag_ns1__GetLyricByID = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetLyricByID_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLyricByID_, sizeof(struct __ns1__GetLyricByID_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLyricByID_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetLyricByID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetLyricByID(soap, "ns1:GetLyricByID", &a->ns1__GetLyricByID, ""))
				{	soap_flag_ns1__GetLyricByID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLyricByID_(struct soap *soap, const struct __ns1__GetLyricByID_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLyricByID_(soap, tag?tag:"-ns1:GetLyricByID", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyricByID_ * SOAP_FMAC4 soap_get___ns1__GetLyricByID_(struct soap *soap, struct __ns1__GetLyricByID_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLyricByID_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLyricByID_ * SOAP_FMAC2 soap_instantiate___ns1__GetLyricByID_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLyricByID_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLyricByID_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLyricByID_);
		if (size)
			*size = sizeof(struct __ns1__GetLyricByID_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetLyricByID_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetLyricByID_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetLyricByID_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLyricByID_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLyricByID_ %p -> %p\n", q, p));
	*(struct __ns1__GetLyricByID_*)p = *(struct __ns1__GetLyricByID_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetResembleLyricList2_(struct soap *soap, struct __ns1__GetResembleLyricList2_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetResembleLyricList2 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetResembleLyricList2_(struct soap *soap, const struct __ns1__GetResembleLyricList2_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetResembleLyricList2(soap, &a->ns1__GetResembleLyricList2);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetResembleLyricList2_(struct soap *soap, const char *tag, int id, const struct __ns1__GetResembleLyricList2_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetResembleLyricList2(soap, "ns1:GetResembleLyricList2", -1, &a->ns1__GetResembleLyricList2, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyricList2_ * SOAP_FMAC4 soap_in___ns1__GetResembleLyricList2_(struct soap *soap, const char *tag, struct __ns1__GetResembleLyricList2_ *a, const char *type)
{
	size_t soap_flag_ns1__GetResembleLyricList2 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetResembleLyricList2_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetResembleLyricList2_, sizeof(struct __ns1__GetResembleLyricList2_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetResembleLyricList2_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetResembleLyricList2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetResembleLyricList2(soap, "ns1:GetResembleLyricList2", &a->ns1__GetResembleLyricList2, ""))
				{	soap_flag_ns1__GetResembleLyricList2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetResembleLyricList2_(struct soap *soap, const struct __ns1__GetResembleLyricList2_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetResembleLyricList2_(soap, tag?tag:"-ns1:GetResembleLyricList2", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyricList2_ * SOAP_FMAC4 soap_get___ns1__GetResembleLyricList2_(struct soap *soap, struct __ns1__GetResembleLyricList2_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetResembleLyricList2_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetResembleLyricList2_ * SOAP_FMAC2 soap_instantiate___ns1__GetResembleLyricList2_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetResembleLyricList2_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetResembleLyricList2_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetResembleLyricList2_);
		if (size)
			*size = sizeof(struct __ns1__GetResembleLyricList2_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetResembleLyricList2_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetResembleLyricList2_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetResembleLyricList2_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetResembleLyricList2_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetResembleLyricList2_ %p -> %p\n", q, p));
	*(struct __ns1__GetResembleLyricList2_*)p = *(struct __ns1__GetResembleLyricList2_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetResembleLyricList_(struct soap *soap, struct __ns1__GetResembleLyricList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetResembleLyricList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetResembleLyricList_(struct soap *soap, const struct __ns1__GetResembleLyricList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetResembleLyricList(soap, &a->ns1__GetResembleLyricList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetResembleLyricList_(struct soap *soap, const char *tag, int id, const struct __ns1__GetResembleLyricList_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetResembleLyricList(soap, "ns1:GetResembleLyricList", -1, &a->ns1__GetResembleLyricList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyricList_ * SOAP_FMAC4 soap_in___ns1__GetResembleLyricList_(struct soap *soap, const char *tag, struct __ns1__GetResembleLyricList_ *a, const char *type)
{
	size_t soap_flag_ns1__GetResembleLyricList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetResembleLyricList_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetResembleLyricList_, sizeof(struct __ns1__GetResembleLyricList_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetResembleLyricList_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetResembleLyricList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetResembleLyricList(soap, "ns1:GetResembleLyricList", &a->ns1__GetResembleLyricList, ""))
				{	soap_flag_ns1__GetResembleLyricList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetResembleLyricList_(struct soap *soap, const struct __ns1__GetResembleLyricList_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetResembleLyricList_(soap, tag?tag:"-ns1:GetResembleLyricList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyricList_ * SOAP_FMAC4 soap_get___ns1__GetResembleLyricList_(struct soap *soap, struct __ns1__GetResembleLyricList_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetResembleLyricList_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetResembleLyricList_ * SOAP_FMAC2 soap_instantiate___ns1__GetResembleLyricList_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetResembleLyricList_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetResembleLyricList_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetResembleLyricList_);
		if (size)
			*size = sizeof(struct __ns1__GetResembleLyricList_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetResembleLyricList_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetResembleLyricList_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetResembleLyricList_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetResembleLyricList_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetResembleLyricList_ %p -> %p\n", q, p));
	*(struct __ns1__GetResembleLyricList_*)p = *(struct __ns1__GetResembleLyricList_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadForeignLyric_(struct soap *soap, struct __ns1__UploadForeignLyric_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__UploadForeignLyric = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadForeignLyric_(struct soap *soap, const struct __ns1__UploadForeignLyric_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__UploadForeignLyric(soap, &a->ns1__UploadForeignLyric);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadForeignLyric_(struct soap *soap, const char *tag, int id, const struct __ns1__UploadForeignLyric_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__UploadForeignLyric(soap, "ns1:UploadForeignLyric", -1, &a->ns1__UploadForeignLyric, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__UploadForeignLyric_ * SOAP_FMAC4 soap_in___ns1__UploadForeignLyric_(struct soap *soap, const char *tag, struct __ns1__UploadForeignLyric_ *a, const char *type)
{
	size_t soap_flag_ns1__UploadForeignLyric = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__UploadForeignLyric_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__UploadForeignLyric_, sizeof(struct __ns1__UploadForeignLyric_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__UploadForeignLyric_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__UploadForeignLyric && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__UploadForeignLyric(soap, "ns1:UploadForeignLyric", &a->ns1__UploadForeignLyric, ""))
				{	soap_flag_ns1__UploadForeignLyric--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadForeignLyric_(struct soap *soap, const struct __ns1__UploadForeignLyric_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__UploadForeignLyric_(soap, tag?tag:"-ns1:UploadForeignLyric", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__UploadForeignLyric_ * SOAP_FMAC4 soap_get___ns1__UploadForeignLyric_(struct soap *soap, struct __ns1__UploadForeignLyric_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__UploadForeignLyric_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__UploadForeignLyric_ * SOAP_FMAC2 soap_instantiate___ns1__UploadForeignLyric_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__UploadForeignLyric_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__UploadForeignLyric_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__UploadForeignLyric_);
		if (size)
			*size = sizeof(struct __ns1__UploadForeignLyric_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__UploadForeignLyric_, n);
		if (size)
			*size = n * sizeof(struct __ns1__UploadForeignLyric_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__UploadForeignLyric_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__UploadForeignLyric_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__UploadForeignLyric_ %p -> %p\n", q, p));
	*(struct __ns1__UploadForeignLyric_*)p = *(struct __ns1__UploadForeignLyric_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetBroadcastingList2_(struct soap *soap, struct __ns1__GetBroadcastingList2_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetBroadcastingList2 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetBroadcastingList2_(struct soap *soap, const struct __ns1__GetBroadcastingList2_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetBroadcastingList2(soap, &a->ns1__GetBroadcastingList2);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetBroadcastingList2_(struct soap *soap, const char *tag, int id, const struct __ns1__GetBroadcastingList2_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetBroadcastingList2(soap, "ns1:GetBroadcastingList2", -1, &a->ns1__GetBroadcastingList2, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetBroadcastingList2_ * SOAP_FMAC4 soap_in___ns1__GetBroadcastingList2_(struct soap *soap, const char *tag, struct __ns1__GetBroadcastingList2_ *a, const char *type)
{
	size_t soap_flag_ns1__GetBroadcastingList2 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetBroadcastingList2_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetBroadcastingList2_, sizeof(struct __ns1__GetBroadcastingList2_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetBroadcastingList2_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetBroadcastingList2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetBroadcastingList2(soap, "ns1:GetBroadcastingList2", &a->ns1__GetBroadcastingList2, ""))
				{	soap_flag_ns1__GetBroadcastingList2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetBroadcastingList2_(struct soap *soap, const struct __ns1__GetBroadcastingList2_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetBroadcastingList2_(soap, tag?tag:"-ns1:GetBroadcastingList2", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetBroadcastingList2_ * SOAP_FMAC4 soap_get___ns1__GetBroadcastingList2_(struct soap *soap, struct __ns1__GetBroadcastingList2_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetBroadcastingList2_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetBroadcastingList2_ * SOAP_FMAC2 soap_instantiate___ns1__GetBroadcastingList2_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetBroadcastingList2_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetBroadcastingList2_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetBroadcastingList2_);
		if (size)
			*size = sizeof(struct __ns1__GetBroadcastingList2_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetBroadcastingList2_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetBroadcastingList2_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetBroadcastingList2_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetBroadcastingList2_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetBroadcastingList2_ %p -> %p\n", q, p));
	*(struct __ns1__GetBroadcastingList2_*)p = *(struct __ns1__GetBroadcastingList2_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetBroadcastingList_(struct soap *soap, struct __ns1__GetBroadcastingList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetBroadcastingList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetBroadcastingList_(struct soap *soap, const struct __ns1__GetBroadcastingList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetBroadcastingList(soap, &a->ns1__GetBroadcastingList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetBroadcastingList_(struct soap *soap, const char *tag, int id, const struct __ns1__GetBroadcastingList_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetBroadcastingList(soap, "ns1:GetBroadcastingList", -1, &a->ns1__GetBroadcastingList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetBroadcastingList_ * SOAP_FMAC4 soap_in___ns1__GetBroadcastingList_(struct soap *soap, const char *tag, struct __ns1__GetBroadcastingList_ *a, const char *type)
{
	size_t soap_flag_ns1__GetBroadcastingList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetBroadcastingList_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetBroadcastingList_, sizeof(struct __ns1__GetBroadcastingList_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetBroadcastingList_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetBroadcastingList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetBroadcastingList(soap, "ns1:GetBroadcastingList", &a->ns1__GetBroadcastingList, ""))
				{	soap_flag_ns1__GetBroadcastingList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetBroadcastingList_(struct soap *soap, const struct __ns1__GetBroadcastingList_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetBroadcastingList_(soap, tag?tag:"-ns1:GetBroadcastingList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetBroadcastingList_ * SOAP_FMAC4 soap_get___ns1__GetBroadcastingList_(struct soap *soap, struct __ns1__GetBroadcastingList_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetBroadcastingList_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetBroadcastingList_ * SOAP_FMAC2 soap_instantiate___ns1__GetBroadcastingList_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetBroadcastingList_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetBroadcastingList_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetBroadcastingList_);
		if (size)
			*size = sizeof(struct __ns1__GetBroadcastingList_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetBroadcastingList_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetBroadcastingList_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetBroadcastingList_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetBroadcastingList_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetBroadcastingList_ %p -> %p\n", q, p));
	*(struct __ns1__GetBroadcastingList_*)p = *(struct __ns1__GetBroadcastingList_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CastGetExMetaDataList3_(struct soap *soap, struct __ns1__CastGetExMetaDataList3_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CastGetExMetaDataList3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CastGetExMetaDataList3_(struct soap *soap, const struct __ns1__CastGetExMetaDataList3_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CastGetExMetaDataList3(soap, &a->ns1__CastGetExMetaDataList3);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CastGetExMetaDataList3_(struct soap *soap, const char *tag, int id, const struct __ns1__CastGetExMetaDataList3_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__CastGetExMetaDataList3(soap, "ns1:CastGetExMetaDataList3", -1, &a->ns1__CastGetExMetaDataList3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastGetExMetaDataList3_ * SOAP_FMAC4 soap_in___ns1__CastGetExMetaDataList3_(struct soap *soap, const char *tag, struct __ns1__CastGetExMetaDataList3_ *a, const char *type)
{
	size_t soap_flag_ns1__CastGetExMetaDataList3 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__CastGetExMetaDataList3_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CastGetExMetaDataList3_, sizeof(struct __ns1__CastGetExMetaDataList3_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CastGetExMetaDataList3_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CastGetExMetaDataList3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CastGetExMetaDataList3(soap, "ns1:CastGetExMetaDataList3", &a->ns1__CastGetExMetaDataList3, ""))
				{	soap_flag_ns1__CastGetExMetaDataList3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CastGetExMetaDataList3_(struct soap *soap, const struct __ns1__CastGetExMetaDataList3_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CastGetExMetaDataList3_(soap, tag?tag:"-ns1:CastGetExMetaDataList3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastGetExMetaDataList3_ * SOAP_FMAC4 soap_get___ns1__CastGetExMetaDataList3_(struct soap *soap, struct __ns1__CastGetExMetaDataList3_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CastGetExMetaDataList3_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CastGetExMetaDataList3_ * SOAP_FMAC2 soap_instantiate___ns1__CastGetExMetaDataList3_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CastGetExMetaDataList3_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CastGetExMetaDataList3_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CastGetExMetaDataList3_);
		if (size)
			*size = sizeof(struct __ns1__CastGetExMetaDataList3_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CastGetExMetaDataList3_, n);
		if (size)
			*size = n * sizeof(struct __ns1__CastGetExMetaDataList3_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CastGetExMetaDataList3_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CastGetExMetaDataList3_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CastGetExMetaDataList3_ %p -> %p\n", q, p));
	*(struct __ns1__CastGetExMetaDataList3_*)p = *(struct __ns1__CastGetExMetaDataList3_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CastGetExMetaDataList2_(struct soap *soap, struct __ns1__CastGetExMetaDataList2_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CastGetExMetaDataList2 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CastGetExMetaDataList2_(struct soap *soap, const struct __ns1__CastGetExMetaDataList2_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CastGetExMetaDataList2(soap, &a->ns1__CastGetExMetaDataList2);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CastGetExMetaDataList2_(struct soap *soap, const char *tag, int id, const struct __ns1__CastGetExMetaDataList2_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__CastGetExMetaDataList2(soap, "ns1:CastGetExMetaDataList2", -1, &a->ns1__CastGetExMetaDataList2, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastGetExMetaDataList2_ * SOAP_FMAC4 soap_in___ns1__CastGetExMetaDataList2_(struct soap *soap, const char *tag, struct __ns1__CastGetExMetaDataList2_ *a, const char *type)
{
	size_t soap_flag_ns1__CastGetExMetaDataList2 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__CastGetExMetaDataList2_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CastGetExMetaDataList2_, sizeof(struct __ns1__CastGetExMetaDataList2_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CastGetExMetaDataList2_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CastGetExMetaDataList2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CastGetExMetaDataList2(soap, "ns1:CastGetExMetaDataList2", &a->ns1__CastGetExMetaDataList2, ""))
				{	soap_flag_ns1__CastGetExMetaDataList2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CastGetExMetaDataList2_(struct soap *soap, const struct __ns1__CastGetExMetaDataList2_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CastGetExMetaDataList2_(soap, tag?tag:"-ns1:CastGetExMetaDataList2", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastGetExMetaDataList2_ * SOAP_FMAC4 soap_get___ns1__CastGetExMetaDataList2_(struct soap *soap, struct __ns1__CastGetExMetaDataList2_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CastGetExMetaDataList2_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CastGetExMetaDataList2_ * SOAP_FMAC2 soap_instantiate___ns1__CastGetExMetaDataList2_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CastGetExMetaDataList2_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CastGetExMetaDataList2_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CastGetExMetaDataList2_);
		if (size)
			*size = sizeof(struct __ns1__CastGetExMetaDataList2_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CastGetExMetaDataList2_, n);
		if (size)
			*size = n * sizeof(struct __ns1__CastGetExMetaDataList2_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CastGetExMetaDataList2_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CastGetExMetaDataList2_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CastGetExMetaDataList2_ %p -> %p\n", q, p));
	*(struct __ns1__CastGetExMetaDataList2_*)p = *(struct __ns1__CastGetExMetaDataList2_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CastGetExMetaDataList_(struct soap *soap, struct __ns1__CastGetExMetaDataList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CastGetExMetaDataList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CastGetExMetaDataList_(struct soap *soap, const struct __ns1__CastGetExMetaDataList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CastGetExMetaDataList(soap, &a->ns1__CastGetExMetaDataList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CastGetExMetaDataList_(struct soap *soap, const char *tag, int id, const struct __ns1__CastGetExMetaDataList_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__CastGetExMetaDataList(soap, "ns1:CastGetExMetaDataList", -1, &a->ns1__CastGetExMetaDataList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastGetExMetaDataList_ * SOAP_FMAC4 soap_in___ns1__CastGetExMetaDataList_(struct soap *soap, const char *tag, struct __ns1__CastGetExMetaDataList_ *a, const char *type)
{
	size_t soap_flag_ns1__CastGetExMetaDataList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__CastGetExMetaDataList_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CastGetExMetaDataList_, sizeof(struct __ns1__CastGetExMetaDataList_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CastGetExMetaDataList_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CastGetExMetaDataList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CastGetExMetaDataList(soap, "ns1:CastGetExMetaDataList", &a->ns1__CastGetExMetaDataList, ""))
				{	soap_flag_ns1__CastGetExMetaDataList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CastGetExMetaDataList_(struct soap *soap, const struct __ns1__CastGetExMetaDataList_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CastGetExMetaDataList_(soap, tag?tag:"-ns1:CastGetExMetaDataList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastGetExMetaDataList_ * SOAP_FMAC4 soap_get___ns1__CastGetExMetaDataList_(struct soap *soap, struct __ns1__CastGetExMetaDataList_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CastGetExMetaDataList_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CastGetExMetaDataList_ * SOAP_FMAC2 soap_instantiate___ns1__CastGetExMetaDataList_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CastGetExMetaDataList_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CastGetExMetaDataList_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CastGetExMetaDataList_);
		if (size)
			*size = sizeof(struct __ns1__CastGetExMetaDataList_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CastGetExMetaDataList_, n);
		if (size)
			*size = n * sizeof(struct __ns1__CastGetExMetaDataList_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CastGetExMetaDataList_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CastGetExMetaDataList_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CastGetExMetaDataList_ %p -> %p\n", q, p));
	*(struct __ns1__CastGetExMetaDataList_*)p = *(struct __ns1__CastGetExMetaDataList_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CastGetExMetaData_(struct soap *soap, struct __ns1__CastGetExMetaData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CastGetExMetaData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CastGetExMetaData_(struct soap *soap, const struct __ns1__CastGetExMetaData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CastGetExMetaData(soap, &a->ns1__CastGetExMetaData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CastGetExMetaData_(struct soap *soap, const char *tag, int id, const struct __ns1__CastGetExMetaData_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__CastGetExMetaData(soap, "ns1:CastGetExMetaData", -1, &a->ns1__CastGetExMetaData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastGetExMetaData_ * SOAP_FMAC4 soap_in___ns1__CastGetExMetaData_(struct soap *soap, const char *tag, struct __ns1__CastGetExMetaData_ *a, const char *type)
{
	size_t soap_flag_ns1__CastGetExMetaData = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__CastGetExMetaData_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CastGetExMetaData_, sizeof(struct __ns1__CastGetExMetaData_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CastGetExMetaData_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CastGetExMetaData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CastGetExMetaData(soap, "ns1:CastGetExMetaData", &a->ns1__CastGetExMetaData, ""))
				{	soap_flag_ns1__CastGetExMetaData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CastGetExMetaData_(struct soap *soap, const struct __ns1__CastGetExMetaData_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CastGetExMetaData_(soap, tag?tag:"-ns1:CastGetExMetaData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastGetExMetaData_ * SOAP_FMAC4 soap_get___ns1__CastGetExMetaData_(struct soap *soap, struct __ns1__CastGetExMetaData_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CastGetExMetaData_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CastGetExMetaData_ * SOAP_FMAC2 soap_instantiate___ns1__CastGetExMetaData_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CastGetExMetaData_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CastGetExMetaData_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CastGetExMetaData_);
		if (size)
			*size = sizeof(struct __ns1__CastGetExMetaData_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CastGetExMetaData_, n);
		if (size)
			*size = n * sizeof(struct __ns1__CastGetExMetaData_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CastGetExMetaData_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CastGetExMetaData_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CastGetExMetaData_ %p -> %p\n", q, p));
	*(struct __ns1__CastGetExMetaData_*)p = *(struct __ns1__CastGetExMetaData_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CastRemoveExMetaData_(struct soap *soap, struct __ns1__CastRemoveExMetaData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CastRemoveExMetaData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CastRemoveExMetaData_(struct soap *soap, const struct __ns1__CastRemoveExMetaData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CastRemoveExMetaData(soap, &a->ns1__CastRemoveExMetaData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CastRemoveExMetaData_(struct soap *soap, const char *tag, int id, const struct __ns1__CastRemoveExMetaData_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__CastRemoveExMetaData(soap, "ns1:CastRemoveExMetaData", -1, &a->ns1__CastRemoveExMetaData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastRemoveExMetaData_ * SOAP_FMAC4 soap_in___ns1__CastRemoveExMetaData_(struct soap *soap, const char *tag, struct __ns1__CastRemoveExMetaData_ *a, const char *type)
{
	size_t soap_flag_ns1__CastRemoveExMetaData = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__CastRemoveExMetaData_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CastRemoveExMetaData_, sizeof(struct __ns1__CastRemoveExMetaData_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CastRemoveExMetaData_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CastRemoveExMetaData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CastRemoveExMetaData(soap, "ns1:CastRemoveExMetaData", &a->ns1__CastRemoveExMetaData, ""))
				{	soap_flag_ns1__CastRemoveExMetaData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CastRemoveExMetaData_(struct soap *soap, const struct __ns1__CastRemoveExMetaData_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CastRemoveExMetaData_(soap, tag?tag:"-ns1:CastRemoveExMetaData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastRemoveExMetaData_ * SOAP_FMAC4 soap_get___ns1__CastRemoveExMetaData_(struct soap *soap, struct __ns1__CastRemoveExMetaData_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CastRemoveExMetaData_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CastRemoveExMetaData_ * SOAP_FMAC2 soap_instantiate___ns1__CastRemoveExMetaData_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CastRemoveExMetaData_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CastRemoveExMetaData_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CastRemoveExMetaData_);
		if (size)
			*size = sizeof(struct __ns1__CastRemoveExMetaData_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CastRemoveExMetaData_, n);
		if (size)
			*size = n * sizeof(struct __ns1__CastRemoveExMetaData_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CastRemoveExMetaData_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CastRemoveExMetaData_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CastRemoveExMetaData_ %p -> %p\n", q, p));
	*(struct __ns1__CastRemoveExMetaData_*)p = *(struct __ns1__CastRemoveExMetaData_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CastUploadExMetaData3_(struct soap *soap, struct __ns1__CastUploadExMetaData3_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CastUploadExMetaData3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CastUploadExMetaData3_(struct soap *soap, const struct __ns1__CastUploadExMetaData3_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CastUploadExMetaData3(soap, &a->ns1__CastUploadExMetaData3);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CastUploadExMetaData3_(struct soap *soap, const char *tag, int id, const struct __ns1__CastUploadExMetaData3_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__CastUploadExMetaData3(soap, "ns1:CastUploadExMetaData3", -1, &a->ns1__CastUploadExMetaData3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastUploadExMetaData3_ * SOAP_FMAC4 soap_in___ns1__CastUploadExMetaData3_(struct soap *soap, const char *tag, struct __ns1__CastUploadExMetaData3_ *a, const char *type)
{
	size_t soap_flag_ns1__CastUploadExMetaData3 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__CastUploadExMetaData3_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CastUploadExMetaData3_, sizeof(struct __ns1__CastUploadExMetaData3_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CastUploadExMetaData3_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CastUploadExMetaData3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CastUploadExMetaData3(soap, "ns1:CastUploadExMetaData3", &a->ns1__CastUploadExMetaData3, ""))
				{	soap_flag_ns1__CastUploadExMetaData3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CastUploadExMetaData3_(struct soap *soap, const struct __ns1__CastUploadExMetaData3_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CastUploadExMetaData3_(soap, tag?tag:"-ns1:CastUploadExMetaData3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastUploadExMetaData3_ * SOAP_FMAC4 soap_get___ns1__CastUploadExMetaData3_(struct soap *soap, struct __ns1__CastUploadExMetaData3_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CastUploadExMetaData3_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CastUploadExMetaData3_ * SOAP_FMAC2 soap_instantiate___ns1__CastUploadExMetaData3_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CastUploadExMetaData3_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CastUploadExMetaData3_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CastUploadExMetaData3_);
		if (size)
			*size = sizeof(struct __ns1__CastUploadExMetaData3_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CastUploadExMetaData3_, n);
		if (size)
			*size = n * sizeof(struct __ns1__CastUploadExMetaData3_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CastUploadExMetaData3_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CastUploadExMetaData3_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CastUploadExMetaData3_ %p -> %p\n", q, p));
	*(struct __ns1__CastUploadExMetaData3_*)p = *(struct __ns1__CastUploadExMetaData3_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CastUploadExMetaData2_(struct soap *soap, struct __ns1__CastUploadExMetaData2_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CastUploadExMetaData2 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CastUploadExMetaData2_(struct soap *soap, const struct __ns1__CastUploadExMetaData2_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CastUploadExMetaData2(soap, &a->ns1__CastUploadExMetaData2);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CastUploadExMetaData2_(struct soap *soap, const char *tag, int id, const struct __ns1__CastUploadExMetaData2_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__CastUploadExMetaData2(soap, "ns1:CastUploadExMetaData2", -1, &a->ns1__CastUploadExMetaData2, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastUploadExMetaData2_ * SOAP_FMAC4 soap_in___ns1__CastUploadExMetaData2_(struct soap *soap, const char *tag, struct __ns1__CastUploadExMetaData2_ *a, const char *type)
{
	size_t soap_flag_ns1__CastUploadExMetaData2 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__CastUploadExMetaData2_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CastUploadExMetaData2_, sizeof(struct __ns1__CastUploadExMetaData2_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CastUploadExMetaData2_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CastUploadExMetaData2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CastUploadExMetaData2(soap, "ns1:CastUploadExMetaData2", &a->ns1__CastUploadExMetaData2, ""))
				{	soap_flag_ns1__CastUploadExMetaData2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CastUploadExMetaData2_(struct soap *soap, const struct __ns1__CastUploadExMetaData2_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CastUploadExMetaData2_(soap, tag?tag:"-ns1:CastUploadExMetaData2", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastUploadExMetaData2_ * SOAP_FMAC4 soap_get___ns1__CastUploadExMetaData2_(struct soap *soap, struct __ns1__CastUploadExMetaData2_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CastUploadExMetaData2_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CastUploadExMetaData2_ * SOAP_FMAC2 soap_instantiate___ns1__CastUploadExMetaData2_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CastUploadExMetaData2_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CastUploadExMetaData2_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CastUploadExMetaData2_);
		if (size)
			*size = sizeof(struct __ns1__CastUploadExMetaData2_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CastUploadExMetaData2_, n);
		if (size)
			*size = n * sizeof(struct __ns1__CastUploadExMetaData2_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CastUploadExMetaData2_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CastUploadExMetaData2_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CastUploadExMetaData2_ %p -> %p\n", q, p));
	*(struct __ns1__CastUploadExMetaData2_*)p = *(struct __ns1__CastUploadExMetaData2_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CastUploadExMetaData_(struct soap *soap, struct __ns1__CastUploadExMetaData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CastUploadExMetaData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CastUploadExMetaData_(struct soap *soap, const struct __ns1__CastUploadExMetaData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CastUploadExMetaData(soap, &a->ns1__CastUploadExMetaData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CastUploadExMetaData_(struct soap *soap, const char *tag, int id, const struct __ns1__CastUploadExMetaData_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__CastUploadExMetaData(soap, "ns1:CastUploadExMetaData", -1, &a->ns1__CastUploadExMetaData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastUploadExMetaData_ * SOAP_FMAC4 soap_in___ns1__CastUploadExMetaData_(struct soap *soap, const char *tag, struct __ns1__CastUploadExMetaData_ *a, const char *type)
{
	size_t soap_flag_ns1__CastUploadExMetaData = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__CastUploadExMetaData_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CastUploadExMetaData_, sizeof(struct __ns1__CastUploadExMetaData_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CastUploadExMetaData_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CastUploadExMetaData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CastUploadExMetaData(soap, "ns1:CastUploadExMetaData", &a->ns1__CastUploadExMetaData, ""))
				{	soap_flag_ns1__CastUploadExMetaData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CastUploadExMetaData_(struct soap *soap, const struct __ns1__CastUploadExMetaData_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CastUploadExMetaData_(soap, tag?tag:"-ns1:CastUploadExMetaData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastUploadExMetaData_ * SOAP_FMAC4 soap_get___ns1__CastUploadExMetaData_(struct soap *soap, struct __ns1__CastUploadExMetaData_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CastUploadExMetaData_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CastUploadExMetaData_ * SOAP_FMAC2 soap_instantiate___ns1__CastUploadExMetaData_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CastUploadExMetaData_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CastUploadExMetaData_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CastUploadExMetaData_);
		if (size)
			*size = sizeof(struct __ns1__CastUploadExMetaData_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CastUploadExMetaData_, n);
		if (size)
			*size = n * sizeof(struct __ns1__CastUploadExMetaData_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CastUploadExMetaData_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CastUploadExMetaData_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CastUploadExMetaData_ %p -> %p\n", q, p));
	*(struct __ns1__CastUploadExMetaData_*)p = *(struct __ns1__CastUploadExMetaData_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetAlbaStatistic_(struct soap *soap, struct __ns1__AdminGetAlbaStatistic_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetAlbaStatistic = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetAlbaStatistic_(struct soap *soap, const struct __ns1__AdminGetAlbaStatistic_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetAlbaStatistic(soap, &a->ns1__AdminGetAlbaStatistic);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetAlbaStatistic_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetAlbaStatistic_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetAlbaStatistic(soap, "ns1:AdminGetAlbaStatistic", -1, &a->ns1__AdminGetAlbaStatistic, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetAlbaStatistic_ * SOAP_FMAC4 soap_in___ns1__AdminGetAlbaStatistic_(struct soap *soap, const char *tag, struct __ns1__AdminGetAlbaStatistic_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetAlbaStatistic = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetAlbaStatistic_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetAlbaStatistic_, sizeof(struct __ns1__AdminGetAlbaStatistic_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetAlbaStatistic_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetAlbaStatistic && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetAlbaStatistic(soap, "ns1:AdminGetAlbaStatistic", &a->ns1__AdminGetAlbaStatistic, ""))
				{	soap_flag_ns1__AdminGetAlbaStatistic--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetAlbaStatistic_(struct soap *soap, const struct __ns1__AdminGetAlbaStatistic_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetAlbaStatistic_(soap, tag?tag:"-ns1:AdminGetAlbaStatistic", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetAlbaStatistic_ * SOAP_FMAC4 soap_get___ns1__AdminGetAlbaStatistic_(struct soap *soap, struct __ns1__AdminGetAlbaStatistic_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetAlbaStatistic_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetAlbaStatistic_ * SOAP_FMAC2 soap_instantiate___ns1__AdminGetAlbaStatistic_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetAlbaStatistic_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetAlbaStatistic_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetAlbaStatistic_);
		if (size)
			*size = sizeof(struct __ns1__AdminGetAlbaStatistic_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetAlbaStatistic_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetAlbaStatistic_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetAlbaStatistic_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetAlbaStatistic_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetAlbaStatistic_ %p -> %p\n", q, p));
	*(struct __ns1__AdminGetAlbaStatistic_*)p = *(struct __ns1__AdminGetAlbaStatistic_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetCountReport_(struct soap *soap, struct __ns1__AdminGetCountReport_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetCountReport = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetCountReport_(struct soap *soap, const struct __ns1__AdminGetCountReport_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetCountReport(soap, &a->ns1__AdminGetCountReport);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetCountReport_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetCountReport_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetCountReport(soap, "ns1:AdminGetCountReport", -1, &a->ns1__AdminGetCountReport, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountReport_ * SOAP_FMAC4 soap_in___ns1__AdminGetCountReport_(struct soap *soap, const char *tag, struct __ns1__AdminGetCountReport_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetCountReport = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetCountReport_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetCountReport_, sizeof(struct __ns1__AdminGetCountReport_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetCountReport_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetCountReport && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetCountReport(soap, "ns1:AdminGetCountReport", &a->ns1__AdminGetCountReport, ""))
				{	soap_flag_ns1__AdminGetCountReport--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetCountReport_(struct soap *soap, const struct __ns1__AdminGetCountReport_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetCountReport_(soap, tag?tag:"-ns1:AdminGetCountReport", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountReport_ * SOAP_FMAC4 soap_get___ns1__AdminGetCountReport_(struct soap *soap, struct __ns1__AdminGetCountReport_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetCountReport_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetCountReport_ * SOAP_FMAC2 soap_instantiate___ns1__AdminGetCountReport_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetCountReport_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetCountReport_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetCountReport_);
		if (size)
			*size = sizeof(struct __ns1__AdminGetCountReport_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetCountReport_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetCountReport_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetCountReport_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetCountReport_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetCountReport_ %p -> %p\n", q, p));
	*(struct __ns1__AdminGetCountReport_*)p = *(struct __ns1__AdminGetCountReport_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetCountModify_(struct soap *soap, struct __ns1__AdminGetCountModify_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetCountModify = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetCountModify_(struct soap *soap, const struct __ns1__AdminGetCountModify_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetCountModify(soap, &a->ns1__AdminGetCountModify);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetCountModify_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetCountModify_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetCountModify(soap, "ns1:AdminGetCountModify", -1, &a->ns1__AdminGetCountModify, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountModify_ * SOAP_FMAC4 soap_in___ns1__AdminGetCountModify_(struct soap *soap, const char *tag, struct __ns1__AdminGetCountModify_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetCountModify = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetCountModify_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetCountModify_, sizeof(struct __ns1__AdminGetCountModify_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetCountModify_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetCountModify && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetCountModify(soap, "ns1:AdminGetCountModify", &a->ns1__AdminGetCountModify, ""))
				{	soap_flag_ns1__AdminGetCountModify--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetCountModify_(struct soap *soap, const struct __ns1__AdminGetCountModify_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetCountModify_(soap, tag?tag:"-ns1:AdminGetCountModify", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountModify_ * SOAP_FMAC4 soap_get___ns1__AdminGetCountModify_(struct soap *soap, struct __ns1__AdminGetCountModify_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetCountModify_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetCountModify_ * SOAP_FMAC2 soap_instantiate___ns1__AdminGetCountModify_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetCountModify_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetCountModify_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetCountModify_);
		if (size)
			*size = sizeof(struct __ns1__AdminGetCountModify_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetCountModify_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetCountModify_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetCountModify_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetCountModify_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetCountModify_ %p -> %p\n", q, p));
	*(struct __ns1__AdminGetCountModify_*)p = *(struct __ns1__AdminGetCountModify_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetCountLyric_(struct soap *soap, struct __ns1__AdminGetCountLyric_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetCountLyric = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetCountLyric_(struct soap *soap, const struct __ns1__AdminGetCountLyric_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetCountLyric(soap, &a->ns1__AdminGetCountLyric);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetCountLyric_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetCountLyric_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetCountLyric(soap, "ns1:AdminGetCountLyric", -1, &a->ns1__AdminGetCountLyric, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountLyric_ * SOAP_FMAC4 soap_in___ns1__AdminGetCountLyric_(struct soap *soap, const char *tag, struct __ns1__AdminGetCountLyric_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetCountLyric = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetCountLyric_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetCountLyric_, sizeof(struct __ns1__AdminGetCountLyric_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetCountLyric_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetCountLyric && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetCountLyric(soap, "ns1:AdminGetCountLyric", &a->ns1__AdminGetCountLyric, ""))
				{	soap_flag_ns1__AdminGetCountLyric--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetCountLyric_(struct soap *soap, const struct __ns1__AdminGetCountLyric_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetCountLyric_(soap, tag?tag:"-ns1:AdminGetCountLyric", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountLyric_ * SOAP_FMAC4 soap_get___ns1__AdminGetCountLyric_(struct soap *soap, struct __ns1__AdminGetCountLyric_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetCountLyric_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetCountLyric_ * SOAP_FMAC2 soap_instantiate___ns1__AdminGetCountLyric_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetCountLyric_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetCountLyric_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetCountLyric_);
		if (size)
			*size = sizeof(struct __ns1__AdminGetCountLyric_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetCountLyric_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetCountLyric_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetCountLyric_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetCountLyric_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetCountLyric_ %p -> %p\n", q, p));
	*(struct __ns1__AdminGetCountLyric_*)p = *(struct __ns1__AdminGetCountLyric_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetCountChecksum_(struct soap *soap, struct __ns1__AdminGetCountChecksum_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetCountChecksum = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetCountChecksum_(struct soap *soap, const struct __ns1__AdminGetCountChecksum_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetCountChecksum(soap, &a->ns1__AdminGetCountChecksum);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetCountChecksum_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetCountChecksum_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetCountChecksum(soap, "ns1:AdminGetCountChecksum", -1, &a->ns1__AdminGetCountChecksum, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountChecksum_ * SOAP_FMAC4 soap_in___ns1__AdminGetCountChecksum_(struct soap *soap, const char *tag, struct __ns1__AdminGetCountChecksum_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetCountChecksum = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetCountChecksum_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetCountChecksum_, sizeof(struct __ns1__AdminGetCountChecksum_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetCountChecksum_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetCountChecksum && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetCountChecksum(soap, "ns1:AdminGetCountChecksum", &a->ns1__AdminGetCountChecksum, ""))
				{	soap_flag_ns1__AdminGetCountChecksum--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetCountChecksum_(struct soap *soap, const struct __ns1__AdminGetCountChecksum_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetCountChecksum_(soap, tag?tag:"-ns1:AdminGetCountChecksum", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountChecksum_ * SOAP_FMAC4 soap_get___ns1__AdminGetCountChecksum_(struct soap *soap, struct __ns1__AdminGetCountChecksum_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetCountChecksum_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetCountChecksum_ * SOAP_FMAC2 soap_instantiate___ns1__AdminGetCountChecksum_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetCountChecksum_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetCountChecksum_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetCountChecksum_);
		if (size)
			*size = sizeof(struct __ns1__AdminGetCountChecksum_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetCountChecksum_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetCountChecksum_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetCountChecksum_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetCountChecksum_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetCountChecksum_ %p -> %p\n", q, p));
	*(struct __ns1__AdminGetCountChecksum_*)p = *(struct __ns1__AdminGetCountChecksum_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetCountInRegister_(struct soap *soap, struct __ns1__AdminGetCountInRegister_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetCountInRegister = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetCountInRegister_(struct soap *soap, const struct __ns1__AdminGetCountInRegister_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetCountInRegister(soap, &a->ns1__AdminGetCountInRegister);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetCountInRegister_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetCountInRegister_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetCountInRegister(soap, "ns1:AdminGetCountInRegister", -1, &a->ns1__AdminGetCountInRegister, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountInRegister_ * SOAP_FMAC4 soap_in___ns1__AdminGetCountInRegister_(struct soap *soap, const char *tag, struct __ns1__AdminGetCountInRegister_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetCountInRegister = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetCountInRegister_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetCountInRegister_, sizeof(struct __ns1__AdminGetCountInRegister_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetCountInRegister_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetCountInRegister && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetCountInRegister(soap, "ns1:AdminGetCountInRegister", &a->ns1__AdminGetCountInRegister, ""))
				{	soap_flag_ns1__AdminGetCountInRegister--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetCountInRegister_(struct soap *soap, const struct __ns1__AdminGetCountInRegister_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetCountInRegister_(soap, tag?tag:"-ns1:AdminGetCountInRegister", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountInRegister_ * SOAP_FMAC4 soap_get___ns1__AdminGetCountInRegister_(struct soap *soap, struct __ns1__AdminGetCountInRegister_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetCountInRegister_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetCountInRegister_ * SOAP_FMAC2 soap_instantiate___ns1__AdminGetCountInRegister_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetCountInRegister_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetCountInRegister_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetCountInRegister_);
		if (size)
			*size = sizeof(struct __ns1__AdminGetCountInRegister_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetCountInRegister_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetCountInRegister_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetCountInRegister_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetCountInRegister_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetCountInRegister_ %p -> %p\n", q, p));
	*(struct __ns1__AdminGetCountInRegister_*)p = *(struct __ns1__AdminGetCountInRegister_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminReportBlackList_(struct soap *soap, struct __ns1__AdminReportBlackList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminReportBlackList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminReportBlackList_(struct soap *soap, const struct __ns1__AdminReportBlackList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminReportBlackList(soap, &a->ns1__AdminReportBlackList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminReportBlackList_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminReportBlackList_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminReportBlackList(soap, "ns1:AdminReportBlackList", -1, &a->ns1__AdminReportBlackList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminReportBlackList_ * SOAP_FMAC4 soap_in___ns1__AdminReportBlackList_(struct soap *soap, const char *tag, struct __ns1__AdminReportBlackList_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminReportBlackList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminReportBlackList_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminReportBlackList_, sizeof(struct __ns1__AdminReportBlackList_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminReportBlackList_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminReportBlackList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminReportBlackList(soap, "ns1:AdminReportBlackList", &a->ns1__AdminReportBlackList, ""))
				{	soap_flag_ns1__AdminReportBlackList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminReportBlackList_(struct soap *soap, const struct __ns1__AdminReportBlackList_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminReportBlackList_(soap, tag?tag:"-ns1:AdminReportBlackList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminReportBlackList_ * SOAP_FMAC4 soap_get___ns1__AdminReportBlackList_(struct soap *soap, struct __ns1__AdminReportBlackList_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminReportBlackList_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminReportBlackList_ * SOAP_FMAC2 soap_instantiate___ns1__AdminReportBlackList_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminReportBlackList_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminReportBlackList_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminReportBlackList_);
		if (size)
			*size = sizeof(struct __ns1__AdminReportBlackList_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminReportBlackList_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminReportBlackList_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminReportBlackList_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminReportBlackList_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminReportBlackList_ %p -> %p\n", q, p));
	*(struct __ns1__AdminReportBlackList_*)p = *(struct __ns1__AdminReportBlackList_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminAdmitModifyLyric_(struct soap *soap, struct __ns1__AdminAdmitModifyLyric_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminAdmitModifyLyric = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminAdmitModifyLyric_(struct soap *soap, const struct __ns1__AdminAdmitModifyLyric_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminAdmitModifyLyric(soap, &a->ns1__AdminAdmitModifyLyric);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminAdmitModifyLyric_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminAdmitModifyLyric_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminAdmitModifyLyric(soap, "ns1:AdminAdmitModifyLyric", -1, &a->ns1__AdminAdmitModifyLyric, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminAdmitModifyLyric_ * SOAP_FMAC4 soap_in___ns1__AdminAdmitModifyLyric_(struct soap *soap, const char *tag, struct __ns1__AdminAdmitModifyLyric_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminAdmitModifyLyric = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminAdmitModifyLyric_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminAdmitModifyLyric_, sizeof(struct __ns1__AdminAdmitModifyLyric_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminAdmitModifyLyric_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminAdmitModifyLyric && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminAdmitModifyLyric(soap, "ns1:AdminAdmitModifyLyric", &a->ns1__AdminAdmitModifyLyric, ""))
				{	soap_flag_ns1__AdminAdmitModifyLyric--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminAdmitModifyLyric_(struct soap *soap, const struct __ns1__AdminAdmitModifyLyric_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminAdmitModifyLyric_(soap, tag?tag:"-ns1:AdminAdmitModifyLyric", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminAdmitModifyLyric_ * SOAP_FMAC4 soap_get___ns1__AdminAdmitModifyLyric_(struct soap *soap, struct __ns1__AdminAdmitModifyLyric_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminAdmitModifyLyric_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminAdmitModifyLyric_ * SOAP_FMAC2 soap_instantiate___ns1__AdminAdmitModifyLyric_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminAdmitModifyLyric_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminAdmitModifyLyric_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminAdmitModifyLyric_);
		if (size)
			*size = sizeof(struct __ns1__AdminAdmitModifyLyric_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminAdmitModifyLyric_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminAdmitModifyLyric_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminAdmitModifyLyric_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminAdmitModifyLyric_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminAdmitModifyLyric_ %p -> %p\n", q, p));
	*(struct __ns1__AdminAdmitModifyLyric_*)p = *(struct __ns1__AdminAdmitModifyLyric_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminDeleteRecord_(struct soap *soap, struct __ns1__AdminDeleteRecord_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminDeleteRecord = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminDeleteRecord_(struct soap *soap, const struct __ns1__AdminDeleteRecord_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminDeleteRecord(soap, &a->ns1__AdminDeleteRecord);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminDeleteRecord_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminDeleteRecord_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminDeleteRecord(soap, "ns1:AdminDeleteRecord", -1, &a->ns1__AdminDeleteRecord, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminDeleteRecord_ * SOAP_FMAC4 soap_in___ns1__AdminDeleteRecord_(struct soap *soap, const char *tag, struct __ns1__AdminDeleteRecord_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminDeleteRecord = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminDeleteRecord_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminDeleteRecord_, sizeof(struct __ns1__AdminDeleteRecord_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminDeleteRecord_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminDeleteRecord && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminDeleteRecord(soap, "ns1:AdminDeleteRecord", &a->ns1__AdminDeleteRecord, ""))
				{	soap_flag_ns1__AdminDeleteRecord--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminDeleteRecord_(struct soap *soap, const struct __ns1__AdminDeleteRecord_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminDeleteRecord_(soap, tag?tag:"-ns1:AdminDeleteRecord", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminDeleteRecord_ * SOAP_FMAC4 soap_get___ns1__AdminDeleteRecord_(struct soap *soap, struct __ns1__AdminDeleteRecord_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminDeleteRecord_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminDeleteRecord_ * SOAP_FMAC2 soap_instantiate___ns1__AdminDeleteRecord_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminDeleteRecord_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminDeleteRecord_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminDeleteRecord_);
		if (size)
			*size = sizeof(struct __ns1__AdminDeleteRecord_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminDeleteRecord_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminDeleteRecord_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminDeleteRecord_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminDeleteRecord_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminDeleteRecord_ %p -> %p\n", q, p));
	*(struct __ns1__AdminDeleteRecord_*)p = *(struct __ns1__AdminDeleteRecord_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MemberGetMemberLicenseList_(struct soap *soap, struct __ns1__MemberGetMemberLicenseList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MemberGetMemberLicenseList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MemberGetMemberLicenseList_(struct soap *soap, const struct __ns1__MemberGetMemberLicenseList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MemberGetMemberLicenseList(soap, &a->ns1__MemberGetMemberLicenseList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MemberGetMemberLicenseList_(struct soap *soap, const char *tag, int id, const struct __ns1__MemberGetMemberLicenseList_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MemberGetMemberLicenseList(soap, "ns1:MemberGetMemberLicenseList", -1, &a->ns1__MemberGetMemberLicenseList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberGetMemberLicenseList_ * SOAP_FMAC4 soap_in___ns1__MemberGetMemberLicenseList_(struct soap *soap, const char *tag, struct __ns1__MemberGetMemberLicenseList_ *a, const char *type)
{
	size_t soap_flag_ns1__MemberGetMemberLicenseList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MemberGetMemberLicenseList_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MemberGetMemberLicenseList_, sizeof(struct __ns1__MemberGetMemberLicenseList_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MemberGetMemberLicenseList_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MemberGetMemberLicenseList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MemberGetMemberLicenseList(soap, "ns1:MemberGetMemberLicenseList", &a->ns1__MemberGetMemberLicenseList, ""))
				{	soap_flag_ns1__MemberGetMemberLicenseList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MemberGetMemberLicenseList_(struct soap *soap, const struct __ns1__MemberGetMemberLicenseList_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MemberGetMemberLicenseList_(soap, tag?tag:"-ns1:MemberGetMemberLicenseList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberGetMemberLicenseList_ * SOAP_FMAC4 soap_get___ns1__MemberGetMemberLicenseList_(struct soap *soap, struct __ns1__MemberGetMemberLicenseList_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MemberGetMemberLicenseList_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MemberGetMemberLicenseList_ * SOAP_FMAC2 soap_instantiate___ns1__MemberGetMemberLicenseList_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MemberGetMemberLicenseList_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MemberGetMemberLicenseList_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MemberGetMemberLicenseList_);
		if (size)
			*size = sizeof(struct __ns1__MemberGetMemberLicenseList_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MemberGetMemberLicenseList_, n);
		if (size)
			*size = n * sizeof(struct __ns1__MemberGetMemberLicenseList_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MemberGetMemberLicenseList_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MemberGetMemberLicenseList_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MemberGetMemberLicenseList_ %p -> %p\n", q, p));
	*(struct __ns1__MemberGetMemberLicenseList_*)p = *(struct __ns1__MemberGetMemberLicenseList_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MemberGetMemberList_(struct soap *soap, struct __ns1__MemberGetMemberList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MemberGetMemberList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MemberGetMemberList_(struct soap *soap, const struct __ns1__MemberGetMemberList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MemberGetMemberList(soap, &a->ns1__MemberGetMemberList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MemberGetMemberList_(struct soap *soap, const char *tag, int id, const struct __ns1__MemberGetMemberList_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MemberGetMemberList(soap, "ns1:MemberGetMemberList", -1, &a->ns1__MemberGetMemberList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberGetMemberList_ * SOAP_FMAC4 soap_in___ns1__MemberGetMemberList_(struct soap *soap, const char *tag, struct __ns1__MemberGetMemberList_ *a, const char *type)
{
	size_t soap_flag_ns1__MemberGetMemberList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MemberGetMemberList_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MemberGetMemberList_, sizeof(struct __ns1__MemberGetMemberList_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MemberGetMemberList_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MemberGetMemberList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MemberGetMemberList(soap, "ns1:MemberGetMemberList", &a->ns1__MemberGetMemberList, ""))
				{	soap_flag_ns1__MemberGetMemberList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MemberGetMemberList_(struct soap *soap, const struct __ns1__MemberGetMemberList_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MemberGetMemberList_(soap, tag?tag:"-ns1:MemberGetMemberList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberGetMemberList_ * SOAP_FMAC4 soap_get___ns1__MemberGetMemberList_(struct soap *soap, struct __ns1__MemberGetMemberList_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MemberGetMemberList_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MemberGetMemberList_ * SOAP_FMAC2 soap_instantiate___ns1__MemberGetMemberList_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MemberGetMemberList_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MemberGetMemberList_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MemberGetMemberList_);
		if (size)
			*size = sizeof(struct __ns1__MemberGetMemberList_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MemberGetMemberList_, n);
		if (size)
			*size = n * sizeof(struct __ns1__MemberGetMemberList_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MemberGetMemberList_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MemberGetMemberList_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MemberGetMemberList_ %p -> %p\n", q, p));
	*(struct __ns1__MemberGetMemberList_*)p = *(struct __ns1__MemberGetMemberList_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MemberModifyMemberLicense_(struct soap *soap, struct __ns1__MemberModifyMemberLicense_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MemberModifyMemberLicense = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MemberModifyMemberLicense_(struct soap *soap, const struct __ns1__MemberModifyMemberLicense_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MemberModifyMemberLicense(soap, &a->ns1__MemberModifyMemberLicense);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MemberModifyMemberLicense_(struct soap *soap, const char *tag, int id, const struct __ns1__MemberModifyMemberLicense_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MemberModifyMemberLicense(soap, "ns1:MemberModifyMemberLicense", -1, &a->ns1__MemberModifyMemberLicense, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberModifyMemberLicense_ * SOAP_FMAC4 soap_in___ns1__MemberModifyMemberLicense_(struct soap *soap, const char *tag, struct __ns1__MemberModifyMemberLicense_ *a, const char *type)
{
	size_t soap_flag_ns1__MemberModifyMemberLicense = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MemberModifyMemberLicense_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MemberModifyMemberLicense_, sizeof(struct __ns1__MemberModifyMemberLicense_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MemberModifyMemberLicense_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MemberModifyMemberLicense && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MemberModifyMemberLicense(soap, "ns1:MemberModifyMemberLicense", &a->ns1__MemberModifyMemberLicense, ""))
				{	soap_flag_ns1__MemberModifyMemberLicense--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MemberModifyMemberLicense_(struct soap *soap, const struct __ns1__MemberModifyMemberLicense_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MemberModifyMemberLicense_(soap, tag?tag:"-ns1:MemberModifyMemberLicense", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberModifyMemberLicense_ * SOAP_FMAC4 soap_get___ns1__MemberModifyMemberLicense_(struct soap *soap, struct __ns1__MemberModifyMemberLicense_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MemberModifyMemberLicense_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MemberModifyMemberLicense_ * SOAP_FMAC2 soap_instantiate___ns1__MemberModifyMemberLicense_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MemberModifyMemberLicense_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MemberModifyMemberLicense_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MemberModifyMemberLicense_);
		if (size)
			*size = sizeof(struct __ns1__MemberModifyMemberLicense_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MemberModifyMemberLicense_, n);
		if (size)
			*size = n * sizeof(struct __ns1__MemberModifyMemberLicense_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MemberModifyMemberLicense_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MemberModifyMemberLicense_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MemberModifyMemberLicense_ %p -> %p\n", q, p));
	*(struct __ns1__MemberModifyMemberLicense_*)p = *(struct __ns1__MemberModifyMemberLicense_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MemberApplyRegistration_(struct soap *soap, struct __ns1__MemberApplyRegistration_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MemberApplyRegistration = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MemberApplyRegistration_(struct soap *soap, const struct __ns1__MemberApplyRegistration_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MemberApplyRegistration(soap, &a->ns1__MemberApplyRegistration);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MemberApplyRegistration_(struct soap *soap, const char *tag, int id, const struct __ns1__MemberApplyRegistration_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MemberApplyRegistration(soap, "ns1:MemberApplyRegistration", -1, &a->ns1__MemberApplyRegistration, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberApplyRegistration_ * SOAP_FMAC4 soap_in___ns1__MemberApplyRegistration_(struct soap *soap, const char *tag, struct __ns1__MemberApplyRegistration_ *a, const char *type)
{
	size_t soap_flag_ns1__MemberApplyRegistration = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MemberApplyRegistration_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MemberApplyRegistration_, sizeof(struct __ns1__MemberApplyRegistration_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MemberApplyRegistration_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MemberApplyRegistration && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MemberApplyRegistration(soap, "ns1:MemberApplyRegistration", &a->ns1__MemberApplyRegistration, ""))
				{	soap_flag_ns1__MemberApplyRegistration--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MemberApplyRegistration_(struct soap *soap, const struct __ns1__MemberApplyRegistration_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MemberApplyRegistration_(soap, tag?tag:"-ns1:MemberApplyRegistration", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberApplyRegistration_ * SOAP_FMAC4 soap_get___ns1__MemberApplyRegistration_(struct soap *soap, struct __ns1__MemberApplyRegistration_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MemberApplyRegistration_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MemberApplyRegistration_ * SOAP_FMAC2 soap_instantiate___ns1__MemberApplyRegistration_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MemberApplyRegistration_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MemberApplyRegistration_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MemberApplyRegistration_);
		if (size)
			*size = sizeof(struct __ns1__MemberApplyRegistration_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MemberApplyRegistration_, n);
		if (size)
			*size = n * sizeof(struct __ns1__MemberApplyRegistration_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MemberApplyRegistration_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MemberApplyRegistration_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MemberApplyRegistration_ %p -> %p\n", q, p));
	*(struct __ns1__MemberApplyRegistration_*)p = *(struct __ns1__MemberApplyRegistration_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MemberLogout_(struct soap *soap, struct __ns1__MemberLogout_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MemberLogout = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MemberLogout_(struct soap *soap, const struct __ns1__MemberLogout_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MemberLogout(soap, &a->ns1__MemberLogout);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MemberLogout_(struct soap *soap, const char *tag, int id, const struct __ns1__MemberLogout_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MemberLogout(soap, "ns1:MemberLogout", -1, &a->ns1__MemberLogout, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberLogout_ * SOAP_FMAC4 soap_in___ns1__MemberLogout_(struct soap *soap, const char *tag, struct __ns1__MemberLogout_ *a, const char *type)
{
	size_t soap_flag_ns1__MemberLogout = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MemberLogout_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MemberLogout_, sizeof(struct __ns1__MemberLogout_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MemberLogout_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MemberLogout && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MemberLogout(soap, "ns1:MemberLogout", &a->ns1__MemberLogout, ""))
				{	soap_flag_ns1__MemberLogout--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MemberLogout_(struct soap *soap, const struct __ns1__MemberLogout_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MemberLogout_(soap, tag?tag:"-ns1:MemberLogout", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberLogout_ * SOAP_FMAC4 soap_get___ns1__MemberLogout_(struct soap *soap, struct __ns1__MemberLogout_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MemberLogout_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MemberLogout_ * SOAP_FMAC2 soap_instantiate___ns1__MemberLogout_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MemberLogout_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MemberLogout_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MemberLogout_);
		if (size)
			*size = sizeof(struct __ns1__MemberLogout_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MemberLogout_, n);
		if (size)
			*size = n * sizeof(struct __ns1__MemberLogout_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MemberLogout_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MemberLogout_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MemberLogout_ %p -> %p\n", q, p));
	*(struct __ns1__MemberLogout_*)p = *(struct __ns1__MemberLogout_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MemberLogin_(struct soap *soap, struct __ns1__MemberLogin_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MemberLogin = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MemberLogin_(struct soap *soap, const struct __ns1__MemberLogin_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MemberLogin(soap, &a->ns1__MemberLogin);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MemberLogin_(struct soap *soap, const char *tag, int id, const struct __ns1__MemberLogin_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MemberLogin(soap, "ns1:MemberLogin", -1, &a->ns1__MemberLogin, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberLogin_ * SOAP_FMAC4 soap_in___ns1__MemberLogin_(struct soap *soap, const char *tag, struct __ns1__MemberLogin_ *a, const char *type)
{
	size_t soap_flag_ns1__MemberLogin = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MemberLogin_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MemberLogin_, sizeof(struct __ns1__MemberLogin_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MemberLogin_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MemberLogin && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MemberLogin(soap, "ns1:MemberLogin", &a->ns1__MemberLogin, ""))
				{	soap_flag_ns1__MemberLogin--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MemberLogin_(struct soap *soap, const struct __ns1__MemberLogin_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MemberLogin_(soap, tag?tag:"-ns1:MemberLogin", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberLogin_ * SOAP_FMAC4 soap_get___ns1__MemberLogin_(struct soap *soap, struct __ns1__MemberLogin_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MemberLogin_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MemberLogin_ * SOAP_FMAC2 soap_instantiate___ns1__MemberLogin_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MemberLogin_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MemberLogin_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MemberLogin_);
		if (size)
			*size = sizeof(struct __ns1__MemberLogin_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MemberLogin_, n);
		if (size)
			*size = n * sizeof(struct __ns1__MemberLogin_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MemberLogin_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MemberLogin_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MemberLogin_ %p -> %p\n", q, p));
	*(struct __ns1__MemberLogin_*)p = *(struct __ns1__MemberLogin_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MemberRemoveMember_(struct soap *soap, struct __ns1__MemberRemoveMember_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MemberRemoveMember = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MemberRemoveMember_(struct soap *soap, const struct __ns1__MemberRemoveMember_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MemberRemoveMember(soap, &a->ns1__MemberRemoveMember);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MemberRemoveMember_(struct soap *soap, const char *tag, int id, const struct __ns1__MemberRemoveMember_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MemberRemoveMember(soap, "ns1:MemberRemoveMember", -1, &a->ns1__MemberRemoveMember, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberRemoveMember_ * SOAP_FMAC4 soap_in___ns1__MemberRemoveMember_(struct soap *soap, const char *tag, struct __ns1__MemberRemoveMember_ *a, const char *type)
{
	size_t soap_flag_ns1__MemberRemoveMember = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MemberRemoveMember_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MemberRemoveMember_, sizeof(struct __ns1__MemberRemoveMember_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MemberRemoveMember_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MemberRemoveMember && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MemberRemoveMember(soap, "ns1:MemberRemoveMember", &a->ns1__MemberRemoveMember, ""))
				{	soap_flag_ns1__MemberRemoveMember--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MemberRemoveMember_(struct soap *soap, const struct __ns1__MemberRemoveMember_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MemberRemoveMember_(soap, tag?tag:"-ns1:MemberRemoveMember", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberRemoveMember_ * SOAP_FMAC4 soap_get___ns1__MemberRemoveMember_(struct soap *soap, struct __ns1__MemberRemoveMember_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MemberRemoveMember_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MemberRemoveMember_ * SOAP_FMAC2 soap_instantiate___ns1__MemberRemoveMember_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MemberRemoveMember_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MemberRemoveMember_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MemberRemoveMember_);
		if (size)
			*size = sizeof(struct __ns1__MemberRemoveMember_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MemberRemoveMember_, n);
		if (size)
			*size = n * sizeof(struct __ns1__MemberRemoveMember_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MemberRemoveMember_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MemberRemoveMember_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MemberRemoveMember_ %p -> %p\n", q, p));
	*(struct __ns1__MemberRemoveMember_*)p = *(struct __ns1__MemberRemoveMember_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MemberModifyMember_(struct soap *soap, struct __ns1__MemberModifyMember_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MemberModifyMember = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MemberModifyMember_(struct soap *soap, const struct __ns1__MemberModifyMember_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MemberModifyMember(soap, &a->ns1__MemberModifyMember);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MemberModifyMember_(struct soap *soap, const char *tag, int id, const struct __ns1__MemberModifyMember_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MemberModifyMember(soap, "ns1:MemberModifyMember", -1, &a->ns1__MemberModifyMember, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberModifyMember_ * SOAP_FMAC4 soap_in___ns1__MemberModifyMember_(struct soap *soap, const char *tag, struct __ns1__MemberModifyMember_ *a, const char *type)
{
	size_t soap_flag_ns1__MemberModifyMember = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MemberModifyMember_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MemberModifyMember_, sizeof(struct __ns1__MemberModifyMember_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MemberModifyMember_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MemberModifyMember && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MemberModifyMember(soap, "ns1:MemberModifyMember", &a->ns1__MemberModifyMember, ""))
				{	soap_flag_ns1__MemberModifyMember--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MemberModifyMember_(struct soap *soap, const struct __ns1__MemberModifyMember_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MemberModifyMember_(soap, tag?tag:"-ns1:MemberModifyMember", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberModifyMember_ * SOAP_FMAC4 soap_get___ns1__MemberModifyMember_(struct soap *soap, struct __ns1__MemberModifyMember_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MemberModifyMember_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MemberModifyMember_ * SOAP_FMAC2 soap_instantiate___ns1__MemberModifyMember_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MemberModifyMember_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MemberModifyMember_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MemberModifyMember_);
		if (size)
			*size = sizeof(struct __ns1__MemberModifyMember_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MemberModifyMember_, n);
		if (size)
			*size = n * sizeof(struct __ns1__MemberModifyMember_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MemberModifyMember_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MemberModifyMember_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MemberModifyMember_ %p -> %p\n", q, p));
	*(struct __ns1__MemberModifyMember_*)p = *(struct __ns1__MemberModifyMember_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MemberAddMember_(struct soap *soap, struct __ns1__MemberAddMember_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MemberAddMember = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MemberAddMember_(struct soap *soap, const struct __ns1__MemberAddMember_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MemberAddMember(soap, &a->ns1__MemberAddMember);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MemberAddMember_(struct soap *soap, const char *tag, int id, const struct __ns1__MemberAddMember_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MemberAddMember(soap, "ns1:MemberAddMember", -1, &a->ns1__MemberAddMember, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberAddMember_ * SOAP_FMAC4 soap_in___ns1__MemberAddMember_(struct soap *soap, const char *tag, struct __ns1__MemberAddMember_ *a, const char *type)
{
	size_t soap_flag_ns1__MemberAddMember = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MemberAddMember_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MemberAddMember_, sizeof(struct __ns1__MemberAddMember_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MemberAddMember_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MemberAddMember && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MemberAddMember(soap, "ns1:MemberAddMember", &a->ns1__MemberAddMember, ""))
				{	soap_flag_ns1__MemberAddMember--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MemberAddMember_(struct soap *soap, const struct __ns1__MemberAddMember_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MemberAddMember_(soap, tag?tag:"-ns1:MemberAddMember", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberAddMember_ * SOAP_FMAC4 soap_get___ns1__MemberAddMember_(struct soap *soap, struct __ns1__MemberAddMember_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MemberAddMember_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MemberAddMember_ * SOAP_FMAC2 soap_instantiate___ns1__MemberAddMember_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MemberAddMember_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MemberAddMember_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MemberAddMember_);
		if (size)
			*size = sizeof(struct __ns1__MemberAddMember_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MemberAddMember_, n);
		if (size)
			*size = n * sizeof(struct __ns1__MemberAddMember_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MemberAddMember_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MemberAddMember_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MemberAddMember_ %p -> %p\n", q, p));
	*(struct __ns1__MemberAddMember_*)p = *(struct __ns1__MemberAddMember_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetRegisterList_(struct soap *soap, struct __ns1__AdminGetRegisterList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetRegisterList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetRegisterList_(struct soap *soap, const struct __ns1__AdminGetRegisterList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetRegisterList(soap, &a->ns1__AdminGetRegisterList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetRegisterList_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetRegisterList_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetRegisterList(soap, "ns1:AdminGetRegisterList", -1, &a->ns1__AdminGetRegisterList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetRegisterList_ * SOAP_FMAC4 soap_in___ns1__AdminGetRegisterList_(struct soap *soap, const char *tag, struct __ns1__AdminGetRegisterList_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetRegisterList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetRegisterList_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetRegisterList_, sizeof(struct __ns1__AdminGetRegisterList_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetRegisterList_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetRegisterList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetRegisterList(soap, "ns1:AdminGetRegisterList", &a->ns1__AdminGetRegisterList, ""))
				{	soap_flag_ns1__AdminGetRegisterList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetRegisterList_(struct soap *soap, const struct __ns1__AdminGetRegisterList_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetRegisterList_(soap, tag?tag:"-ns1:AdminGetRegisterList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetRegisterList_ * SOAP_FMAC4 soap_get___ns1__AdminGetRegisterList_(struct soap *soap, struct __ns1__AdminGetRegisterList_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetRegisterList_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetRegisterList_ * SOAP_FMAC2 soap_instantiate___ns1__AdminGetRegisterList_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetRegisterList_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetRegisterList_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetRegisterList_);
		if (size)
			*size = sizeof(struct __ns1__AdminGetRegisterList_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetRegisterList_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetRegisterList_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetRegisterList_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetRegisterList_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetRegisterList_ %p -> %p\n", q, p));
	*(struct __ns1__AdminGetRegisterList_*)p = *(struct __ns1__AdminGetRegisterList_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetModifyList_(struct soap *soap, struct __ns1__AdminGetModifyList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetModifyList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetModifyList_(struct soap *soap, const struct __ns1__AdminGetModifyList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetModifyList(soap, &a->ns1__AdminGetModifyList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetModifyList_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetModifyList_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetModifyList(soap, "ns1:AdminGetModifyList", -1, &a->ns1__AdminGetModifyList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetModifyList_ * SOAP_FMAC4 soap_in___ns1__AdminGetModifyList_(struct soap *soap, const char *tag, struct __ns1__AdminGetModifyList_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetModifyList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetModifyList_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetModifyList_, sizeof(struct __ns1__AdminGetModifyList_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetModifyList_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetModifyList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetModifyList(soap, "ns1:AdminGetModifyList", &a->ns1__AdminGetModifyList, ""))
				{	soap_flag_ns1__AdminGetModifyList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetModifyList_(struct soap *soap, const struct __ns1__AdminGetModifyList_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetModifyList_(soap, tag?tag:"-ns1:AdminGetModifyList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetModifyList_ * SOAP_FMAC4 soap_get___ns1__AdminGetModifyList_(struct soap *soap, struct __ns1__AdminGetModifyList_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetModifyList_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetModifyList_ * SOAP_FMAC2 soap_instantiate___ns1__AdminGetModifyList_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetModifyList_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetModifyList_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetModifyList_);
		if (size)
			*size = sizeof(struct __ns1__AdminGetModifyList_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetModifyList_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetModifyList_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetModifyList_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetModifyList_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetModifyList_ %p -> %p\n", q, p));
	*(struct __ns1__AdminGetModifyList_*)p = *(struct __ns1__AdminGetModifyList_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetReportFaultList_(struct soap *soap, struct __ns1__AdminGetReportFaultList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetReportFaultList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetReportFaultList_(struct soap *soap, const struct __ns1__AdminGetReportFaultList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetReportFaultList(soap, &a->ns1__AdminGetReportFaultList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetReportFaultList_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetReportFaultList_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetReportFaultList(soap, "ns1:AdminGetReportFaultList", -1, &a->ns1__AdminGetReportFaultList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetReportFaultList_ * SOAP_FMAC4 soap_in___ns1__AdminGetReportFaultList_(struct soap *soap, const char *tag, struct __ns1__AdminGetReportFaultList_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetReportFaultList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetReportFaultList_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetReportFaultList_, sizeof(struct __ns1__AdminGetReportFaultList_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetReportFaultList_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetReportFaultList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetReportFaultList(soap, "ns1:AdminGetReportFaultList", &a->ns1__AdminGetReportFaultList, ""))
				{	soap_flag_ns1__AdminGetReportFaultList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetReportFaultList_(struct soap *soap, const struct __ns1__AdminGetReportFaultList_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetReportFaultList_(soap, tag?tag:"-ns1:AdminGetReportFaultList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetReportFaultList_ * SOAP_FMAC4 soap_get___ns1__AdminGetReportFaultList_(struct soap *soap, struct __ns1__AdminGetReportFaultList_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetReportFaultList_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetReportFaultList_ * SOAP_FMAC2 soap_instantiate___ns1__AdminGetReportFaultList_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetReportFaultList_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetReportFaultList_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetReportFaultList_);
		if (size)
			*size = sizeof(struct __ns1__AdminGetReportFaultList_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetReportFaultList_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetReportFaultList_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetReportFaultList_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetReportFaultList_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetReportFaultList_ %p -> %p\n", q, p));
	*(struct __ns1__AdminGetReportFaultList_*)p = *(struct __ns1__AdminGetReportFaultList_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetLyricListByID_(struct soap *soap, struct __ns1__AdminGetLyricListByID_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetLyricListByID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetLyricListByID_(struct soap *soap, const struct __ns1__AdminGetLyricListByID_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetLyricListByID(soap, &a->ns1__AdminGetLyricListByID);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetLyricListByID_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetLyricListByID_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetLyricListByID(soap, "ns1:AdminGetLyricListByID", -1, &a->ns1__AdminGetLyricListByID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetLyricListByID_ * SOAP_FMAC4 soap_in___ns1__AdminGetLyricListByID_(struct soap *soap, const char *tag, struct __ns1__AdminGetLyricListByID_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetLyricListByID = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetLyricListByID_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetLyricListByID_, sizeof(struct __ns1__AdminGetLyricListByID_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetLyricListByID_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetLyricListByID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetLyricListByID(soap, "ns1:AdminGetLyricListByID", &a->ns1__AdminGetLyricListByID, ""))
				{	soap_flag_ns1__AdminGetLyricListByID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetLyricListByID_(struct soap *soap, const struct __ns1__AdminGetLyricListByID_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetLyricListByID_(soap, tag?tag:"-ns1:AdminGetLyricListByID", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetLyricListByID_ * SOAP_FMAC4 soap_get___ns1__AdminGetLyricListByID_(struct soap *soap, struct __ns1__AdminGetLyricListByID_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetLyricListByID_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetLyricListByID_ * SOAP_FMAC2 soap_instantiate___ns1__AdminGetLyricListByID_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetLyricListByID_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetLyricListByID_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetLyricListByID_);
		if (size)
			*size = sizeof(struct __ns1__AdminGetLyricListByID_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetLyricListByID_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetLyricListByID_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetLyricListByID_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetLyricListByID_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetLyricListByID_ %p -> %p\n", q, p));
	*(struct __ns1__AdminGetLyricListByID_*)p = *(struct __ns1__AdminGetLyricListByID_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetLyricList_(struct soap *soap, struct __ns1__AdminGetLyricList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetLyricList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetLyricList_(struct soap *soap, const struct __ns1__AdminGetLyricList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetLyricList(soap, &a->ns1__AdminGetLyricList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetLyricList_(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetLyricList_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetLyricList(soap, "ns1:AdminGetLyricList", -1, &a->ns1__AdminGetLyricList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetLyricList_ * SOAP_FMAC4 soap_in___ns1__AdminGetLyricList_(struct soap *soap, const char *tag, struct __ns1__AdminGetLyricList_ *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetLyricList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetLyricList_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetLyricList_, sizeof(struct __ns1__AdminGetLyricList_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetLyricList_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetLyricList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetLyricList(soap, "ns1:AdminGetLyricList", &a->ns1__AdminGetLyricList, ""))
				{	soap_flag_ns1__AdminGetLyricList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetLyricList_(struct soap *soap, const struct __ns1__AdminGetLyricList_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetLyricList_(soap, tag?tag:"-ns1:AdminGetLyricList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetLyricList_ * SOAP_FMAC4 soap_get___ns1__AdminGetLyricList_(struct soap *soap, struct __ns1__AdminGetLyricList_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetLyricList_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetLyricList_ * SOAP_FMAC2 soap_instantiate___ns1__AdminGetLyricList_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetLyricList_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetLyricList_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetLyricList_);
		if (size)
			*size = sizeof(struct __ns1__AdminGetLyricList_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetLyricList_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetLyricList_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetLyricList_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetLyricList_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetLyricList_ %p -> %p\n", q, p));
	*(struct __ns1__AdminGetLyricList_*)p = *(struct __ns1__AdminGetLyricList_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSongID_(struct soap *soap, struct __ns1__GetSongID_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetSongID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSongID_(struct soap *soap, const struct __ns1__GetSongID_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetSongID(soap, &a->ns1__GetSongID);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSongID_(struct soap *soap, const char *tag, int id, const struct __ns1__GetSongID_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetSongID(soap, "ns1:GetSongID", -1, &a->ns1__GetSongID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetSongID_ * SOAP_FMAC4 soap_in___ns1__GetSongID_(struct soap *soap, const char *tag, struct __ns1__GetSongID_ *a, const char *type)
{
	size_t soap_flag_ns1__GetSongID = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetSongID_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetSongID_, sizeof(struct __ns1__GetSongID_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetSongID_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetSongID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetSongID(soap, "ns1:GetSongID", &a->ns1__GetSongID, ""))
				{	soap_flag_ns1__GetSongID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSongID_(struct soap *soap, const struct __ns1__GetSongID_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetSongID_(soap, tag?tag:"-ns1:GetSongID", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetSongID_ * SOAP_FMAC4 soap_get___ns1__GetSongID_(struct soap *soap, struct __ns1__GetSongID_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetSongID_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetSongID_ * SOAP_FMAC2 soap_instantiate___ns1__GetSongID_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetSongID_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetSongID_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetSongID_);
		if (size)
			*size = sizeof(struct __ns1__GetSongID_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetSongID_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetSongID_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetSongID_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetSongID_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetSongID_ %p -> %p\n", q, p));
	*(struct __ns1__GetSongID_*)p = *(struct __ns1__GetSongID_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLyric8_(struct soap *soap, struct __ns1__GetLyric8_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetLyric8 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLyric8_(struct soap *soap, const struct __ns1__GetLyric8_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetLyric8(soap, &a->ns1__GetLyric8);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLyric8_(struct soap *soap, const char *tag, int id, const struct __ns1__GetLyric8_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetLyric8(soap, "ns1:GetLyric8", -1, &a->ns1__GetLyric8, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric8_ * SOAP_FMAC4 soap_in___ns1__GetLyric8_(struct soap *soap, const char *tag, struct __ns1__GetLyric8_ *a, const char *type)
{
	size_t soap_flag_ns1__GetLyric8 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetLyric8_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLyric8_, sizeof(struct __ns1__GetLyric8_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLyric8_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetLyric8 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetLyric8(soap, "ns1:GetLyric8", &a->ns1__GetLyric8, ""))
				{	soap_flag_ns1__GetLyric8--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLyric8_(struct soap *soap, const struct __ns1__GetLyric8_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLyric8_(soap, tag?tag:"-ns1:GetLyric8", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric8_ * SOAP_FMAC4 soap_get___ns1__GetLyric8_(struct soap *soap, struct __ns1__GetLyric8_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLyric8_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLyric8_ * SOAP_FMAC2 soap_instantiate___ns1__GetLyric8_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLyric8_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLyric8_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLyric8_);
		if (size)
			*size = sizeof(struct __ns1__GetLyric8_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetLyric8_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetLyric8_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetLyric8_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLyric8_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLyric8_ %p -> %p\n", q, p));
	*(struct __ns1__GetLyric8_*)p = *(struct __ns1__GetLyric8_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLyric7_(struct soap *soap, struct __ns1__GetLyric7_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetLyric7 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLyric7_(struct soap *soap, const struct __ns1__GetLyric7_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetLyric7(soap, &a->ns1__GetLyric7);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLyric7_(struct soap *soap, const char *tag, int id, const struct __ns1__GetLyric7_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetLyric7(soap, "ns1:GetLyric7", -1, &a->ns1__GetLyric7, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric7_ * SOAP_FMAC4 soap_in___ns1__GetLyric7_(struct soap *soap, const char *tag, struct __ns1__GetLyric7_ *a, const char *type)
{
	size_t soap_flag_ns1__GetLyric7 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetLyric7_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLyric7_, sizeof(struct __ns1__GetLyric7_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLyric7_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetLyric7 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetLyric7(soap, "ns1:GetLyric7", &a->ns1__GetLyric7, ""))
				{	soap_flag_ns1__GetLyric7--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLyric7_(struct soap *soap, const struct __ns1__GetLyric7_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLyric7_(soap, tag?tag:"-ns1:GetLyric7", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric7_ * SOAP_FMAC4 soap_get___ns1__GetLyric7_(struct soap *soap, struct __ns1__GetLyric7_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLyric7_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLyric7_ * SOAP_FMAC2 soap_instantiate___ns1__GetLyric7_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLyric7_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLyric7_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLyric7_);
		if (size)
			*size = sizeof(struct __ns1__GetLyric7_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetLyric7_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetLyric7_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetLyric7_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLyric7_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLyric7_ %p -> %p\n", q, p));
	*(struct __ns1__GetLyric7_*)p = *(struct __ns1__GetLyric7_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLyric6_(struct soap *soap, struct __ns1__GetLyric6_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetLyric6 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLyric6_(struct soap *soap, const struct __ns1__GetLyric6_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetLyric6(soap, &a->ns1__GetLyric6);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLyric6_(struct soap *soap, const char *tag, int id, const struct __ns1__GetLyric6_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetLyric6(soap, "ns1:GetLyric6", -1, &a->ns1__GetLyric6, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric6_ * SOAP_FMAC4 soap_in___ns1__GetLyric6_(struct soap *soap, const char *tag, struct __ns1__GetLyric6_ *a, const char *type)
{
	size_t soap_flag_ns1__GetLyric6 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetLyric6_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLyric6_, sizeof(struct __ns1__GetLyric6_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLyric6_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetLyric6 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetLyric6(soap, "ns1:GetLyric6", &a->ns1__GetLyric6, ""))
				{	soap_flag_ns1__GetLyric6--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLyric6_(struct soap *soap, const struct __ns1__GetLyric6_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLyric6_(soap, tag?tag:"-ns1:GetLyric6", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric6_ * SOAP_FMAC4 soap_get___ns1__GetLyric6_(struct soap *soap, struct __ns1__GetLyric6_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLyric6_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLyric6_ * SOAP_FMAC2 soap_instantiate___ns1__GetLyric6_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLyric6_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLyric6_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLyric6_);
		if (size)
			*size = sizeof(struct __ns1__GetLyric6_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetLyric6_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetLyric6_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetLyric6_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLyric6_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLyric6_ %p -> %p\n", q, p));
	*(struct __ns1__GetLyric6_*)p = *(struct __ns1__GetLyric6_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLyric5_(struct soap *soap, struct __ns1__GetLyric5_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetLyric5 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLyric5_(struct soap *soap, const struct __ns1__GetLyric5_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetLyric5(soap, &a->ns1__GetLyric5);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLyric5_(struct soap *soap, const char *tag, int id, const struct __ns1__GetLyric5_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetLyric5(soap, "ns1:GetLyric5", -1, &a->ns1__GetLyric5, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric5_ * SOAP_FMAC4 soap_in___ns1__GetLyric5_(struct soap *soap, const char *tag, struct __ns1__GetLyric5_ *a, const char *type)
{
	size_t soap_flag_ns1__GetLyric5 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetLyric5_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLyric5_, sizeof(struct __ns1__GetLyric5_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLyric5_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetLyric5 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetLyric5(soap, "ns1:GetLyric5", &a->ns1__GetLyric5, ""))
				{	soap_flag_ns1__GetLyric5--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLyric5_(struct soap *soap, const struct __ns1__GetLyric5_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLyric5_(soap, tag?tag:"-ns1:GetLyric5", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric5_ * SOAP_FMAC4 soap_get___ns1__GetLyric5_(struct soap *soap, struct __ns1__GetLyric5_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLyric5_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLyric5_ * SOAP_FMAC2 soap_instantiate___ns1__GetLyric5_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLyric5_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLyric5_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLyric5_);
		if (size)
			*size = sizeof(struct __ns1__GetLyric5_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetLyric5_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetLyric5_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetLyric5_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLyric5_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLyric5_ %p -> %p\n", q, p));
	*(struct __ns1__GetLyric5_*)p = *(struct __ns1__GetLyric5_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLyric4_(struct soap *soap, struct __ns1__GetLyric4_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetLyric4 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLyric4_(struct soap *soap, const struct __ns1__GetLyric4_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetLyric4(soap, &a->ns1__GetLyric4);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLyric4_(struct soap *soap, const char *tag, int id, const struct __ns1__GetLyric4_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetLyric4(soap, "ns1:GetLyric4", -1, &a->ns1__GetLyric4, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric4_ * SOAP_FMAC4 soap_in___ns1__GetLyric4_(struct soap *soap, const char *tag, struct __ns1__GetLyric4_ *a, const char *type)
{
	size_t soap_flag_ns1__GetLyric4 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetLyric4_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLyric4_, sizeof(struct __ns1__GetLyric4_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLyric4_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetLyric4 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetLyric4(soap, "ns1:GetLyric4", &a->ns1__GetLyric4, ""))
				{	soap_flag_ns1__GetLyric4--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLyric4_(struct soap *soap, const struct __ns1__GetLyric4_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLyric4_(soap, tag?tag:"-ns1:GetLyric4", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric4_ * SOAP_FMAC4 soap_get___ns1__GetLyric4_(struct soap *soap, struct __ns1__GetLyric4_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLyric4_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLyric4_ * SOAP_FMAC2 soap_instantiate___ns1__GetLyric4_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLyric4_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLyric4_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLyric4_);
		if (size)
			*size = sizeof(struct __ns1__GetLyric4_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetLyric4_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetLyric4_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetLyric4_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLyric4_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLyric4_ %p -> %p\n", q, p));
	*(struct __ns1__GetLyric4_*)p = *(struct __ns1__GetLyric4_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLyric3_(struct soap *soap, struct __ns1__GetLyric3_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetLyric3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLyric3_(struct soap *soap, const struct __ns1__GetLyric3_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetLyric3(soap, &a->ns1__GetLyric3);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLyric3_(struct soap *soap, const char *tag, int id, const struct __ns1__GetLyric3_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetLyric3(soap, "ns1:GetLyric3", -1, &a->ns1__GetLyric3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric3_ * SOAP_FMAC4 soap_in___ns1__GetLyric3_(struct soap *soap, const char *tag, struct __ns1__GetLyric3_ *a, const char *type)
{
	size_t soap_flag_ns1__GetLyric3 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetLyric3_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLyric3_, sizeof(struct __ns1__GetLyric3_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLyric3_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetLyric3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetLyric3(soap, "ns1:GetLyric3", &a->ns1__GetLyric3, ""))
				{	soap_flag_ns1__GetLyric3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLyric3_(struct soap *soap, const struct __ns1__GetLyric3_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLyric3_(soap, tag?tag:"-ns1:GetLyric3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric3_ * SOAP_FMAC4 soap_get___ns1__GetLyric3_(struct soap *soap, struct __ns1__GetLyric3_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLyric3_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLyric3_ * SOAP_FMAC2 soap_instantiate___ns1__GetLyric3_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLyric3_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLyric3_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLyric3_);
		if (size)
			*size = sizeof(struct __ns1__GetLyric3_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetLyric3_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetLyric3_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetLyric3_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLyric3_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLyric3_ %p -> %p\n", q, p));
	*(struct __ns1__GetLyric3_*)p = *(struct __ns1__GetLyric3_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__IsReportedFaultLyric_(struct soap *soap, struct __ns1__IsReportedFaultLyric_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__IsReportedFaultLyric = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__IsReportedFaultLyric_(struct soap *soap, const struct __ns1__IsReportedFaultLyric_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__IsReportedFaultLyric(soap, &a->ns1__IsReportedFaultLyric);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__IsReportedFaultLyric_(struct soap *soap, const char *tag, int id, const struct __ns1__IsReportedFaultLyric_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__IsReportedFaultLyric(soap, "ns1:IsReportedFaultLyric", -1, &a->ns1__IsReportedFaultLyric, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__IsReportedFaultLyric_ * SOAP_FMAC4 soap_in___ns1__IsReportedFaultLyric_(struct soap *soap, const char *tag, struct __ns1__IsReportedFaultLyric_ *a, const char *type)
{
	size_t soap_flag_ns1__IsReportedFaultLyric = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__IsReportedFaultLyric_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__IsReportedFaultLyric_, sizeof(struct __ns1__IsReportedFaultLyric_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__IsReportedFaultLyric_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__IsReportedFaultLyric && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__IsReportedFaultLyric(soap, "ns1:IsReportedFaultLyric", &a->ns1__IsReportedFaultLyric, ""))
				{	soap_flag_ns1__IsReportedFaultLyric--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__IsReportedFaultLyric_(struct soap *soap, const struct __ns1__IsReportedFaultLyric_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__IsReportedFaultLyric_(soap, tag?tag:"-ns1:IsReportedFaultLyric", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__IsReportedFaultLyric_ * SOAP_FMAC4 soap_get___ns1__IsReportedFaultLyric_(struct soap *soap, struct __ns1__IsReportedFaultLyric_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__IsReportedFaultLyric_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__IsReportedFaultLyric_ * SOAP_FMAC2 soap_instantiate___ns1__IsReportedFaultLyric_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__IsReportedFaultLyric_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__IsReportedFaultLyric_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__IsReportedFaultLyric_);
		if (size)
			*size = sizeof(struct __ns1__IsReportedFaultLyric_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__IsReportedFaultLyric_, n);
		if (size)
			*size = n * sizeof(struct __ns1__IsReportedFaultLyric_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__IsReportedFaultLyric_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__IsReportedFaultLyric_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__IsReportedFaultLyric_ %p -> %p\n", q, p));
	*(struct __ns1__IsReportedFaultLyric_*)p = *(struct __ns1__IsReportedFaultLyric_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__IsReportedRecommendationLyric_(struct soap *soap, struct __ns1__IsReportedRecommendationLyric_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__IsReportedRecommendationLyric = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__IsReportedRecommendationLyric_(struct soap *soap, const struct __ns1__IsReportedRecommendationLyric_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__IsReportedRecommendationLyric(soap, &a->ns1__IsReportedRecommendationLyric);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__IsReportedRecommendationLyric_(struct soap *soap, const char *tag, int id, const struct __ns1__IsReportedRecommendationLyric_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__IsReportedRecommendationLyric(soap, "ns1:IsReportedRecommendationLyric", -1, &a->ns1__IsReportedRecommendationLyric, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__IsReportedRecommendationLyric_ * SOAP_FMAC4 soap_in___ns1__IsReportedRecommendationLyric_(struct soap *soap, const char *tag, struct __ns1__IsReportedRecommendationLyric_ *a, const char *type)
{
	size_t soap_flag_ns1__IsReportedRecommendationLyric = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__IsReportedRecommendationLyric_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__IsReportedRecommendationLyric_, sizeof(struct __ns1__IsReportedRecommendationLyric_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__IsReportedRecommendationLyric_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__IsReportedRecommendationLyric && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__IsReportedRecommendationLyric(soap, "ns1:IsReportedRecommendationLyric", &a->ns1__IsReportedRecommendationLyric, ""))
				{	soap_flag_ns1__IsReportedRecommendationLyric--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__IsReportedRecommendationLyric_(struct soap *soap, const struct __ns1__IsReportedRecommendationLyric_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__IsReportedRecommendationLyric_(soap, tag?tag:"-ns1:IsReportedRecommendationLyric", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__IsReportedRecommendationLyric_ * SOAP_FMAC4 soap_get___ns1__IsReportedRecommendationLyric_(struct soap *soap, struct __ns1__IsReportedRecommendationLyric_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__IsReportedRecommendationLyric_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__IsReportedRecommendationLyric_ * SOAP_FMAC2 soap_instantiate___ns1__IsReportedRecommendationLyric_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__IsReportedRecommendationLyric_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__IsReportedRecommendationLyric_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__IsReportedRecommendationLyric_);
		if (size)
			*size = sizeof(struct __ns1__IsReportedRecommendationLyric_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__IsReportedRecommendationLyric_, n);
		if (size)
			*size = n * sizeof(struct __ns1__IsReportedRecommendationLyric_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__IsReportedRecommendationLyric_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__IsReportedRecommendationLyric_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__IsReportedRecommendationLyric_ %p -> %p\n", q, p));
	*(struct __ns1__IsReportedRecommendationLyric_*)p = *(struct __ns1__IsReportedRecommendationLyric_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReportRecommendationLyric_(struct soap *soap, struct __ns1__ReportRecommendationLyric_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__ReportRecommendationLyric = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReportRecommendationLyric_(struct soap *soap, const struct __ns1__ReportRecommendationLyric_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ReportRecommendationLyric(soap, &a->ns1__ReportRecommendationLyric);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReportRecommendationLyric_(struct soap *soap, const char *tag, int id, const struct __ns1__ReportRecommendationLyric_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__ReportRecommendationLyric(soap, "ns1:ReportRecommendationLyric", -1, &a->ns1__ReportRecommendationLyric, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ReportRecommendationLyric_ * SOAP_FMAC4 soap_in___ns1__ReportRecommendationLyric_(struct soap *soap, const char *tag, struct __ns1__ReportRecommendationLyric_ *a, const char *type)
{
	size_t soap_flag_ns1__ReportRecommendationLyric = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__ReportRecommendationLyric_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__ReportRecommendationLyric_, sizeof(struct __ns1__ReportRecommendationLyric_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__ReportRecommendationLyric_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__ReportRecommendationLyric && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__ReportRecommendationLyric(soap, "ns1:ReportRecommendationLyric", &a->ns1__ReportRecommendationLyric, ""))
				{	soap_flag_ns1__ReportRecommendationLyric--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReportRecommendationLyric_(struct soap *soap, const struct __ns1__ReportRecommendationLyric_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__ReportRecommendationLyric_(soap, tag?tag:"-ns1:ReportRecommendationLyric", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ReportRecommendationLyric_ * SOAP_FMAC4 soap_get___ns1__ReportRecommendationLyric_(struct soap *soap, struct __ns1__ReportRecommendationLyric_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__ReportRecommendationLyric_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__ReportRecommendationLyric_ * SOAP_FMAC2 soap_instantiate___ns1__ReportRecommendationLyric_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__ReportRecommendationLyric_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__ReportRecommendationLyric_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__ReportRecommendationLyric_);
		if (size)
			*size = sizeof(struct __ns1__ReportRecommendationLyric_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__ReportRecommendationLyric_, n);
		if (size)
			*size = n * sizeof(struct __ns1__ReportRecommendationLyric_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__ReportRecommendationLyric_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__ReportRecommendationLyric_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__ReportRecommendationLyric_ %p -> %p\n", q, p));
	*(struct __ns1__ReportRecommendationLyric_*)p = *(struct __ns1__ReportRecommendationLyric_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReportFaultLyric2_(struct soap *soap, struct __ns1__ReportFaultLyric2_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__ReportFaultLyric2 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReportFaultLyric2_(struct soap *soap, const struct __ns1__ReportFaultLyric2_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ReportFaultLyric2(soap, &a->ns1__ReportFaultLyric2);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReportFaultLyric2_(struct soap *soap, const char *tag, int id, const struct __ns1__ReportFaultLyric2_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__ReportFaultLyric2(soap, "ns1:ReportFaultLyric2", -1, &a->ns1__ReportFaultLyric2, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ReportFaultLyric2_ * SOAP_FMAC4 soap_in___ns1__ReportFaultLyric2_(struct soap *soap, const char *tag, struct __ns1__ReportFaultLyric2_ *a, const char *type)
{
	size_t soap_flag_ns1__ReportFaultLyric2 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__ReportFaultLyric2_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__ReportFaultLyric2_, sizeof(struct __ns1__ReportFaultLyric2_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__ReportFaultLyric2_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__ReportFaultLyric2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__ReportFaultLyric2(soap, "ns1:ReportFaultLyric2", &a->ns1__ReportFaultLyric2, ""))
				{	soap_flag_ns1__ReportFaultLyric2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReportFaultLyric2_(struct soap *soap, const struct __ns1__ReportFaultLyric2_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__ReportFaultLyric2_(soap, tag?tag:"-ns1:ReportFaultLyric2", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ReportFaultLyric2_ * SOAP_FMAC4 soap_get___ns1__ReportFaultLyric2_(struct soap *soap, struct __ns1__ReportFaultLyric2_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__ReportFaultLyric2_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__ReportFaultLyric2_ * SOAP_FMAC2 soap_instantiate___ns1__ReportFaultLyric2_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__ReportFaultLyric2_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__ReportFaultLyric2_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__ReportFaultLyric2_);
		if (size)
			*size = sizeof(struct __ns1__ReportFaultLyric2_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__ReportFaultLyric2_, n);
		if (size)
			*size = n * sizeof(struct __ns1__ReportFaultLyric2_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__ReportFaultLyric2_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__ReportFaultLyric2_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__ReportFaultLyric2_ %p -> %p\n", q, p));
	*(struct __ns1__ReportFaultLyric2_*)p = *(struct __ns1__ReportFaultLyric2_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReportFaultLyricWithComment_(struct soap *soap, struct __ns1__ReportFaultLyricWithComment_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__ReportFaultLyricWithComment = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReportFaultLyricWithComment_(struct soap *soap, const struct __ns1__ReportFaultLyricWithComment_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ReportFaultLyricWithComment(soap, &a->ns1__ReportFaultLyricWithComment);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReportFaultLyricWithComment_(struct soap *soap, const char *tag, int id, const struct __ns1__ReportFaultLyricWithComment_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__ReportFaultLyricWithComment(soap, "ns1:ReportFaultLyricWithComment", -1, &a->ns1__ReportFaultLyricWithComment, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ReportFaultLyricWithComment_ * SOAP_FMAC4 soap_in___ns1__ReportFaultLyricWithComment_(struct soap *soap, const char *tag, struct __ns1__ReportFaultLyricWithComment_ *a, const char *type)
{
	size_t soap_flag_ns1__ReportFaultLyricWithComment = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__ReportFaultLyricWithComment_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__ReportFaultLyricWithComment_, sizeof(struct __ns1__ReportFaultLyricWithComment_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__ReportFaultLyricWithComment_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__ReportFaultLyricWithComment && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__ReportFaultLyricWithComment(soap, "ns1:ReportFaultLyricWithComment", &a->ns1__ReportFaultLyricWithComment, ""))
				{	soap_flag_ns1__ReportFaultLyricWithComment--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReportFaultLyricWithComment_(struct soap *soap, const struct __ns1__ReportFaultLyricWithComment_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__ReportFaultLyricWithComment_(soap, tag?tag:"-ns1:ReportFaultLyricWithComment", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ReportFaultLyricWithComment_ * SOAP_FMAC4 soap_get___ns1__ReportFaultLyricWithComment_(struct soap *soap, struct __ns1__ReportFaultLyricWithComment_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__ReportFaultLyricWithComment_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__ReportFaultLyricWithComment_ * SOAP_FMAC2 soap_instantiate___ns1__ReportFaultLyricWithComment_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__ReportFaultLyricWithComment_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__ReportFaultLyricWithComment_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__ReportFaultLyricWithComment_);
		if (size)
			*size = sizeof(struct __ns1__ReportFaultLyricWithComment_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__ReportFaultLyricWithComment_, n);
		if (size)
			*size = n * sizeof(struct __ns1__ReportFaultLyricWithComment_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__ReportFaultLyricWithComment_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__ReportFaultLyricWithComment_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__ReportFaultLyricWithComment_ %p -> %p\n", q, p));
	*(struct __ns1__ReportFaultLyricWithComment_*)p = *(struct __ns1__ReportFaultLyricWithComment_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadLyric_(struct soap *soap, struct __ns1__UploadLyric_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__UploadLyric = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadLyric_(struct soap *soap, const struct __ns1__UploadLyric_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__UploadLyric(soap, &a->ns1__UploadLyric);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadLyric_(struct soap *soap, const char *tag, int id, const struct __ns1__UploadLyric_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__UploadLyric(soap, "ns1:UploadLyric", -1, &a->ns1__UploadLyric, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__UploadLyric_ * SOAP_FMAC4 soap_in___ns1__UploadLyric_(struct soap *soap, const char *tag, struct __ns1__UploadLyric_ *a, const char *type)
{
	size_t soap_flag_ns1__UploadLyric = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__UploadLyric_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__UploadLyric_, sizeof(struct __ns1__UploadLyric_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__UploadLyric_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__UploadLyric && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__UploadLyric(soap, "ns1:UploadLyric", &a->ns1__UploadLyric, ""))
				{	soap_flag_ns1__UploadLyric--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadLyric_(struct soap *soap, const struct __ns1__UploadLyric_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__UploadLyric_(soap, tag?tag:"-ns1:UploadLyric", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__UploadLyric_ * SOAP_FMAC4 soap_get___ns1__UploadLyric_(struct soap *soap, struct __ns1__UploadLyric_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__UploadLyric_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__UploadLyric_ * SOAP_FMAC2 soap_instantiate___ns1__UploadLyric_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__UploadLyric_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__UploadLyric_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__UploadLyric_);
		if (size)
			*size = sizeof(struct __ns1__UploadLyric_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__UploadLyric_, n);
		if (size)
			*size = n * sizeof(struct __ns1__UploadLyric_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__UploadLyric_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__UploadLyric_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__UploadLyric_ %p -> %p\n", q, p));
	*(struct __ns1__UploadLyric_*)p = *(struct __ns1__UploadLyric_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetResembleLyric2CountTest_(struct soap *soap, struct __ns1__GetResembleLyric2CountTest_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetResembleLyric2CountTest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetResembleLyric2CountTest_(struct soap *soap, const struct __ns1__GetResembleLyric2CountTest_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetResembleLyric2CountTest(soap, &a->ns1__GetResembleLyric2CountTest);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetResembleLyric2CountTest_(struct soap *soap, const char *tag, int id, const struct __ns1__GetResembleLyric2CountTest_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetResembleLyric2CountTest(soap, "ns1:GetResembleLyric2CountTest", -1, &a->ns1__GetResembleLyric2CountTest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyric2CountTest_ * SOAP_FMAC4 soap_in___ns1__GetResembleLyric2CountTest_(struct soap *soap, const char *tag, struct __ns1__GetResembleLyric2CountTest_ *a, const char *type)
{
	size_t soap_flag_ns1__GetResembleLyric2CountTest = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetResembleLyric2CountTest_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetResembleLyric2CountTest_, sizeof(struct __ns1__GetResembleLyric2CountTest_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetResembleLyric2CountTest_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetResembleLyric2CountTest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetResembleLyric2CountTest(soap, "ns1:GetResembleLyric2CountTest", &a->ns1__GetResembleLyric2CountTest, ""))
				{	soap_flag_ns1__GetResembleLyric2CountTest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetResembleLyric2CountTest_(struct soap *soap, const struct __ns1__GetResembleLyric2CountTest_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetResembleLyric2CountTest_(soap, tag?tag:"-ns1:GetResembleLyric2CountTest", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyric2CountTest_ * SOAP_FMAC4 soap_get___ns1__GetResembleLyric2CountTest_(struct soap *soap, struct __ns1__GetResembleLyric2CountTest_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetResembleLyric2CountTest_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetResembleLyric2CountTest_ * SOAP_FMAC2 soap_instantiate___ns1__GetResembleLyric2CountTest_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetResembleLyric2CountTest_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetResembleLyric2CountTest_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetResembleLyric2CountTest_);
		if (size)
			*size = sizeof(struct __ns1__GetResembleLyric2CountTest_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetResembleLyric2CountTest_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetResembleLyric2CountTest_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetResembleLyric2CountTest_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetResembleLyric2CountTest_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetResembleLyric2CountTest_ %p -> %p\n", q, p));
	*(struct __ns1__GetResembleLyric2CountTest_*)p = *(struct __ns1__GetResembleLyric2CountTest_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetResembleLyric2Count_(struct soap *soap, struct __ns1__GetResembleLyric2Count_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetResembleLyric2Count = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetResembleLyric2Count_(struct soap *soap, const struct __ns1__GetResembleLyric2Count_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetResembleLyric2Count(soap, &a->ns1__GetResembleLyric2Count);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetResembleLyric2Count_(struct soap *soap, const char *tag, int id, const struct __ns1__GetResembleLyric2Count_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetResembleLyric2Count(soap, "ns1:GetResembleLyric2Count", -1, &a->ns1__GetResembleLyric2Count, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyric2Count_ * SOAP_FMAC4 soap_in___ns1__GetResembleLyric2Count_(struct soap *soap, const char *tag, struct __ns1__GetResembleLyric2Count_ *a, const char *type)
{
	size_t soap_flag_ns1__GetResembleLyric2Count = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetResembleLyric2Count_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetResembleLyric2Count_, sizeof(struct __ns1__GetResembleLyric2Count_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetResembleLyric2Count_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetResembleLyric2Count && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetResembleLyric2Count(soap, "ns1:GetResembleLyric2Count", &a->ns1__GetResembleLyric2Count, ""))
				{	soap_flag_ns1__GetResembleLyric2Count--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetResembleLyric2Count_(struct soap *soap, const struct __ns1__GetResembleLyric2Count_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetResembleLyric2Count_(soap, tag?tag:"-ns1:GetResembleLyric2Count", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyric2Count_ * SOAP_FMAC4 soap_get___ns1__GetResembleLyric2Count_(struct soap *soap, struct __ns1__GetResembleLyric2Count_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetResembleLyric2Count_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetResembleLyric2Count_ * SOAP_FMAC2 soap_instantiate___ns1__GetResembleLyric2Count_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetResembleLyric2Count_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetResembleLyric2Count_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetResembleLyric2Count_);
		if (size)
			*size = sizeof(struct __ns1__GetResembleLyric2Count_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetResembleLyric2Count_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetResembleLyric2Count_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetResembleLyric2Count_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetResembleLyric2Count_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetResembleLyric2Count_ %p -> %p\n", q, p));
	*(struct __ns1__GetResembleLyric2Count_*)p = *(struct __ns1__GetResembleLyric2Count_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetResembleLyric3_(struct soap *soap, struct __ns1__GetResembleLyric3_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetResembleLyric3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetResembleLyric3_(struct soap *soap, const struct __ns1__GetResembleLyric3_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetResembleLyric3(soap, &a->ns1__GetResembleLyric3);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetResembleLyric3_(struct soap *soap, const char *tag, int id, const struct __ns1__GetResembleLyric3_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetResembleLyric3(soap, "ns1:GetResembleLyric3", -1, &a->ns1__GetResembleLyric3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyric3_ * SOAP_FMAC4 soap_in___ns1__GetResembleLyric3_(struct soap *soap, const char *tag, struct __ns1__GetResembleLyric3_ *a, const char *type)
{
	size_t soap_flag_ns1__GetResembleLyric3 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetResembleLyric3_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetResembleLyric3_, sizeof(struct __ns1__GetResembleLyric3_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetResembleLyric3_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetResembleLyric3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetResembleLyric3(soap, "ns1:GetResembleLyric3", &a->ns1__GetResembleLyric3, ""))
				{	soap_flag_ns1__GetResembleLyric3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetResembleLyric3_(struct soap *soap, const struct __ns1__GetResembleLyric3_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetResembleLyric3_(soap, tag?tag:"-ns1:GetResembleLyric3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyric3_ * SOAP_FMAC4 soap_get___ns1__GetResembleLyric3_(struct soap *soap, struct __ns1__GetResembleLyric3_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetResembleLyric3_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetResembleLyric3_ * SOAP_FMAC2 soap_instantiate___ns1__GetResembleLyric3_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetResembleLyric3_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetResembleLyric3_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetResembleLyric3_);
		if (size)
			*size = sizeof(struct __ns1__GetResembleLyric3_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetResembleLyric3_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetResembleLyric3_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetResembleLyric3_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetResembleLyric3_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetResembleLyric3_ %p -> %p\n", q, p));
	*(struct __ns1__GetResembleLyric3_*)p = *(struct __ns1__GetResembleLyric3_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetResembleLyric2_(struct soap *soap, struct __ns1__GetResembleLyric2_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetResembleLyric2 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetResembleLyric2_(struct soap *soap, const struct __ns1__GetResembleLyric2_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetResembleLyric2(soap, &a->ns1__GetResembleLyric2);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetResembleLyric2_(struct soap *soap, const char *tag, int id, const struct __ns1__GetResembleLyric2_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetResembleLyric2(soap, "ns1:GetResembleLyric2", -1, &a->ns1__GetResembleLyric2, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyric2_ * SOAP_FMAC4 soap_in___ns1__GetResembleLyric2_(struct soap *soap, const char *tag, struct __ns1__GetResembleLyric2_ *a, const char *type)
{
	size_t soap_flag_ns1__GetResembleLyric2 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetResembleLyric2_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetResembleLyric2_, sizeof(struct __ns1__GetResembleLyric2_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetResembleLyric2_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetResembleLyric2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetResembleLyric2(soap, "ns1:GetResembleLyric2", &a->ns1__GetResembleLyric2, ""))
				{	soap_flag_ns1__GetResembleLyric2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetResembleLyric2_(struct soap *soap, const struct __ns1__GetResembleLyric2_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetResembleLyric2_(soap, tag?tag:"-ns1:GetResembleLyric2", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyric2_ * SOAP_FMAC4 soap_get___ns1__GetResembleLyric2_(struct soap *soap, struct __ns1__GetResembleLyric2_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetResembleLyric2_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetResembleLyric2_ * SOAP_FMAC2 soap_instantiate___ns1__GetResembleLyric2_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetResembleLyric2_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetResembleLyric2_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetResembleLyric2_);
		if (size)
			*size = sizeof(struct __ns1__GetResembleLyric2_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetResembleLyric2_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetResembleLyric2_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetResembleLyric2_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetResembleLyric2_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetResembleLyric2_ %p -> %p\n", q, p));
	*(struct __ns1__GetResembleLyric2_*)p = *(struct __ns1__GetResembleLyric2_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetLinkLyric_(struct soap *soap, struct __ns1__SetLinkLyric_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetLinkLyric = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetLinkLyric_(struct soap *soap, const struct __ns1__SetLinkLyric_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__SetLinkLyric(soap, &a->ns1__SetLinkLyric);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetLinkLyric_(struct soap *soap, const char *tag, int id, const struct __ns1__SetLinkLyric_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__SetLinkLyric(soap, "ns1:SetLinkLyric", -1, &a->ns1__SetLinkLyric, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetLinkLyric_ * SOAP_FMAC4 soap_in___ns1__SetLinkLyric_(struct soap *soap, const char *tag, struct __ns1__SetLinkLyric_ *a, const char *type)
{
	size_t soap_flag_ns1__SetLinkLyric = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__SetLinkLyric_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetLinkLyric_, sizeof(struct __ns1__SetLinkLyric_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetLinkLyric_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetLinkLyric && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetLinkLyric(soap, "ns1:SetLinkLyric", &a->ns1__SetLinkLyric, ""))
				{	soap_flag_ns1__SetLinkLyric--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetLinkLyric_(struct soap *soap, const struct __ns1__SetLinkLyric_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SetLinkLyric_(soap, tag?tag:"-ns1:SetLinkLyric", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetLinkLyric_ * SOAP_FMAC4 soap_get___ns1__SetLinkLyric_(struct soap *soap, struct __ns1__SetLinkLyric_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetLinkLyric_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetLinkLyric_ * SOAP_FMAC2 soap_instantiate___ns1__SetLinkLyric_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetLinkLyric_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetLinkLyric_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetLinkLyric_);
		if (size)
			*size = sizeof(struct __ns1__SetLinkLyric_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__SetLinkLyric_, n);
		if (size)
			*size = n * sizeof(struct __ns1__SetLinkLyric_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__SetLinkLyric_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetLinkLyric_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetLinkLyric_ %p -> %p\n", q, p));
	*(struct __ns1__SetLinkLyric_*)p = *(struct __ns1__SetLinkLyric_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSyncLyricBySearch_(struct soap *soap, struct __ns1__GetSyncLyricBySearch_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetSyncLyricBySearch = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSyncLyricBySearch_(struct soap *soap, const struct __ns1__GetSyncLyricBySearch_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetSyncLyricBySearch(soap, &a->ns1__GetSyncLyricBySearch);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSyncLyricBySearch_(struct soap *soap, const char *tag, int id, const struct __ns1__GetSyncLyricBySearch_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetSyncLyricBySearch(soap, "ns1:GetSyncLyricBySearch", -1, &a->ns1__GetSyncLyricBySearch, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetSyncLyricBySearch_ * SOAP_FMAC4 soap_in___ns1__GetSyncLyricBySearch_(struct soap *soap, const char *tag, struct __ns1__GetSyncLyricBySearch_ *a, const char *type)
{
	size_t soap_flag_ns1__GetSyncLyricBySearch = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetSyncLyricBySearch_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetSyncLyricBySearch_, sizeof(struct __ns1__GetSyncLyricBySearch_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetSyncLyricBySearch_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetSyncLyricBySearch && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetSyncLyricBySearch(soap, "ns1:GetSyncLyricBySearch", &a->ns1__GetSyncLyricBySearch, ""))
				{	soap_flag_ns1__GetSyncLyricBySearch--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSyncLyricBySearch_(struct soap *soap, const struct __ns1__GetSyncLyricBySearch_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetSyncLyricBySearch_(soap, tag?tag:"-ns1:GetSyncLyricBySearch", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetSyncLyricBySearch_ * SOAP_FMAC4 soap_get___ns1__GetSyncLyricBySearch_(struct soap *soap, struct __ns1__GetSyncLyricBySearch_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetSyncLyricBySearch_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetSyncLyricBySearch_ * SOAP_FMAC2 soap_instantiate___ns1__GetSyncLyricBySearch_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetSyncLyricBySearch_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetSyncLyricBySearch_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetSyncLyricBySearch_);
		if (size)
			*size = sizeof(struct __ns1__GetSyncLyricBySearch_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetSyncLyricBySearch_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetSyncLyricBySearch_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetSyncLyricBySearch_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetSyncLyricBySearch_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetSyncLyricBySearch_ %p -> %p\n", q, p));
	*(struct __ns1__GetSyncLyricBySearch_*)p = *(struct __ns1__GetSyncLyricBySearch_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMurekaInfo_(struct soap *soap, struct __ns1__GetMurekaInfo_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetMurekaInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMurekaInfo_(struct soap *soap, const struct __ns1__GetMurekaInfo_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetMurekaInfo(soap, &a->ns1__GetMurekaInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMurekaInfo_(struct soap *soap, const char *tag, int id, const struct __ns1__GetMurekaInfo_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetMurekaInfo(soap, "ns1:GetMurekaInfo", -1, &a->ns1__GetMurekaInfo, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetMurekaInfo_ * SOAP_FMAC4 soap_in___ns1__GetMurekaInfo_(struct soap *soap, const char *tag, struct __ns1__GetMurekaInfo_ *a, const char *type)
{
	size_t soap_flag_ns1__GetMurekaInfo = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetMurekaInfo_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetMurekaInfo_, sizeof(struct __ns1__GetMurekaInfo_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetMurekaInfo_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetMurekaInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetMurekaInfo(soap, "ns1:GetMurekaInfo", &a->ns1__GetMurekaInfo, ""))
				{	soap_flag_ns1__GetMurekaInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMurekaInfo_(struct soap *soap, const struct __ns1__GetMurekaInfo_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetMurekaInfo_(soap, tag?tag:"-ns1:GetMurekaInfo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetMurekaInfo_ * SOAP_FMAC4 soap_get___ns1__GetMurekaInfo_(struct soap *soap, struct __ns1__GetMurekaInfo_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetMurekaInfo_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetMurekaInfo_ * SOAP_FMAC2 soap_instantiate___ns1__GetMurekaInfo_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetMurekaInfo_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetMurekaInfo_, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetMurekaInfo_);
		if (size)
			*size = sizeof(struct __ns1__GetMurekaInfo_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetMurekaInfo_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetMurekaInfo_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetMurekaInfo_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetMurekaInfo_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetMurekaInfo_ %p -> %p\n", q, p));
	*(struct __ns1__GetMurekaInfo_*)p = *(struct __ns1__GetMurekaInfo_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetLatestLyricID(struct soap *soap, struct __ns1__AdminGetLatestLyricID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetLatestLyricID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetLatestLyricID(struct soap *soap, const struct __ns1__AdminGetLatestLyricID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetLatestLyricID(soap, &a->ns1__AdminGetLatestLyricID);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetLatestLyricID(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetLatestLyricID *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetLatestLyricID(soap, "ns1:AdminGetLatestLyricID", -1, &a->ns1__AdminGetLatestLyricID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetLatestLyricID * SOAP_FMAC4 soap_in___ns1__AdminGetLatestLyricID(struct soap *soap, const char *tag, struct __ns1__AdminGetLatestLyricID *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetLatestLyricID = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetLatestLyricID *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetLatestLyricID, sizeof(struct __ns1__AdminGetLatestLyricID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetLatestLyricID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetLatestLyricID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetLatestLyricID(soap, "ns1:AdminGetLatestLyricID", &a->ns1__AdminGetLatestLyricID, ""))
				{	soap_flag_ns1__AdminGetLatestLyricID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetLatestLyricID(struct soap *soap, const struct __ns1__AdminGetLatestLyricID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetLatestLyricID(soap, tag?tag:"-ns1:AdminGetLatestLyricID", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetLatestLyricID * SOAP_FMAC4 soap_get___ns1__AdminGetLatestLyricID(struct soap *soap, struct __ns1__AdminGetLatestLyricID *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetLatestLyricID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetLatestLyricID * SOAP_FMAC2 soap_instantiate___ns1__AdminGetLatestLyricID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetLatestLyricID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetLatestLyricID, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetLatestLyricID);
		if (size)
			*size = sizeof(struct __ns1__AdminGetLatestLyricID);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetLatestLyricID, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetLatestLyricID);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetLatestLyricID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetLatestLyricID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetLatestLyricID %p -> %p\n", q, p));
	*(struct __ns1__AdminGetLatestLyricID*)p = *(struct __ns1__AdminGetLatestLyricID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminDeleteLyrics(struct soap *soap, struct __ns1__AdminDeleteLyrics *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminDeleteLyrics = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminDeleteLyrics(struct soap *soap, const struct __ns1__AdminDeleteLyrics *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminDeleteLyrics(soap, &a->ns1__AdminDeleteLyrics);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminDeleteLyrics(struct soap *soap, const char *tag, int id, const struct __ns1__AdminDeleteLyrics *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminDeleteLyrics(soap, "ns1:AdminDeleteLyrics", -1, &a->ns1__AdminDeleteLyrics, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminDeleteLyrics * SOAP_FMAC4 soap_in___ns1__AdminDeleteLyrics(struct soap *soap, const char *tag, struct __ns1__AdminDeleteLyrics *a, const char *type)
{
	size_t soap_flag_ns1__AdminDeleteLyrics = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminDeleteLyrics *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminDeleteLyrics, sizeof(struct __ns1__AdminDeleteLyrics), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminDeleteLyrics(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminDeleteLyrics && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminDeleteLyrics(soap, "ns1:AdminDeleteLyrics", &a->ns1__AdminDeleteLyrics, ""))
				{	soap_flag_ns1__AdminDeleteLyrics--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminDeleteLyrics(struct soap *soap, const struct __ns1__AdminDeleteLyrics *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminDeleteLyrics(soap, tag?tag:"-ns1:AdminDeleteLyrics", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminDeleteLyrics * SOAP_FMAC4 soap_get___ns1__AdminDeleteLyrics(struct soap *soap, struct __ns1__AdminDeleteLyrics *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminDeleteLyrics(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminDeleteLyrics * SOAP_FMAC2 soap_instantiate___ns1__AdminDeleteLyrics(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminDeleteLyrics(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminDeleteLyrics, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminDeleteLyrics);
		if (size)
			*size = sizeof(struct __ns1__AdminDeleteLyrics);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminDeleteLyrics, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminDeleteLyrics);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminDeleteLyrics*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminDeleteLyrics(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminDeleteLyrics %p -> %p\n", q, p));
	*(struct __ns1__AdminDeleteLyrics*)p = *(struct __ns1__AdminDeleteLyrics*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetLyrics(struct soap *soap, struct __ns1__AdminGetLyrics *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetLyrics = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetLyrics(struct soap *soap, const struct __ns1__AdminGetLyrics *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetLyrics(soap, &a->ns1__AdminGetLyrics);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetLyrics(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetLyrics *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetLyrics(soap, "ns1:AdminGetLyrics", -1, &a->ns1__AdminGetLyrics, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetLyrics * SOAP_FMAC4 soap_in___ns1__AdminGetLyrics(struct soap *soap, const char *tag, struct __ns1__AdminGetLyrics *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetLyrics = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetLyrics *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetLyrics, sizeof(struct __ns1__AdminGetLyrics), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetLyrics(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetLyrics && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetLyrics(soap, "ns1:AdminGetLyrics", &a->ns1__AdminGetLyrics, ""))
				{	soap_flag_ns1__AdminGetLyrics--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetLyrics(struct soap *soap, const struct __ns1__AdminGetLyrics *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetLyrics(soap, tag?tag:"-ns1:AdminGetLyrics", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetLyrics * SOAP_FMAC4 soap_get___ns1__AdminGetLyrics(struct soap *soap, struct __ns1__AdminGetLyrics *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetLyrics(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetLyrics * SOAP_FMAC2 soap_instantiate___ns1__AdminGetLyrics(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetLyrics(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetLyrics, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetLyrics);
		if (size)
			*size = sizeof(struct __ns1__AdminGetLyrics);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetLyrics, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetLyrics);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetLyrics*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetLyrics(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetLyrics %p -> %p\n", q, p));
	*(struct __ns1__AdminGetLyrics*)p = *(struct __ns1__AdminGetLyrics*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminLoginLyricMonitor(struct soap *soap, struct __ns1__AdminLoginLyricMonitor *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminLoginLyricMonitor = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminLoginLyricMonitor(struct soap *soap, const struct __ns1__AdminLoginLyricMonitor *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminLoginLyricMonitor(soap, &a->ns1__AdminLoginLyricMonitor);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminLoginLyricMonitor(struct soap *soap, const char *tag, int id, const struct __ns1__AdminLoginLyricMonitor *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminLoginLyricMonitor(soap, "ns1:AdminLoginLyricMonitor", -1, &a->ns1__AdminLoginLyricMonitor, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminLoginLyricMonitor * SOAP_FMAC4 soap_in___ns1__AdminLoginLyricMonitor(struct soap *soap, const char *tag, struct __ns1__AdminLoginLyricMonitor *a, const char *type)
{
	size_t soap_flag_ns1__AdminLoginLyricMonitor = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminLoginLyricMonitor *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminLoginLyricMonitor, sizeof(struct __ns1__AdminLoginLyricMonitor), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminLoginLyricMonitor(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminLoginLyricMonitor && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminLoginLyricMonitor(soap, "ns1:AdminLoginLyricMonitor", &a->ns1__AdminLoginLyricMonitor, ""))
				{	soap_flag_ns1__AdminLoginLyricMonitor--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminLoginLyricMonitor(struct soap *soap, const struct __ns1__AdminLoginLyricMonitor *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminLoginLyricMonitor(soap, tag?tag:"-ns1:AdminLoginLyricMonitor", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminLoginLyricMonitor * SOAP_FMAC4 soap_get___ns1__AdminLoginLyricMonitor(struct soap *soap, struct __ns1__AdminLoginLyricMonitor *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminLoginLyricMonitor(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminLoginLyricMonitor * SOAP_FMAC2 soap_instantiate___ns1__AdminLoginLyricMonitor(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminLoginLyricMonitor(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminLoginLyricMonitor, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminLoginLyricMonitor);
		if (size)
			*size = sizeof(struct __ns1__AdminLoginLyricMonitor);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminLoginLyricMonitor, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminLoginLyricMonitor);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminLoginLyricMonitor*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminLoginLyricMonitor(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminLoginLyricMonitor %p -> %p\n", q, p));
	*(struct __ns1__AdminLoginLyricMonitor*)p = *(struct __ns1__AdminLoginLyricMonitor*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSearchLyricCount(struct soap *soap, struct __ns1__GetSearchLyricCount *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetSearchLyricCount = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSearchLyricCount(struct soap *soap, const struct __ns1__GetSearchLyricCount *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetSearchLyricCount(soap, &a->ns1__GetSearchLyricCount);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSearchLyricCount(struct soap *soap, const char *tag, int id, const struct __ns1__GetSearchLyricCount *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetSearchLyricCount(soap, "ns1:GetSearchLyricCount", -1, &a->ns1__GetSearchLyricCount, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetSearchLyricCount * SOAP_FMAC4 soap_in___ns1__GetSearchLyricCount(struct soap *soap, const char *tag, struct __ns1__GetSearchLyricCount *a, const char *type)
{
	size_t soap_flag_ns1__GetSearchLyricCount = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetSearchLyricCount *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetSearchLyricCount, sizeof(struct __ns1__GetSearchLyricCount), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetSearchLyricCount(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetSearchLyricCount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetSearchLyricCount(soap, "ns1:GetSearchLyricCount", &a->ns1__GetSearchLyricCount, ""))
				{	soap_flag_ns1__GetSearchLyricCount--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSearchLyricCount(struct soap *soap, const struct __ns1__GetSearchLyricCount *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetSearchLyricCount(soap, tag?tag:"-ns1:GetSearchLyricCount", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetSearchLyricCount * SOAP_FMAC4 soap_get___ns1__GetSearchLyricCount(struct soap *soap, struct __ns1__GetSearchLyricCount *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetSearchLyricCount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetSearchLyricCount * SOAP_FMAC2 soap_instantiate___ns1__GetSearchLyricCount(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetSearchLyricCount(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetSearchLyricCount, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetSearchLyricCount);
		if (size)
			*size = sizeof(struct __ns1__GetSearchLyricCount);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetSearchLyricCount, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetSearchLyricCount);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetSearchLyricCount*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetSearchLyricCount(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetSearchLyricCount %p -> %p\n", q, p));
	*(struct __ns1__GetSearchLyricCount*)p = *(struct __ns1__GetSearchLyricCount*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminLoginRightsJPN(struct soap *soap, struct __ns1__AdminLoginRightsJPN *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminLoginRightsJPN = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminLoginRightsJPN(struct soap *soap, const struct __ns1__AdminLoginRightsJPN *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminLoginRightsJPN(soap, &a->ns1__AdminLoginRightsJPN);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminLoginRightsJPN(struct soap *soap, const char *tag, int id, const struct __ns1__AdminLoginRightsJPN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminLoginRightsJPN(soap, "ns1:AdminLoginRightsJPN", -1, &a->ns1__AdminLoginRightsJPN, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminLoginRightsJPN * SOAP_FMAC4 soap_in___ns1__AdminLoginRightsJPN(struct soap *soap, const char *tag, struct __ns1__AdminLoginRightsJPN *a, const char *type)
{
	size_t soap_flag_ns1__AdminLoginRightsJPN = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminLoginRightsJPN *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminLoginRightsJPN, sizeof(struct __ns1__AdminLoginRightsJPN), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminLoginRightsJPN(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminLoginRightsJPN && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminLoginRightsJPN(soap, "ns1:AdminLoginRightsJPN", &a->ns1__AdminLoginRightsJPN, ""))
				{	soap_flag_ns1__AdminLoginRightsJPN--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminLoginRightsJPN(struct soap *soap, const struct __ns1__AdminLoginRightsJPN *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminLoginRightsJPN(soap, tag?tag:"-ns1:AdminLoginRightsJPN", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminLoginRightsJPN * SOAP_FMAC4 soap_get___ns1__AdminLoginRightsJPN(struct soap *soap, struct __ns1__AdminLoginRightsJPN *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminLoginRightsJPN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminLoginRightsJPN * SOAP_FMAC2 soap_instantiate___ns1__AdminLoginRightsJPN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminLoginRightsJPN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminLoginRightsJPN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminLoginRightsJPN);
		if (size)
			*size = sizeof(struct __ns1__AdminLoginRightsJPN);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminLoginRightsJPN, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminLoginRightsJPN);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminLoginRightsJPN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminLoginRightsJPN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminLoginRightsJPN %p -> %p\n", q, p));
	*(struct __ns1__AdminLoginRightsJPN*)p = *(struct __ns1__AdminLoginRightsJPN*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminJPNSearchRightsInfoList(struct soap *soap, struct __ns1__AdminJPNSearchRightsInfoList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminJPNSearchRightsInfoList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminJPNSearchRightsInfoList(struct soap *soap, const struct __ns1__AdminJPNSearchRightsInfoList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminJPNSearchRightsInfoList(soap, &a->ns1__AdminJPNSearchRightsInfoList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminJPNSearchRightsInfoList(struct soap *soap, const char *tag, int id, const struct __ns1__AdminJPNSearchRightsInfoList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminJPNSearchRightsInfoList(soap, "ns1:AdminJPNSearchRightsInfoList", -1, &a->ns1__AdminJPNSearchRightsInfoList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminJPNSearchRightsInfoList * SOAP_FMAC4 soap_in___ns1__AdminJPNSearchRightsInfoList(struct soap *soap, const char *tag, struct __ns1__AdminJPNSearchRightsInfoList *a, const char *type)
{
	size_t soap_flag_ns1__AdminJPNSearchRightsInfoList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminJPNSearchRightsInfoList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminJPNSearchRightsInfoList, sizeof(struct __ns1__AdminJPNSearchRightsInfoList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminJPNSearchRightsInfoList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminJPNSearchRightsInfoList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminJPNSearchRightsInfoList(soap, "ns1:AdminJPNSearchRightsInfoList", &a->ns1__AdminJPNSearchRightsInfoList, ""))
				{	soap_flag_ns1__AdminJPNSearchRightsInfoList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminJPNSearchRightsInfoList(struct soap *soap, const struct __ns1__AdminJPNSearchRightsInfoList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminJPNSearchRightsInfoList(soap, tag?tag:"-ns1:AdminJPNSearchRightsInfoList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminJPNSearchRightsInfoList * SOAP_FMAC4 soap_get___ns1__AdminJPNSearchRightsInfoList(struct soap *soap, struct __ns1__AdminJPNSearchRightsInfoList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminJPNSearchRightsInfoList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminJPNSearchRightsInfoList * SOAP_FMAC2 soap_instantiate___ns1__AdminJPNSearchRightsInfoList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminJPNSearchRightsInfoList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminJPNSearchRightsInfoList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminJPNSearchRightsInfoList);
		if (size)
			*size = sizeof(struct __ns1__AdminJPNSearchRightsInfoList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminJPNSearchRightsInfoList, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminJPNSearchRightsInfoList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminJPNSearchRightsInfoList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminJPNSearchRightsInfoList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminJPNSearchRightsInfoList %p -> %p\n", q, p));
	*(struct __ns1__AdminJPNSearchRightsInfoList*)p = *(struct __ns1__AdminJPNSearchRightsInfoList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminJPNSetRightsInfo(struct soap *soap, struct __ns1__AdminJPNSetRightsInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminJPNSetRightsInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminJPNSetRightsInfo(struct soap *soap, const struct __ns1__AdminJPNSetRightsInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminJPNSetRightsInfo(soap, &a->ns1__AdminJPNSetRightsInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminJPNSetRightsInfo(struct soap *soap, const char *tag, int id, const struct __ns1__AdminJPNSetRightsInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminJPNSetRightsInfo(soap, "ns1:AdminJPNSetRightsInfo", -1, &a->ns1__AdminJPNSetRightsInfo, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminJPNSetRightsInfo * SOAP_FMAC4 soap_in___ns1__AdminJPNSetRightsInfo(struct soap *soap, const char *tag, struct __ns1__AdminJPNSetRightsInfo *a, const char *type)
{
	size_t soap_flag_ns1__AdminJPNSetRightsInfo = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminJPNSetRightsInfo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminJPNSetRightsInfo, sizeof(struct __ns1__AdminJPNSetRightsInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminJPNSetRightsInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminJPNSetRightsInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminJPNSetRightsInfo(soap, "ns1:AdminJPNSetRightsInfo", &a->ns1__AdminJPNSetRightsInfo, ""))
				{	soap_flag_ns1__AdminJPNSetRightsInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminJPNSetRightsInfo(struct soap *soap, const struct __ns1__AdminJPNSetRightsInfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminJPNSetRightsInfo(soap, tag?tag:"-ns1:AdminJPNSetRightsInfo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminJPNSetRightsInfo * SOAP_FMAC4 soap_get___ns1__AdminJPNSetRightsInfo(struct soap *soap, struct __ns1__AdminJPNSetRightsInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminJPNSetRightsInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminJPNSetRightsInfo * SOAP_FMAC2 soap_instantiate___ns1__AdminJPNSetRightsInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminJPNSetRightsInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminJPNSetRightsInfo, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminJPNSetRightsInfo);
		if (size)
			*size = sizeof(struct __ns1__AdminJPNSetRightsInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminJPNSetRightsInfo, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminJPNSetRightsInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminJPNSetRightsInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminJPNSetRightsInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminJPNSetRightsInfo %p -> %p\n", q, p));
	*(struct __ns1__AdminJPNSetRightsInfo*)p = *(struct __ns1__AdminJPNSetRightsInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminJPNGetRightsInfoByLyricID(struct soap *soap, struct __ns1__AdminJPNGetRightsInfoByLyricID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminJPNGetRightsInfoByLyricID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminJPNGetRightsInfoByLyricID(struct soap *soap, const struct __ns1__AdminJPNGetRightsInfoByLyricID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID(soap, &a->ns1__AdminJPNGetRightsInfoByLyricID);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminJPNGetRightsInfoByLyricID(struct soap *soap, const char *tag, int id, const struct __ns1__AdminJPNGetRightsInfoByLyricID *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID(soap, "ns1:AdminJPNGetRightsInfoByLyricID", -1, &a->ns1__AdminJPNGetRightsInfoByLyricID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminJPNGetRightsInfoByLyricID * SOAP_FMAC4 soap_in___ns1__AdminJPNGetRightsInfoByLyricID(struct soap *soap, const char *tag, struct __ns1__AdminJPNGetRightsInfoByLyricID *a, const char *type)
{
	size_t soap_flag_ns1__AdminJPNGetRightsInfoByLyricID = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminJPNGetRightsInfoByLyricID *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminJPNGetRightsInfoByLyricID, sizeof(struct __ns1__AdminJPNGetRightsInfoByLyricID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminJPNGetRightsInfoByLyricID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminJPNGetRightsInfoByLyricID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID(soap, "ns1:AdminJPNGetRightsInfoByLyricID", &a->ns1__AdminJPNGetRightsInfoByLyricID, ""))
				{	soap_flag_ns1__AdminJPNGetRightsInfoByLyricID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminJPNGetRightsInfoByLyricID(struct soap *soap, const struct __ns1__AdminJPNGetRightsInfoByLyricID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminJPNGetRightsInfoByLyricID(soap, tag?tag:"-ns1:AdminJPNGetRightsInfoByLyricID", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminJPNGetRightsInfoByLyricID * SOAP_FMAC4 soap_get___ns1__AdminJPNGetRightsInfoByLyricID(struct soap *soap, struct __ns1__AdminJPNGetRightsInfoByLyricID *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminJPNGetRightsInfoByLyricID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminJPNGetRightsInfoByLyricID * SOAP_FMAC2 soap_instantiate___ns1__AdminJPNGetRightsInfoByLyricID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminJPNGetRightsInfoByLyricID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminJPNGetRightsInfoByLyricID, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminJPNGetRightsInfoByLyricID);
		if (size)
			*size = sizeof(struct __ns1__AdminJPNGetRightsInfoByLyricID);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminJPNGetRightsInfoByLyricID, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminJPNGetRightsInfoByLyricID);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminJPNGetRightsInfoByLyricID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminJPNGetRightsInfoByLyricID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminJPNGetRightsInfoByLyricID %p -> %p\n", q, p));
	*(struct __ns1__AdminJPNGetRightsInfoByLyricID*)p = *(struct __ns1__AdminJPNGetRightsInfoByLyricID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminJPNGetRightsInfoByModifyID(struct soap *soap, struct __ns1__AdminJPNGetRightsInfoByModifyID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminJPNGetRightsInfoByModifyID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminJPNGetRightsInfoByModifyID(struct soap *soap, const struct __ns1__AdminJPNGetRightsInfoByModifyID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID(soap, &a->ns1__AdminJPNGetRightsInfoByModifyID);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminJPNGetRightsInfoByModifyID(struct soap *soap, const char *tag, int id, const struct __ns1__AdminJPNGetRightsInfoByModifyID *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID(soap, "ns1:AdminJPNGetRightsInfoByModifyID", -1, &a->ns1__AdminJPNGetRightsInfoByModifyID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminJPNGetRightsInfoByModifyID * SOAP_FMAC4 soap_in___ns1__AdminJPNGetRightsInfoByModifyID(struct soap *soap, const char *tag, struct __ns1__AdminJPNGetRightsInfoByModifyID *a, const char *type)
{
	size_t soap_flag_ns1__AdminJPNGetRightsInfoByModifyID = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminJPNGetRightsInfoByModifyID *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminJPNGetRightsInfoByModifyID, sizeof(struct __ns1__AdminJPNGetRightsInfoByModifyID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminJPNGetRightsInfoByModifyID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminJPNGetRightsInfoByModifyID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID(soap, "ns1:AdminJPNGetRightsInfoByModifyID", &a->ns1__AdminJPNGetRightsInfoByModifyID, ""))
				{	soap_flag_ns1__AdminJPNGetRightsInfoByModifyID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminJPNGetRightsInfoByModifyID(struct soap *soap, const struct __ns1__AdminJPNGetRightsInfoByModifyID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminJPNGetRightsInfoByModifyID(soap, tag?tag:"-ns1:AdminJPNGetRightsInfoByModifyID", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminJPNGetRightsInfoByModifyID * SOAP_FMAC4 soap_get___ns1__AdminJPNGetRightsInfoByModifyID(struct soap *soap, struct __ns1__AdminJPNGetRightsInfoByModifyID *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminJPNGetRightsInfoByModifyID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminJPNGetRightsInfoByModifyID * SOAP_FMAC2 soap_instantiate___ns1__AdminJPNGetRightsInfoByModifyID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminJPNGetRightsInfoByModifyID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminJPNGetRightsInfoByModifyID, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminJPNGetRightsInfoByModifyID);
		if (size)
			*size = sizeof(struct __ns1__AdminJPNGetRightsInfoByModifyID);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminJPNGetRightsInfoByModifyID, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminJPNGetRightsInfoByModifyID);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminJPNGetRightsInfoByModifyID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminJPNGetRightsInfoByModifyID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminJPNGetRightsInfoByModifyID %p -> %p\n", q, p));
	*(struct __ns1__AdminJPNGetRightsInfoByModifyID*)p = *(struct __ns1__AdminJPNGetRightsInfoByModifyID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLyricByID2(struct soap *soap, struct __ns1__GetLyricByID2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetLyricByID2 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLyricByID2(struct soap *soap, const struct __ns1__GetLyricByID2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetLyricByID2(soap, &a->ns1__GetLyricByID2);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLyricByID2(struct soap *soap, const char *tag, int id, const struct __ns1__GetLyricByID2 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetLyricByID2(soap, "ns1:GetLyricByID2", -1, &a->ns1__GetLyricByID2, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyricByID2 * SOAP_FMAC4 soap_in___ns1__GetLyricByID2(struct soap *soap, const char *tag, struct __ns1__GetLyricByID2 *a, const char *type)
{
	size_t soap_flag_ns1__GetLyricByID2 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetLyricByID2 *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLyricByID2, sizeof(struct __ns1__GetLyricByID2), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLyricByID2(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetLyricByID2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetLyricByID2(soap, "ns1:GetLyricByID2", &a->ns1__GetLyricByID2, ""))
				{	soap_flag_ns1__GetLyricByID2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLyricByID2(struct soap *soap, const struct __ns1__GetLyricByID2 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLyricByID2(soap, tag?tag:"-ns1:GetLyricByID2", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyricByID2 * SOAP_FMAC4 soap_get___ns1__GetLyricByID2(struct soap *soap, struct __ns1__GetLyricByID2 *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLyricByID2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLyricByID2 * SOAP_FMAC2 soap_instantiate___ns1__GetLyricByID2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLyricByID2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLyricByID2, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLyricByID2);
		if (size)
			*size = sizeof(struct __ns1__GetLyricByID2);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetLyricByID2, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetLyricByID2);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetLyricByID2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLyricByID2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLyricByID2 %p -> %p\n", q, p));
	*(struct __ns1__GetLyricByID2*)p = *(struct __ns1__GetLyricByID2*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLyricByID(struct soap *soap, struct __ns1__GetLyricByID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetLyricByID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLyricByID(struct soap *soap, const struct __ns1__GetLyricByID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetLyricByID(soap, &a->ns1__GetLyricByID);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLyricByID(struct soap *soap, const char *tag, int id, const struct __ns1__GetLyricByID *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetLyricByID(soap, "ns1:GetLyricByID", -1, &a->ns1__GetLyricByID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyricByID * SOAP_FMAC4 soap_in___ns1__GetLyricByID(struct soap *soap, const char *tag, struct __ns1__GetLyricByID *a, const char *type)
{
	size_t soap_flag_ns1__GetLyricByID = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetLyricByID *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLyricByID, sizeof(struct __ns1__GetLyricByID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLyricByID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetLyricByID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetLyricByID(soap, "ns1:GetLyricByID", &a->ns1__GetLyricByID, ""))
				{	soap_flag_ns1__GetLyricByID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLyricByID(struct soap *soap, const struct __ns1__GetLyricByID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLyricByID(soap, tag?tag:"-ns1:GetLyricByID", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyricByID * SOAP_FMAC4 soap_get___ns1__GetLyricByID(struct soap *soap, struct __ns1__GetLyricByID *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLyricByID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLyricByID * SOAP_FMAC2 soap_instantiate___ns1__GetLyricByID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLyricByID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLyricByID, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLyricByID);
		if (size)
			*size = sizeof(struct __ns1__GetLyricByID);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetLyricByID, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetLyricByID);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetLyricByID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLyricByID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLyricByID %p -> %p\n", q, p));
	*(struct __ns1__GetLyricByID*)p = *(struct __ns1__GetLyricByID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetResembleLyricList2(struct soap *soap, struct __ns1__GetResembleLyricList2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetResembleLyricList2 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetResembleLyricList2(struct soap *soap, const struct __ns1__GetResembleLyricList2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetResembleLyricList2(soap, &a->ns1__GetResembleLyricList2);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetResembleLyricList2(struct soap *soap, const char *tag, int id, const struct __ns1__GetResembleLyricList2 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetResembleLyricList2(soap, "ns1:GetResembleLyricList2", -1, &a->ns1__GetResembleLyricList2, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyricList2 * SOAP_FMAC4 soap_in___ns1__GetResembleLyricList2(struct soap *soap, const char *tag, struct __ns1__GetResembleLyricList2 *a, const char *type)
{
	size_t soap_flag_ns1__GetResembleLyricList2 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetResembleLyricList2 *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetResembleLyricList2, sizeof(struct __ns1__GetResembleLyricList2), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetResembleLyricList2(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetResembleLyricList2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetResembleLyricList2(soap, "ns1:GetResembleLyricList2", &a->ns1__GetResembleLyricList2, ""))
				{	soap_flag_ns1__GetResembleLyricList2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetResembleLyricList2(struct soap *soap, const struct __ns1__GetResembleLyricList2 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetResembleLyricList2(soap, tag?tag:"-ns1:GetResembleLyricList2", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyricList2 * SOAP_FMAC4 soap_get___ns1__GetResembleLyricList2(struct soap *soap, struct __ns1__GetResembleLyricList2 *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetResembleLyricList2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetResembleLyricList2 * SOAP_FMAC2 soap_instantiate___ns1__GetResembleLyricList2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetResembleLyricList2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetResembleLyricList2, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetResembleLyricList2);
		if (size)
			*size = sizeof(struct __ns1__GetResembleLyricList2);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetResembleLyricList2, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetResembleLyricList2);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetResembleLyricList2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetResembleLyricList2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetResembleLyricList2 %p -> %p\n", q, p));
	*(struct __ns1__GetResembleLyricList2*)p = *(struct __ns1__GetResembleLyricList2*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetResembleLyricList(struct soap *soap, struct __ns1__GetResembleLyricList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetResembleLyricList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetResembleLyricList(struct soap *soap, const struct __ns1__GetResembleLyricList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetResembleLyricList(soap, &a->ns1__GetResembleLyricList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetResembleLyricList(struct soap *soap, const char *tag, int id, const struct __ns1__GetResembleLyricList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetResembleLyricList(soap, "ns1:GetResembleLyricList", -1, &a->ns1__GetResembleLyricList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyricList * SOAP_FMAC4 soap_in___ns1__GetResembleLyricList(struct soap *soap, const char *tag, struct __ns1__GetResembleLyricList *a, const char *type)
{
	size_t soap_flag_ns1__GetResembleLyricList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetResembleLyricList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetResembleLyricList, sizeof(struct __ns1__GetResembleLyricList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetResembleLyricList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetResembleLyricList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetResembleLyricList(soap, "ns1:GetResembleLyricList", &a->ns1__GetResembleLyricList, ""))
				{	soap_flag_ns1__GetResembleLyricList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetResembleLyricList(struct soap *soap, const struct __ns1__GetResembleLyricList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetResembleLyricList(soap, tag?tag:"-ns1:GetResembleLyricList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyricList * SOAP_FMAC4 soap_get___ns1__GetResembleLyricList(struct soap *soap, struct __ns1__GetResembleLyricList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetResembleLyricList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetResembleLyricList * SOAP_FMAC2 soap_instantiate___ns1__GetResembleLyricList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetResembleLyricList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetResembleLyricList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetResembleLyricList);
		if (size)
			*size = sizeof(struct __ns1__GetResembleLyricList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetResembleLyricList, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetResembleLyricList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetResembleLyricList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetResembleLyricList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetResembleLyricList %p -> %p\n", q, p));
	*(struct __ns1__GetResembleLyricList*)p = *(struct __ns1__GetResembleLyricList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadForeignLyric(struct soap *soap, struct __ns1__UploadForeignLyric *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__UploadForeignLyric = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadForeignLyric(struct soap *soap, const struct __ns1__UploadForeignLyric *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__UploadForeignLyric(soap, &a->ns1__UploadForeignLyric);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadForeignLyric(struct soap *soap, const char *tag, int id, const struct __ns1__UploadForeignLyric *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__UploadForeignLyric(soap, "ns1:UploadForeignLyric", -1, &a->ns1__UploadForeignLyric, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__UploadForeignLyric * SOAP_FMAC4 soap_in___ns1__UploadForeignLyric(struct soap *soap, const char *tag, struct __ns1__UploadForeignLyric *a, const char *type)
{
	size_t soap_flag_ns1__UploadForeignLyric = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__UploadForeignLyric *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__UploadForeignLyric, sizeof(struct __ns1__UploadForeignLyric), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__UploadForeignLyric(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__UploadForeignLyric && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__UploadForeignLyric(soap, "ns1:UploadForeignLyric", &a->ns1__UploadForeignLyric, ""))
				{	soap_flag_ns1__UploadForeignLyric--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadForeignLyric(struct soap *soap, const struct __ns1__UploadForeignLyric *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__UploadForeignLyric(soap, tag?tag:"-ns1:UploadForeignLyric", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__UploadForeignLyric * SOAP_FMAC4 soap_get___ns1__UploadForeignLyric(struct soap *soap, struct __ns1__UploadForeignLyric *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__UploadForeignLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__UploadForeignLyric * SOAP_FMAC2 soap_instantiate___ns1__UploadForeignLyric(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__UploadForeignLyric(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__UploadForeignLyric, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__UploadForeignLyric);
		if (size)
			*size = sizeof(struct __ns1__UploadForeignLyric);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__UploadForeignLyric, n);
		if (size)
			*size = n * sizeof(struct __ns1__UploadForeignLyric);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__UploadForeignLyric*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__UploadForeignLyric(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__UploadForeignLyric %p -> %p\n", q, p));
	*(struct __ns1__UploadForeignLyric*)p = *(struct __ns1__UploadForeignLyric*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetBroadcastingList2(struct soap *soap, struct __ns1__GetBroadcastingList2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetBroadcastingList2 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetBroadcastingList2(struct soap *soap, const struct __ns1__GetBroadcastingList2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetBroadcastingList2(soap, &a->ns1__GetBroadcastingList2);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetBroadcastingList2(struct soap *soap, const char *tag, int id, const struct __ns1__GetBroadcastingList2 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetBroadcastingList2(soap, "ns1:GetBroadcastingList2", -1, &a->ns1__GetBroadcastingList2, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetBroadcastingList2 * SOAP_FMAC4 soap_in___ns1__GetBroadcastingList2(struct soap *soap, const char *tag, struct __ns1__GetBroadcastingList2 *a, const char *type)
{
	size_t soap_flag_ns1__GetBroadcastingList2 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetBroadcastingList2 *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetBroadcastingList2, sizeof(struct __ns1__GetBroadcastingList2), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetBroadcastingList2(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetBroadcastingList2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetBroadcastingList2(soap, "ns1:GetBroadcastingList2", &a->ns1__GetBroadcastingList2, ""))
				{	soap_flag_ns1__GetBroadcastingList2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetBroadcastingList2(struct soap *soap, const struct __ns1__GetBroadcastingList2 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetBroadcastingList2(soap, tag?tag:"-ns1:GetBroadcastingList2", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetBroadcastingList2 * SOAP_FMAC4 soap_get___ns1__GetBroadcastingList2(struct soap *soap, struct __ns1__GetBroadcastingList2 *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetBroadcastingList2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetBroadcastingList2 * SOAP_FMAC2 soap_instantiate___ns1__GetBroadcastingList2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetBroadcastingList2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetBroadcastingList2, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetBroadcastingList2);
		if (size)
			*size = sizeof(struct __ns1__GetBroadcastingList2);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetBroadcastingList2, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetBroadcastingList2);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetBroadcastingList2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetBroadcastingList2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetBroadcastingList2 %p -> %p\n", q, p));
	*(struct __ns1__GetBroadcastingList2*)p = *(struct __ns1__GetBroadcastingList2*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetBroadcastingList(struct soap *soap, struct __ns1__GetBroadcastingList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetBroadcastingList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetBroadcastingList(struct soap *soap, const struct __ns1__GetBroadcastingList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetBroadcastingList(soap, &a->ns1__GetBroadcastingList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetBroadcastingList(struct soap *soap, const char *tag, int id, const struct __ns1__GetBroadcastingList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetBroadcastingList(soap, "ns1:GetBroadcastingList", -1, &a->ns1__GetBroadcastingList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetBroadcastingList * SOAP_FMAC4 soap_in___ns1__GetBroadcastingList(struct soap *soap, const char *tag, struct __ns1__GetBroadcastingList *a, const char *type)
{
	size_t soap_flag_ns1__GetBroadcastingList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetBroadcastingList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetBroadcastingList, sizeof(struct __ns1__GetBroadcastingList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetBroadcastingList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetBroadcastingList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetBroadcastingList(soap, "ns1:GetBroadcastingList", &a->ns1__GetBroadcastingList, ""))
				{	soap_flag_ns1__GetBroadcastingList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetBroadcastingList(struct soap *soap, const struct __ns1__GetBroadcastingList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetBroadcastingList(soap, tag?tag:"-ns1:GetBroadcastingList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetBroadcastingList * SOAP_FMAC4 soap_get___ns1__GetBroadcastingList(struct soap *soap, struct __ns1__GetBroadcastingList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetBroadcastingList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetBroadcastingList * SOAP_FMAC2 soap_instantiate___ns1__GetBroadcastingList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetBroadcastingList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetBroadcastingList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetBroadcastingList);
		if (size)
			*size = sizeof(struct __ns1__GetBroadcastingList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetBroadcastingList, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetBroadcastingList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetBroadcastingList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetBroadcastingList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetBroadcastingList %p -> %p\n", q, p));
	*(struct __ns1__GetBroadcastingList*)p = *(struct __ns1__GetBroadcastingList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CastGetExMetaDataList3(struct soap *soap, struct __ns1__CastGetExMetaDataList3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CastGetExMetaDataList3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CastGetExMetaDataList3(struct soap *soap, const struct __ns1__CastGetExMetaDataList3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CastGetExMetaDataList3(soap, &a->ns1__CastGetExMetaDataList3);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CastGetExMetaDataList3(struct soap *soap, const char *tag, int id, const struct __ns1__CastGetExMetaDataList3 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__CastGetExMetaDataList3(soap, "ns1:CastGetExMetaDataList3", -1, &a->ns1__CastGetExMetaDataList3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastGetExMetaDataList3 * SOAP_FMAC4 soap_in___ns1__CastGetExMetaDataList3(struct soap *soap, const char *tag, struct __ns1__CastGetExMetaDataList3 *a, const char *type)
{
	size_t soap_flag_ns1__CastGetExMetaDataList3 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__CastGetExMetaDataList3 *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CastGetExMetaDataList3, sizeof(struct __ns1__CastGetExMetaDataList3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CastGetExMetaDataList3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CastGetExMetaDataList3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CastGetExMetaDataList3(soap, "ns1:CastGetExMetaDataList3", &a->ns1__CastGetExMetaDataList3, ""))
				{	soap_flag_ns1__CastGetExMetaDataList3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CastGetExMetaDataList3(struct soap *soap, const struct __ns1__CastGetExMetaDataList3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CastGetExMetaDataList3(soap, tag?tag:"-ns1:CastGetExMetaDataList3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastGetExMetaDataList3 * SOAP_FMAC4 soap_get___ns1__CastGetExMetaDataList3(struct soap *soap, struct __ns1__CastGetExMetaDataList3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CastGetExMetaDataList3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CastGetExMetaDataList3 * SOAP_FMAC2 soap_instantiate___ns1__CastGetExMetaDataList3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CastGetExMetaDataList3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CastGetExMetaDataList3, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CastGetExMetaDataList3);
		if (size)
			*size = sizeof(struct __ns1__CastGetExMetaDataList3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CastGetExMetaDataList3, n);
		if (size)
			*size = n * sizeof(struct __ns1__CastGetExMetaDataList3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CastGetExMetaDataList3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CastGetExMetaDataList3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CastGetExMetaDataList3 %p -> %p\n", q, p));
	*(struct __ns1__CastGetExMetaDataList3*)p = *(struct __ns1__CastGetExMetaDataList3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CastGetExMetaDataList2(struct soap *soap, struct __ns1__CastGetExMetaDataList2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CastGetExMetaDataList2 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CastGetExMetaDataList2(struct soap *soap, const struct __ns1__CastGetExMetaDataList2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CastGetExMetaDataList2(soap, &a->ns1__CastGetExMetaDataList2);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CastGetExMetaDataList2(struct soap *soap, const char *tag, int id, const struct __ns1__CastGetExMetaDataList2 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__CastGetExMetaDataList2(soap, "ns1:CastGetExMetaDataList2", -1, &a->ns1__CastGetExMetaDataList2, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastGetExMetaDataList2 * SOAP_FMAC4 soap_in___ns1__CastGetExMetaDataList2(struct soap *soap, const char *tag, struct __ns1__CastGetExMetaDataList2 *a, const char *type)
{
	size_t soap_flag_ns1__CastGetExMetaDataList2 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__CastGetExMetaDataList2 *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CastGetExMetaDataList2, sizeof(struct __ns1__CastGetExMetaDataList2), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CastGetExMetaDataList2(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CastGetExMetaDataList2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CastGetExMetaDataList2(soap, "ns1:CastGetExMetaDataList2", &a->ns1__CastGetExMetaDataList2, ""))
				{	soap_flag_ns1__CastGetExMetaDataList2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CastGetExMetaDataList2(struct soap *soap, const struct __ns1__CastGetExMetaDataList2 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CastGetExMetaDataList2(soap, tag?tag:"-ns1:CastGetExMetaDataList2", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastGetExMetaDataList2 * SOAP_FMAC4 soap_get___ns1__CastGetExMetaDataList2(struct soap *soap, struct __ns1__CastGetExMetaDataList2 *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CastGetExMetaDataList2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CastGetExMetaDataList2 * SOAP_FMAC2 soap_instantiate___ns1__CastGetExMetaDataList2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CastGetExMetaDataList2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CastGetExMetaDataList2, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CastGetExMetaDataList2);
		if (size)
			*size = sizeof(struct __ns1__CastGetExMetaDataList2);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CastGetExMetaDataList2, n);
		if (size)
			*size = n * sizeof(struct __ns1__CastGetExMetaDataList2);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CastGetExMetaDataList2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CastGetExMetaDataList2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CastGetExMetaDataList2 %p -> %p\n", q, p));
	*(struct __ns1__CastGetExMetaDataList2*)p = *(struct __ns1__CastGetExMetaDataList2*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CastGetExMetaDataList(struct soap *soap, struct __ns1__CastGetExMetaDataList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CastGetExMetaDataList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CastGetExMetaDataList(struct soap *soap, const struct __ns1__CastGetExMetaDataList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CastGetExMetaDataList(soap, &a->ns1__CastGetExMetaDataList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CastGetExMetaDataList(struct soap *soap, const char *tag, int id, const struct __ns1__CastGetExMetaDataList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__CastGetExMetaDataList(soap, "ns1:CastGetExMetaDataList", -1, &a->ns1__CastGetExMetaDataList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastGetExMetaDataList * SOAP_FMAC4 soap_in___ns1__CastGetExMetaDataList(struct soap *soap, const char *tag, struct __ns1__CastGetExMetaDataList *a, const char *type)
{
	size_t soap_flag_ns1__CastGetExMetaDataList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__CastGetExMetaDataList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CastGetExMetaDataList, sizeof(struct __ns1__CastGetExMetaDataList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CastGetExMetaDataList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CastGetExMetaDataList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CastGetExMetaDataList(soap, "ns1:CastGetExMetaDataList", &a->ns1__CastGetExMetaDataList, ""))
				{	soap_flag_ns1__CastGetExMetaDataList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CastGetExMetaDataList(struct soap *soap, const struct __ns1__CastGetExMetaDataList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CastGetExMetaDataList(soap, tag?tag:"-ns1:CastGetExMetaDataList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastGetExMetaDataList * SOAP_FMAC4 soap_get___ns1__CastGetExMetaDataList(struct soap *soap, struct __ns1__CastGetExMetaDataList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CastGetExMetaDataList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CastGetExMetaDataList * SOAP_FMAC2 soap_instantiate___ns1__CastGetExMetaDataList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CastGetExMetaDataList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CastGetExMetaDataList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CastGetExMetaDataList);
		if (size)
			*size = sizeof(struct __ns1__CastGetExMetaDataList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CastGetExMetaDataList, n);
		if (size)
			*size = n * sizeof(struct __ns1__CastGetExMetaDataList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CastGetExMetaDataList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CastGetExMetaDataList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CastGetExMetaDataList %p -> %p\n", q, p));
	*(struct __ns1__CastGetExMetaDataList*)p = *(struct __ns1__CastGetExMetaDataList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CastGetExMetaData(struct soap *soap, struct __ns1__CastGetExMetaData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CastGetExMetaData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CastGetExMetaData(struct soap *soap, const struct __ns1__CastGetExMetaData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CastGetExMetaData(soap, &a->ns1__CastGetExMetaData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CastGetExMetaData(struct soap *soap, const char *tag, int id, const struct __ns1__CastGetExMetaData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__CastGetExMetaData(soap, "ns1:CastGetExMetaData", -1, &a->ns1__CastGetExMetaData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastGetExMetaData * SOAP_FMAC4 soap_in___ns1__CastGetExMetaData(struct soap *soap, const char *tag, struct __ns1__CastGetExMetaData *a, const char *type)
{
	size_t soap_flag_ns1__CastGetExMetaData = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__CastGetExMetaData *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CastGetExMetaData, sizeof(struct __ns1__CastGetExMetaData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CastGetExMetaData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CastGetExMetaData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CastGetExMetaData(soap, "ns1:CastGetExMetaData", &a->ns1__CastGetExMetaData, ""))
				{	soap_flag_ns1__CastGetExMetaData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CastGetExMetaData(struct soap *soap, const struct __ns1__CastGetExMetaData *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CastGetExMetaData(soap, tag?tag:"-ns1:CastGetExMetaData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastGetExMetaData * SOAP_FMAC4 soap_get___ns1__CastGetExMetaData(struct soap *soap, struct __ns1__CastGetExMetaData *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CastGetExMetaData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CastGetExMetaData * SOAP_FMAC2 soap_instantiate___ns1__CastGetExMetaData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CastGetExMetaData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CastGetExMetaData, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CastGetExMetaData);
		if (size)
			*size = sizeof(struct __ns1__CastGetExMetaData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CastGetExMetaData, n);
		if (size)
			*size = n * sizeof(struct __ns1__CastGetExMetaData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CastGetExMetaData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CastGetExMetaData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CastGetExMetaData %p -> %p\n", q, p));
	*(struct __ns1__CastGetExMetaData*)p = *(struct __ns1__CastGetExMetaData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CastRemoveExMetaData(struct soap *soap, struct __ns1__CastRemoveExMetaData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CastRemoveExMetaData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CastRemoveExMetaData(struct soap *soap, const struct __ns1__CastRemoveExMetaData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CastRemoveExMetaData(soap, &a->ns1__CastRemoveExMetaData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CastRemoveExMetaData(struct soap *soap, const char *tag, int id, const struct __ns1__CastRemoveExMetaData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__CastRemoveExMetaData(soap, "ns1:CastRemoveExMetaData", -1, &a->ns1__CastRemoveExMetaData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastRemoveExMetaData * SOAP_FMAC4 soap_in___ns1__CastRemoveExMetaData(struct soap *soap, const char *tag, struct __ns1__CastRemoveExMetaData *a, const char *type)
{
	size_t soap_flag_ns1__CastRemoveExMetaData = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__CastRemoveExMetaData *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CastRemoveExMetaData, sizeof(struct __ns1__CastRemoveExMetaData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CastRemoveExMetaData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CastRemoveExMetaData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CastRemoveExMetaData(soap, "ns1:CastRemoveExMetaData", &a->ns1__CastRemoveExMetaData, ""))
				{	soap_flag_ns1__CastRemoveExMetaData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CastRemoveExMetaData(struct soap *soap, const struct __ns1__CastRemoveExMetaData *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CastRemoveExMetaData(soap, tag?tag:"-ns1:CastRemoveExMetaData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastRemoveExMetaData * SOAP_FMAC4 soap_get___ns1__CastRemoveExMetaData(struct soap *soap, struct __ns1__CastRemoveExMetaData *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CastRemoveExMetaData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CastRemoveExMetaData * SOAP_FMAC2 soap_instantiate___ns1__CastRemoveExMetaData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CastRemoveExMetaData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CastRemoveExMetaData, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CastRemoveExMetaData);
		if (size)
			*size = sizeof(struct __ns1__CastRemoveExMetaData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CastRemoveExMetaData, n);
		if (size)
			*size = n * sizeof(struct __ns1__CastRemoveExMetaData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CastRemoveExMetaData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CastRemoveExMetaData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CastRemoveExMetaData %p -> %p\n", q, p));
	*(struct __ns1__CastRemoveExMetaData*)p = *(struct __ns1__CastRemoveExMetaData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CastUploadExMetaData3(struct soap *soap, struct __ns1__CastUploadExMetaData3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CastUploadExMetaData3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CastUploadExMetaData3(struct soap *soap, const struct __ns1__CastUploadExMetaData3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CastUploadExMetaData3(soap, &a->ns1__CastUploadExMetaData3);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CastUploadExMetaData3(struct soap *soap, const char *tag, int id, const struct __ns1__CastUploadExMetaData3 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__CastUploadExMetaData3(soap, "ns1:CastUploadExMetaData3", -1, &a->ns1__CastUploadExMetaData3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastUploadExMetaData3 * SOAP_FMAC4 soap_in___ns1__CastUploadExMetaData3(struct soap *soap, const char *tag, struct __ns1__CastUploadExMetaData3 *a, const char *type)
{
	size_t soap_flag_ns1__CastUploadExMetaData3 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__CastUploadExMetaData3 *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CastUploadExMetaData3, sizeof(struct __ns1__CastUploadExMetaData3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CastUploadExMetaData3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CastUploadExMetaData3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CastUploadExMetaData3(soap, "ns1:CastUploadExMetaData3", &a->ns1__CastUploadExMetaData3, ""))
				{	soap_flag_ns1__CastUploadExMetaData3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CastUploadExMetaData3(struct soap *soap, const struct __ns1__CastUploadExMetaData3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CastUploadExMetaData3(soap, tag?tag:"-ns1:CastUploadExMetaData3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastUploadExMetaData3 * SOAP_FMAC4 soap_get___ns1__CastUploadExMetaData3(struct soap *soap, struct __ns1__CastUploadExMetaData3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CastUploadExMetaData3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CastUploadExMetaData3 * SOAP_FMAC2 soap_instantiate___ns1__CastUploadExMetaData3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CastUploadExMetaData3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CastUploadExMetaData3, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CastUploadExMetaData3);
		if (size)
			*size = sizeof(struct __ns1__CastUploadExMetaData3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CastUploadExMetaData3, n);
		if (size)
			*size = n * sizeof(struct __ns1__CastUploadExMetaData3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CastUploadExMetaData3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CastUploadExMetaData3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CastUploadExMetaData3 %p -> %p\n", q, p));
	*(struct __ns1__CastUploadExMetaData3*)p = *(struct __ns1__CastUploadExMetaData3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CastUploadExMetaData2(struct soap *soap, struct __ns1__CastUploadExMetaData2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CastUploadExMetaData2 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CastUploadExMetaData2(struct soap *soap, const struct __ns1__CastUploadExMetaData2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CastUploadExMetaData2(soap, &a->ns1__CastUploadExMetaData2);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CastUploadExMetaData2(struct soap *soap, const char *tag, int id, const struct __ns1__CastUploadExMetaData2 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__CastUploadExMetaData2(soap, "ns1:CastUploadExMetaData2", -1, &a->ns1__CastUploadExMetaData2, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastUploadExMetaData2 * SOAP_FMAC4 soap_in___ns1__CastUploadExMetaData2(struct soap *soap, const char *tag, struct __ns1__CastUploadExMetaData2 *a, const char *type)
{
	size_t soap_flag_ns1__CastUploadExMetaData2 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__CastUploadExMetaData2 *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CastUploadExMetaData2, sizeof(struct __ns1__CastUploadExMetaData2), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CastUploadExMetaData2(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CastUploadExMetaData2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CastUploadExMetaData2(soap, "ns1:CastUploadExMetaData2", &a->ns1__CastUploadExMetaData2, ""))
				{	soap_flag_ns1__CastUploadExMetaData2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CastUploadExMetaData2(struct soap *soap, const struct __ns1__CastUploadExMetaData2 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CastUploadExMetaData2(soap, tag?tag:"-ns1:CastUploadExMetaData2", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastUploadExMetaData2 * SOAP_FMAC4 soap_get___ns1__CastUploadExMetaData2(struct soap *soap, struct __ns1__CastUploadExMetaData2 *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CastUploadExMetaData2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CastUploadExMetaData2 * SOAP_FMAC2 soap_instantiate___ns1__CastUploadExMetaData2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CastUploadExMetaData2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CastUploadExMetaData2, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CastUploadExMetaData2);
		if (size)
			*size = sizeof(struct __ns1__CastUploadExMetaData2);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CastUploadExMetaData2, n);
		if (size)
			*size = n * sizeof(struct __ns1__CastUploadExMetaData2);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CastUploadExMetaData2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CastUploadExMetaData2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CastUploadExMetaData2 %p -> %p\n", q, p));
	*(struct __ns1__CastUploadExMetaData2*)p = *(struct __ns1__CastUploadExMetaData2*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CastUploadExMetaData(struct soap *soap, struct __ns1__CastUploadExMetaData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CastUploadExMetaData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CastUploadExMetaData(struct soap *soap, const struct __ns1__CastUploadExMetaData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CastUploadExMetaData(soap, &a->ns1__CastUploadExMetaData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CastUploadExMetaData(struct soap *soap, const char *tag, int id, const struct __ns1__CastUploadExMetaData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__CastUploadExMetaData(soap, "ns1:CastUploadExMetaData", -1, &a->ns1__CastUploadExMetaData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastUploadExMetaData * SOAP_FMAC4 soap_in___ns1__CastUploadExMetaData(struct soap *soap, const char *tag, struct __ns1__CastUploadExMetaData *a, const char *type)
{
	size_t soap_flag_ns1__CastUploadExMetaData = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__CastUploadExMetaData *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CastUploadExMetaData, sizeof(struct __ns1__CastUploadExMetaData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CastUploadExMetaData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CastUploadExMetaData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CastUploadExMetaData(soap, "ns1:CastUploadExMetaData", &a->ns1__CastUploadExMetaData, ""))
				{	soap_flag_ns1__CastUploadExMetaData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CastUploadExMetaData(struct soap *soap, const struct __ns1__CastUploadExMetaData *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CastUploadExMetaData(soap, tag?tag:"-ns1:CastUploadExMetaData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CastUploadExMetaData * SOAP_FMAC4 soap_get___ns1__CastUploadExMetaData(struct soap *soap, struct __ns1__CastUploadExMetaData *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CastUploadExMetaData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CastUploadExMetaData * SOAP_FMAC2 soap_instantiate___ns1__CastUploadExMetaData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CastUploadExMetaData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CastUploadExMetaData, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CastUploadExMetaData);
		if (size)
			*size = sizeof(struct __ns1__CastUploadExMetaData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__CastUploadExMetaData, n);
		if (size)
			*size = n * sizeof(struct __ns1__CastUploadExMetaData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__CastUploadExMetaData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CastUploadExMetaData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CastUploadExMetaData %p -> %p\n", q, p));
	*(struct __ns1__CastUploadExMetaData*)p = *(struct __ns1__CastUploadExMetaData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetAlbaStatistic(struct soap *soap, struct __ns1__AdminGetAlbaStatistic *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetAlbaStatistic = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetAlbaStatistic(struct soap *soap, const struct __ns1__AdminGetAlbaStatistic *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetAlbaStatistic(soap, &a->ns1__AdminGetAlbaStatistic);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetAlbaStatistic(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetAlbaStatistic *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetAlbaStatistic(soap, "ns1:AdminGetAlbaStatistic", -1, &a->ns1__AdminGetAlbaStatistic, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetAlbaStatistic * SOAP_FMAC4 soap_in___ns1__AdminGetAlbaStatistic(struct soap *soap, const char *tag, struct __ns1__AdminGetAlbaStatistic *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetAlbaStatistic = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetAlbaStatistic *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetAlbaStatistic, sizeof(struct __ns1__AdminGetAlbaStatistic), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetAlbaStatistic(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetAlbaStatistic && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetAlbaStatistic(soap, "ns1:AdminGetAlbaStatistic", &a->ns1__AdminGetAlbaStatistic, ""))
				{	soap_flag_ns1__AdminGetAlbaStatistic--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetAlbaStatistic(struct soap *soap, const struct __ns1__AdminGetAlbaStatistic *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetAlbaStatistic(soap, tag?tag:"-ns1:AdminGetAlbaStatistic", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetAlbaStatistic * SOAP_FMAC4 soap_get___ns1__AdminGetAlbaStatistic(struct soap *soap, struct __ns1__AdminGetAlbaStatistic *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetAlbaStatistic(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetAlbaStatistic * SOAP_FMAC2 soap_instantiate___ns1__AdminGetAlbaStatistic(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetAlbaStatistic(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetAlbaStatistic, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetAlbaStatistic);
		if (size)
			*size = sizeof(struct __ns1__AdminGetAlbaStatistic);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetAlbaStatistic, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetAlbaStatistic);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetAlbaStatistic*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetAlbaStatistic(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetAlbaStatistic %p -> %p\n", q, p));
	*(struct __ns1__AdminGetAlbaStatistic*)p = *(struct __ns1__AdminGetAlbaStatistic*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetCountReport(struct soap *soap, struct __ns1__AdminGetCountReport *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetCountReport = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetCountReport(struct soap *soap, const struct __ns1__AdminGetCountReport *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetCountReport(soap, &a->ns1__AdminGetCountReport);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetCountReport(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetCountReport *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetCountReport(soap, "ns1:AdminGetCountReport", -1, &a->ns1__AdminGetCountReport, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountReport * SOAP_FMAC4 soap_in___ns1__AdminGetCountReport(struct soap *soap, const char *tag, struct __ns1__AdminGetCountReport *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetCountReport = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetCountReport *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetCountReport, sizeof(struct __ns1__AdminGetCountReport), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetCountReport(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetCountReport && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetCountReport(soap, "ns1:AdminGetCountReport", &a->ns1__AdminGetCountReport, ""))
				{	soap_flag_ns1__AdminGetCountReport--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetCountReport(struct soap *soap, const struct __ns1__AdminGetCountReport *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetCountReport(soap, tag?tag:"-ns1:AdminGetCountReport", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountReport * SOAP_FMAC4 soap_get___ns1__AdminGetCountReport(struct soap *soap, struct __ns1__AdminGetCountReport *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetCountReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetCountReport * SOAP_FMAC2 soap_instantiate___ns1__AdminGetCountReport(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetCountReport(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetCountReport, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetCountReport);
		if (size)
			*size = sizeof(struct __ns1__AdminGetCountReport);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetCountReport, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetCountReport);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetCountReport*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetCountReport(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetCountReport %p -> %p\n", q, p));
	*(struct __ns1__AdminGetCountReport*)p = *(struct __ns1__AdminGetCountReport*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetCountModify(struct soap *soap, struct __ns1__AdminGetCountModify *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetCountModify = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetCountModify(struct soap *soap, const struct __ns1__AdminGetCountModify *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetCountModify(soap, &a->ns1__AdminGetCountModify);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetCountModify(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetCountModify *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetCountModify(soap, "ns1:AdminGetCountModify", -1, &a->ns1__AdminGetCountModify, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountModify * SOAP_FMAC4 soap_in___ns1__AdminGetCountModify(struct soap *soap, const char *tag, struct __ns1__AdminGetCountModify *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetCountModify = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetCountModify *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetCountModify, sizeof(struct __ns1__AdminGetCountModify), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetCountModify(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetCountModify && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetCountModify(soap, "ns1:AdminGetCountModify", &a->ns1__AdminGetCountModify, ""))
				{	soap_flag_ns1__AdminGetCountModify--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetCountModify(struct soap *soap, const struct __ns1__AdminGetCountModify *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetCountModify(soap, tag?tag:"-ns1:AdminGetCountModify", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountModify * SOAP_FMAC4 soap_get___ns1__AdminGetCountModify(struct soap *soap, struct __ns1__AdminGetCountModify *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetCountModify(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetCountModify * SOAP_FMAC2 soap_instantiate___ns1__AdminGetCountModify(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetCountModify(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetCountModify, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetCountModify);
		if (size)
			*size = sizeof(struct __ns1__AdminGetCountModify);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetCountModify, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetCountModify);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetCountModify*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetCountModify(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetCountModify %p -> %p\n", q, p));
	*(struct __ns1__AdminGetCountModify*)p = *(struct __ns1__AdminGetCountModify*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetCountLyric(struct soap *soap, struct __ns1__AdminGetCountLyric *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetCountLyric = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetCountLyric(struct soap *soap, const struct __ns1__AdminGetCountLyric *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetCountLyric(soap, &a->ns1__AdminGetCountLyric);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetCountLyric(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetCountLyric *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetCountLyric(soap, "ns1:AdminGetCountLyric", -1, &a->ns1__AdminGetCountLyric, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountLyric * SOAP_FMAC4 soap_in___ns1__AdminGetCountLyric(struct soap *soap, const char *tag, struct __ns1__AdminGetCountLyric *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetCountLyric = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetCountLyric *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetCountLyric, sizeof(struct __ns1__AdminGetCountLyric), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetCountLyric(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetCountLyric && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetCountLyric(soap, "ns1:AdminGetCountLyric", &a->ns1__AdminGetCountLyric, ""))
				{	soap_flag_ns1__AdminGetCountLyric--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetCountLyric(struct soap *soap, const struct __ns1__AdminGetCountLyric *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetCountLyric(soap, tag?tag:"-ns1:AdminGetCountLyric", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountLyric * SOAP_FMAC4 soap_get___ns1__AdminGetCountLyric(struct soap *soap, struct __ns1__AdminGetCountLyric *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetCountLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetCountLyric * SOAP_FMAC2 soap_instantiate___ns1__AdminGetCountLyric(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetCountLyric(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetCountLyric, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetCountLyric);
		if (size)
			*size = sizeof(struct __ns1__AdminGetCountLyric);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetCountLyric, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetCountLyric);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetCountLyric*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetCountLyric(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetCountLyric %p -> %p\n", q, p));
	*(struct __ns1__AdminGetCountLyric*)p = *(struct __ns1__AdminGetCountLyric*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetCountChecksum(struct soap *soap, struct __ns1__AdminGetCountChecksum *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetCountChecksum = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetCountChecksum(struct soap *soap, const struct __ns1__AdminGetCountChecksum *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetCountChecksum(soap, &a->ns1__AdminGetCountChecksum);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetCountChecksum(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetCountChecksum *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetCountChecksum(soap, "ns1:AdminGetCountChecksum", -1, &a->ns1__AdminGetCountChecksum, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountChecksum * SOAP_FMAC4 soap_in___ns1__AdminGetCountChecksum(struct soap *soap, const char *tag, struct __ns1__AdminGetCountChecksum *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetCountChecksum = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetCountChecksum *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetCountChecksum, sizeof(struct __ns1__AdminGetCountChecksum), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetCountChecksum(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetCountChecksum && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetCountChecksum(soap, "ns1:AdminGetCountChecksum", &a->ns1__AdminGetCountChecksum, ""))
				{	soap_flag_ns1__AdminGetCountChecksum--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetCountChecksum(struct soap *soap, const struct __ns1__AdminGetCountChecksum *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetCountChecksum(soap, tag?tag:"-ns1:AdminGetCountChecksum", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountChecksum * SOAP_FMAC4 soap_get___ns1__AdminGetCountChecksum(struct soap *soap, struct __ns1__AdminGetCountChecksum *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetCountChecksum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetCountChecksum * SOAP_FMAC2 soap_instantiate___ns1__AdminGetCountChecksum(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetCountChecksum(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetCountChecksum, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetCountChecksum);
		if (size)
			*size = sizeof(struct __ns1__AdminGetCountChecksum);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetCountChecksum, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetCountChecksum);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetCountChecksum*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetCountChecksum(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetCountChecksum %p -> %p\n", q, p));
	*(struct __ns1__AdminGetCountChecksum*)p = *(struct __ns1__AdminGetCountChecksum*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetCountInRegister(struct soap *soap, struct __ns1__AdminGetCountInRegister *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetCountInRegister = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetCountInRegister(struct soap *soap, const struct __ns1__AdminGetCountInRegister *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetCountInRegister(soap, &a->ns1__AdminGetCountInRegister);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetCountInRegister(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetCountInRegister *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetCountInRegister(soap, "ns1:AdminGetCountInRegister", -1, &a->ns1__AdminGetCountInRegister, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountInRegister * SOAP_FMAC4 soap_in___ns1__AdminGetCountInRegister(struct soap *soap, const char *tag, struct __ns1__AdminGetCountInRegister *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetCountInRegister = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetCountInRegister *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetCountInRegister, sizeof(struct __ns1__AdminGetCountInRegister), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetCountInRegister(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetCountInRegister && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetCountInRegister(soap, "ns1:AdminGetCountInRegister", &a->ns1__AdminGetCountInRegister, ""))
				{	soap_flag_ns1__AdminGetCountInRegister--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetCountInRegister(struct soap *soap, const struct __ns1__AdminGetCountInRegister *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetCountInRegister(soap, tag?tag:"-ns1:AdminGetCountInRegister", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetCountInRegister * SOAP_FMAC4 soap_get___ns1__AdminGetCountInRegister(struct soap *soap, struct __ns1__AdminGetCountInRegister *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetCountInRegister(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetCountInRegister * SOAP_FMAC2 soap_instantiate___ns1__AdminGetCountInRegister(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetCountInRegister(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetCountInRegister, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetCountInRegister);
		if (size)
			*size = sizeof(struct __ns1__AdminGetCountInRegister);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetCountInRegister, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetCountInRegister);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetCountInRegister*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetCountInRegister(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetCountInRegister %p -> %p\n", q, p));
	*(struct __ns1__AdminGetCountInRegister*)p = *(struct __ns1__AdminGetCountInRegister*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminReportBlackList(struct soap *soap, struct __ns1__AdminReportBlackList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminReportBlackList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminReportBlackList(struct soap *soap, const struct __ns1__AdminReportBlackList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminReportBlackList(soap, &a->ns1__AdminReportBlackList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminReportBlackList(struct soap *soap, const char *tag, int id, const struct __ns1__AdminReportBlackList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminReportBlackList(soap, "ns1:AdminReportBlackList", -1, &a->ns1__AdminReportBlackList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminReportBlackList * SOAP_FMAC4 soap_in___ns1__AdminReportBlackList(struct soap *soap, const char *tag, struct __ns1__AdminReportBlackList *a, const char *type)
{
	size_t soap_flag_ns1__AdminReportBlackList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminReportBlackList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminReportBlackList, sizeof(struct __ns1__AdminReportBlackList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminReportBlackList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminReportBlackList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminReportBlackList(soap, "ns1:AdminReportBlackList", &a->ns1__AdminReportBlackList, ""))
				{	soap_flag_ns1__AdminReportBlackList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminReportBlackList(struct soap *soap, const struct __ns1__AdminReportBlackList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminReportBlackList(soap, tag?tag:"-ns1:AdminReportBlackList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminReportBlackList * SOAP_FMAC4 soap_get___ns1__AdminReportBlackList(struct soap *soap, struct __ns1__AdminReportBlackList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminReportBlackList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminReportBlackList * SOAP_FMAC2 soap_instantiate___ns1__AdminReportBlackList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminReportBlackList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminReportBlackList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminReportBlackList);
		if (size)
			*size = sizeof(struct __ns1__AdminReportBlackList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminReportBlackList, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminReportBlackList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminReportBlackList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminReportBlackList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminReportBlackList %p -> %p\n", q, p));
	*(struct __ns1__AdminReportBlackList*)p = *(struct __ns1__AdminReportBlackList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminAdmitModifyLyric(struct soap *soap, struct __ns1__AdminAdmitModifyLyric *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminAdmitModifyLyric = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminAdmitModifyLyric(struct soap *soap, const struct __ns1__AdminAdmitModifyLyric *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminAdmitModifyLyric(soap, &a->ns1__AdminAdmitModifyLyric);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminAdmitModifyLyric(struct soap *soap, const char *tag, int id, const struct __ns1__AdminAdmitModifyLyric *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminAdmitModifyLyric(soap, "ns1:AdminAdmitModifyLyric", -1, &a->ns1__AdminAdmitModifyLyric, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminAdmitModifyLyric * SOAP_FMAC4 soap_in___ns1__AdminAdmitModifyLyric(struct soap *soap, const char *tag, struct __ns1__AdminAdmitModifyLyric *a, const char *type)
{
	size_t soap_flag_ns1__AdminAdmitModifyLyric = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminAdmitModifyLyric *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminAdmitModifyLyric, sizeof(struct __ns1__AdminAdmitModifyLyric), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminAdmitModifyLyric(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminAdmitModifyLyric && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminAdmitModifyLyric(soap, "ns1:AdminAdmitModifyLyric", &a->ns1__AdminAdmitModifyLyric, ""))
				{	soap_flag_ns1__AdminAdmitModifyLyric--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminAdmitModifyLyric(struct soap *soap, const struct __ns1__AdminAdmitModifyLyric *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminAdmitModifyLyric(soap, tag?tag:"-ns1:AdminAdmitModifyLyric", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminAdmitModifyLyric * SOAP_FMAC4 soap_get___ns1__AdminAdmitModifyLyric(struct soap *soap, struct __ns1__AdminAdmitModifyLyric *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminAdmitModifyLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminAdmitModifyLyric * SOAP_FMAC2 soap_instantiate___ns1__AdminAdmitModifyLyric(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminAdmitModifyLyric(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminAdmitModifyLyric, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminAdmitModifyLyric);
		if (size)
			*size = sizeof(struct __ns1__AdminAdmitModifyLyric);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminAdmitModifyLyric, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminAdmitModifyLyric);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminAdmitModifyLyric*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminAdmitModifyLyric(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminAdmitModifyLyric %p -> %p\n", q, p));
	*(struct __ns1__AdminAdmitModifyLyric*)p = *(struct __ns1__AdminAdmitModifyLyric*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminDeleteRecord(struct soap *soap, struct __ns1__AdminDeleteRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminDeleteRecord = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminDeleteRecord(struct soap *soap, const struct __ns1__AdminDeleteRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminDeleteRecord(soap, &a->ns1__AdminDeleteRecord);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminDeleteRecord(struct soap *soap, const char *tag, int id, const struct __ns1__AdminDeleteRecord *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminDeleteRecord(soap, "ns1:AdminDeleteRecord", -1, &a->ns1__AdminDeleteRecord, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminDeleteRecord * SOAP_FMAC4 soap_in___ns1__AdminDeleteRecord(struct soap *soap, const char *tag, struct __ns1__AdminDeleteRecord *a, const char *type)
{
	size_t soap_flag_ns1__AdminDeleteRecord = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminDeleteRecord *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminDeleteRecord, sizeof(struct __ns1__AdminDeleteRecord), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminDeleteRecord(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminDeleteRecord && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminDeleteRecord(soap, "ns1:AdminDeleteRecord", &a->ns1__AdminDeleteRecord, ""))
				{	soap_flag_ns1__AdminDeleteRecord--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminDeleteRecord(struct soap *soap, const struct __ns1__AdminDeleteRecord *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminDeleteRecord(soap, tag?tag:"-ns1:AdminDeleteRecord", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminDeleteRecord * SOAP_FMAC4 soap_get___ns1__AdminDeleteRecord(struct soap *soap, struct __ns1__AdminDeleteRecord *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminDeleteRecord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminDeleteRecord * SOAP_FMAC2 soap_instantiate___ns1__AdminDeleteRecord(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminDeleteRecord(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminDeleteRecord, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminDeleteRecord);
		if (size)
			*size = sizeof(struct __ns1__AdminDeleteRecord);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminDeleteRecord, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminDeleteRecord);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminDeleteRecord*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminDeleteRecord(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminDeleteRecord %p -> %p\n", q, p));
	*(struct __ns1__AdminDeleteRecord*)p = *(struct __ns1__AdminDeleteRecord*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MemberGetMemberLicenseList(struct soap *soap, struct __ns1__MemberGetMemberLicenseList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MemberGetMemberLicenseList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MemberGetMemberLicenseList(struct soap *soap, const struct __ns1__MemberGetMemberLicenseList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MemberGetMemberLicenseList(soap, &a->ns1__MemberGetMemberLicenseList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MemberGetMemberLicenseList(struct soap *soap, const char *tag, int id, const struct __ns1__MemberGetMemberLicenseList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MemberGetMemberLicenseList(soap, "ns1:MemberGetMemberLicenseList", -1, &a->ns1__MemberGetMemberLicenseList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberGetMemberLicenseList * SOAP_FMAC4 soap_in___ns1__MemberGetMemberLicenseList(struct soap *soap, const char *tag, struct __ns1__MemberGetMemberLicenseList *a, const char *type)
{
	size_t soap_flag_ns1__MemberGetMemberLicenseList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MemberGetMemberLicenseList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MemberGetMemberLicenseList, sizeof(struct __ns1__MemberGetMemberLicenseList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MemberGetMemberLicenseList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MemberGetMemberLicenseList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MemberGetMemberLicenseList(soap, "ns1:MemberGetMemberLicenseList", &a->ns1__MemberGetMemberLicenseList, ""))
				{	soap_flag_ns1__MemberGetMemberLicenseList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MemberGetMemberLicenseList(struct soap *soap, const struct __ns1__MemberGetMemberLicenseList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MemberGetMemberLicenseList(soap, tag?tag:"-ns1:MemberGetMemberLicenseList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberGetMemberLicenseList * SOAP_FMAC4 soap_get___ns1__MemberGetMemberLicenseList(struct soap *soap, struct __ns1__MemberGetMemberLicenseList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MemberGetMemberLicenseList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MemberGetMemberLicenseList * SOAP_FMAC2 soap_instantiate___ns1__MemberGetMemberLicenseList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MemberGetMemberLicenseList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MemberGetMemberLicenseList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MemberGetMemberLicenseList);
		if (size)
			*size = sizeof(struct __ns1__MemberGetMemberLicenseList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MemberGetMemberLicenseList, n);
		if (size)
			*size = n * sizeof(struct __ns1__MemberGetMemberLicenseList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MemberGetMemberLicenseList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MemberGetMemberLicenseList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MemberGetMemberLicenseList %p -> %p\n", q, p));
	*(struct __ns1__MemberGetMemberLicenseList*)p = *(struct __ns1__MemberGetMemberLicenseList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MemberGetMemberList(struct soap *soap, struct __ns1__MemberGetMemberList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MemberGetMemberList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MemberGetMemberList(struct soap *soap, const struct __ns1__MemberGetMemberList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MemberGetMemberList(soap, &a->ns1__MemberGetMemberList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MemberGetMemberList(struct soap *soap, const char *tag, int id, const struct __ns1__MemberGetMemberList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MemberGetMemberList(soap, "ns1:MemberGetMemberList", -1, &a->ns1__MemberGetMemberList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberGetMemberList * SOAP_FMAC4 soap_in___ns1__MemberGetMemberList(struct soap *soap, const char *tag, struct __ns1__MemberGetMemberList *a, const char *type)
{
	size_t soap_flag_ns1__MemberGetMemberList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MemberGetMemberList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MemberGetMemberList, sizeof(struct __ns1__MemberGetMemberList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MemberGetMemberList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MemberGetMemberList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MemberGetMemberList(soap, "ns1:MemberGetMemberList", &a->ns1__MemberGetMemberList, ""))
				{	soap_flag_ns1__MemberGetMemberList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MemberGetMemberList(struct soap *soap, const struct __ns1__MemberGetMemberList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MemberGetMemberList(soap, tag?tag:"-ns1:MemberGetMemberList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberGetMemberList * SOAP_FMAC4 soap_get___ns1__MemberGetMemberList(struct soap *soap, struct __ns1__MemberGetMemberList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MemberGetMemberList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MemberGetMemberList * SOAP_FMAC2 soap_instantiate___ns1__MemberGetMemberList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MemberGetMemberList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MemberGetMemberList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MemberGetMemberList);
		if (size)
			*size = sizeof(struct __ns1__MemberGetMemberList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MemberGetMemberList, n);
		if (size)
			*size = n * sizeof(struct __ns1__MemberGetMemberList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MemberGetMemberList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MemberGetMemberList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MemberGetMemberList %p -> %p\n", q, p));
	*(struct __ns1__MemberGetMemberList*)p = *(struct __ns1__MemberGetMemberList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MemberModifyMemberLicense(struct soap *soap, struct __ns1__MemberModifyMemberLicense *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MemberModifyMemberLicense = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MemberModifyMemberLicense(struct soap *soap, const struct __ns1__MemberModifyMemberLicense *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MemberModifyMemberLicense(soap, &a->ns1__MemberModifyMemberLicense);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MemberModifyMemberLicense(struct soap *soap, const char *tag, int id, const struct __ns1__MemberModifyMemberLicense *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MemberModifyMemberLicense(soap, "ns1:MemberModifyMemberLicense", -1, &a->ns1__MemberModifyMemberLicense, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberModifyMemberLicense * SOAP_FMAC4 soap_in___ns1__MemberModifyMemberLicense(struct soap *soap, const char *tag, struct __ns1__MemberModifyMemberLicense *a, const char *type)
{
	size_t soap_flag_ns1__MemberModifyMemberLicense = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MemberModifyMemberLicense *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MemberModifyMemberLicense, sizeof(struct __ns1__MemberModifyMemberLicense), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MemberModifyMemberLicense(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MemberModifyMemberLicense && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MemberModifyMemberLicense(soap, "ns1:MemberModifyMemberLicense", &a->ns1__MemberModifyMemberLicense, ""))
				{	soap_flag_ns1__MemberModifyMemberLicense--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MemberModifyMemberLicense(struct soap *soap, const struct __ns1__MemberModifyMemberLicense *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MemberModifyMemberLicense(soap, tag?tag:"-ns1:MemberModifyMemberLicense", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberModifyMemberLicense * SOAP_FMAC4 soap_get___ns1__MemberModifyMemberLicense(struct soap *soap, struct __ns1__MemberModifyMemberLicense *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MemberModifyMemberLicense(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MemberModifyMemberLicense * SOAP_FMAC2 soap_instantiate___ns1__MemberModifyMemberLicense(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MemberModifyMemberLicense(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MemberModifyMemberLicense, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MemberModifyMemberLicense);
		if (size)
			*size = sizeof(struct __ns1__MemberModifyMemberLicense);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MemberModifyMemberLicense, n);
		if (size)
			*size = n * sizeof(struct __ns1__MemberModifyMemberLicense);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MemberModifyMemberLicense*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MemberModifyMemberLicense(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MemberModifyMemberLicense %p -> %p\n", q, p));
	*(struct __ns1__MemberModifyMemberLicense*)p = *(struct __ns1__MemberModifyMemberLicense*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MemberApplyRegistration(struct soap *soap, struct __ns1__MemberApplyRegistration *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MemberApplyRegistration = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MemberApplyRegistration(struct soap *soap, const struct __ns1__MemberApplyRegistration *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MemberApplyRegistration(soap, &a->ns1__MemberApplyRegistration);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MemberApplyRegistration(struct soap *soap, const char *tag, int id, const struct __ns1__MemberApplyRegistration *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MemberApplyRegistration(soap, "ns1:MemberApplyRegistration", -1, &a->ns1__MemberApplyRegistration, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberApplyRegistration * SOAP_FMAC4 soap_in___ns1__MemberApplyRegistration(struct soap *soap, const char *tag, struct __ns1__MemberApplyRegistration *a, const char *type)
{
	size_t soap_flag_ns1__MemberApplyRegistration = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MemberApplyRegistration *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MemberApplyRegistration, sizeof(struct __ns1__MemberApplyRegistration), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MemberApplyRegistration(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MemberApplyRegistration && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MemberApplyRegistration(soap, "ns1:MemberApplyRegistration", &a->ns1__MemberApplyRegistration, ""))
				{	soap_flag_ns1__MemberApplyRegistration--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MemberApplyRegistration(struct soap *soap, const struct __ns1__MemberApplyRegistration *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MemberApplyRegistration(soap, tag?tag:"-ns1:MemberApplyRegistration", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberApplyRegistration * SOAP_FMAC4 soap_get___ns1__MemberApplyRegistration(struct soap *soap, struct __ns1__MemberApplyRegistration *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MemberApplyRegistration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MemberApplyRegistration * SOAP_FMAC2 soap_instantiate___ns1__MemberApplyRegistration(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MemberApplyRegistration(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MemberApplyRegistration, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MemberApplyRegistration);
		if (size)
			*size = sizeof(struct __ns1__MemberApplyRegistration);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MemberApplyRegistration, n);
		if (size)
			*size = n * sizeof(struct __ns1__MemberApplyRegistration);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MemberApplyRegistration*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MemberApplyRegistration(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MemberApplyRegistration %p -> %p\n", q, p));
	*(struct __ns1__MemberApplyRegistration*)p = *(struct __ns1__MemberApplyRegistration*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MemberLogout(struct soap *soap, struct __ns1__MemberLogout *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MemberLogout = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MemberLogout(struct soap *soap, const struct __ns1__MemberLogout *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MemberLogout(soap, &a->ns1__MemberLogout);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MemberLogout(struct soap *soap, const char *tag, int id, const struct __ns1__MemberLogout *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MemberLogout(soap, "ns1:MemberLogout", -1, &a->ns1__MemberLogout, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberLogout * SOAP_FMAC4 soap_in___ns1__MemberLogout(struct soap *soap, const char *tag, struct __ns1__MemberLogout *a, const char *type)
{
	size_t soap_flag_ns1__MemberLogout = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MemberLogout *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MemberLogout, sizeof(struct __ns1__MemberLogout), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MemberLogout(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MemberLogout && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MemberLogout(soap, "ns1:MemberLogout", &a->ns1__MemberLogout, ""))
				{	soap_flag_ns1__MemberLogout--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MemberLogout(struct soap *soap, const struct __ns1__MemberLogout *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MemberLogout(soap, tag?tag:"-ns1:MemberLogout", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberLogout * SOAP_FMAC4 soap_get___ns1__MemberLogout(struct soap *soap, struct __ns1__MemberLogout *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MemberLogout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MemberLogout * SOAP_FMAC2 soap_instantiate___ns1__MemberLogout(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MemberLogout(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MemberLogout, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MemberLogout);
		if (size)
			*size = sizeof(struct __ns1__MemberLogout);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MemberLogout, n);
		if (size)
			*size = n * sizeof(struct __ns1__MemberLogout);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MemberLogout*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MemberLogout(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MemberLogout %p -> %p\n", q, p));
	*(struct __ns1__MemberLogout*)p = *(struct __ns1__MemberLogout*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MemberLogin(struct soap *soap, struct __ns1__MemberLogin *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MemberLogin = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MemberLogin(struct soap *soap, const struct __ns1__MemberLogin *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MemberLogin(soap, &a->ns1__MemberLogin);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MemberLogin(struct soap *soap, const char *tag, int id, const struct __ns1__MemberLogin *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MemberLogin(soap, "ns1:MemberLogin", -1, &a->ns1__MemberLogin, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberLogin * SOAP_FMAC4 soap_in___ns1__MemberLogin(struct soap *soap, const char *tag, struct __ns1__MemberLogin *a, const char *type)
{
	size_t soap_flag_ns1__MemberLogin = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MemberLogin *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MemberLogin, sizeof(struct __ns1__MemberLogin), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MemberLogin(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MemberLogin && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MemberLogin(soap, "ns1:MemberLogin", &a->ns1__MemberLogin, ""))
				{	soap_flag_ns1__MemberLogin--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MemberLogin(struct soap *soap, const struct __ns1__MemberLogin *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MemberLogin(soap, tag?tag:"-ns1:MemberLogin", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberLogin * SOAP_FMAC4 soap_get___ns1__MemberLogin(struct soap *soap, struct __ns1__MemberLogin *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MemberLogin(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MemberLogin * SOAP_FMAC2 soap_instantiate___ns1__MemberLogin(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MemberLogin(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MemberLogin, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MemberLogin);
		if (size)
			*size = sizeof(struct __ns1__MemberLogin);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MemberLogin, n);
		if (size)
			*size = n * sizeof(struct __ns1__MemberLogin);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MemberLogin*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MemberLogin(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MemberLogin %p -> %p\n", q, p));
	*(struct __ns1__MemberLogin*)p = *(struct __ns1__MemberLogin*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MemberRemoveMember(struct soap *soap, struct __ns1__MemberRemoveMember *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MemberRemoveMember = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MemberRemoveMember(struct soap *soap, const struct __ns1__MemberRemoveMember *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MemberRemoveMember(soap, &a->ns1__MemberRemoveMember);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MemberRemoveMember(struct soap *soap, const char *tag, int id, const struct __ns1__MemberRemoveMember *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MemberRemoveMember(soap, "ns1:MemberRemoveMember", -1, &a->ns1__MemberRemoveMember, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberRemoveMember * SOAP_FMAC4 soap_in___ns1__MemberRemoveMember(struct soap *soap, const char *tag, struct __ns1__MemberRemoveMember *a, const char *type)
{
	size_t soap_flag_ns1__MemberRemoveMember = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MemberRemoveMember *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MemberRemoveMember, sizeof(struct __ns1__MemberRemoveMember), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MemberRemoveMember(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MemberRemoveMember && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MemberRemoveMember(soap, "ns1:MemberRemoveMember", &a->ns1__MemberRemoveMember, ""))
				{	soap_flag_ns1__MemberRemoveMember--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MemberRemoveMember(struct soap *soap, const struct __ns1__MemberRemoveMember *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MemberRemoveMember(soap, tag?tag:"-ns1:MemberRemoveMember", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberRemoveMember * SOAP_FMAC4 soap_get___ns1__MemberRemoveMember(struct soap *soap, struct __ns1__MemberRemoveMember *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MemberRemoveMember(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MemberRemoveMember * SOAP_FMAC2 soap_instantiate___ns1__MemberRemoveMember(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MemberRemoveMember(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MemberRemoveMember, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MemberRemoveMember);
		if (size)
			*size = sizeof(struct __ns1__MemberRemoveMember);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MemberRemoveMember, n);
		if (size)
			*size = n * sizeof(struct __ns1__MemberRemoveMember);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MemberRemoveMember*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MemberRemoveMember(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MemberRemoveMember %p -> %p\n", q, p));
	*(struct __ns1__MemberRemoveMember*)p = *(struct __ns1__MemberRemoveMember*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MemberModifyMember(struct soap *soap, struct __ns1__MemberModifyMember *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MemberModifyMember = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MemberModifyMember(struct soap *soap, const struct __ns1__MemberModifyMember *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MemberModifyMember(soap, &a->ns1__MemberModifyMember);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MemberModifyMember(struct soap *soap, const char *tag, int id, const struct __ns1__MemberModifyMember *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MemberModifyMember(soap, "ns1:MemberModifyMember", -1, &a->ns1__MemberModifyMember, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberModifyMember * SOAP_FMAC4 soap_in___ns1__MemberModifyMember(struct soap *soap, const char *tag, struct __ns1__MemberModifyMember *a, const char *type)
{
	size_t soap_flag_ns1__MemberModifyMember = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MemberModifyMember *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MemberModifyMember, sizeof(struct __ns1__MemberModifyMember), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MemberModifyMember(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MemberModifyMember && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MemberModifyMember(soap, "ns1:MemberModifyMember", &a->ns1__MemberModifyMember, ""))
				{	soap_flag_ns1__MemberModifyMember--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MemberModifyMember(struct soap *soap, const struct __ns1__MemberModifyMember *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MemberModifyMember(soap, tag?tag:"-ns1:MemberModifyMember", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberModifyMember * SOAP_FMAC4 soap_get___ns1__MemberModifyMember(struct soap *soap, struct __ns1__MemberModifyMember *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MemberModifyMember(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MemberModifyMember * SOAP_FMAC2 soap_instantiate___ns1__MemberModifyMember(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MemberModifyMember(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MemberModifyMember, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MemberModifyMember);
		if (size)
			*size = sizeof(struct __ns1__MemberModifyMember);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MemberModifyMember, n);
		if (size)
			*size = n * sizeof(struct __ns1__MemberModifyMember);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MemberModifyMember*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MemberModifyMember(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MemberModifyMember %p -> %p\n", q, p));
	*(struct __ns1__MemberModifyMember*)p = *(struct __ns1__MemberModifyMember*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MemberAddMember(struct soap *soap, struct __ns1__MemberAddMember *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MemberAddMember = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MemberAddMember(struct soap *soap, const struct __ns1__MemberAddMember *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MemberAddMember(soap, &a->ns1__MemberAddMember);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MemberAddMember(struct soap *soap, const char *tag, int id, const struct __ns1__MemberAddMember *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MemberAddMember(soap, "ns1:MemberAddMember", -1, &a->ns1__MemberAddMember, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberAddMember * SOAP_FMAC4 soap_in___ns1__MemberAddMember(struct soap *soap, const char *tag, struct __ns1__MemberAddMember *a, const char *type)
{
	size_t soap_flag_ns1__MemberAddMember = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MemberAddMember *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MemberAddMember, sizeof(struct __ns1__MemberAddMember), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MemberAddMember(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MemberAddMember && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__MemberAddMember(soap, "ns1:MemberAddMember", &a->ns1__MemberAddMember, ""))
				{	soap_flag_ns1__MemberAddMember--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MemberAddMember(struct soap *soap, const struct __ns1__MemberAddMember *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__MemberAddMember(soap, tag?tag:"-ns1:MemberAddMember", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MemberAddMember * SOAP_FMAC4 soap_get___ns1__MemberAddMember(struct soap *soap, struct __ns1__MemberAddMember *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MemberAddMember(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__MemberAddMember * SOAP_FMAC2 soap_instantiate___ns1__MemberAddMember(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MemberAddMember(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__MemberAddMember, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__MemberAddMember);
		if (size)
			*size = sizeof(struct __ns1__MemberAddMember);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__MemberAddMember, n);
		if (size)
			*size = n * sizeof(struct __ns1__MemberAddMember);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__MemberAddMember*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__MemberAddMember(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__MemberAddMember %p -> %p\n", q, p));
	*(struct __ns1__MemberAddMember*)p = *(struct __ns1__MemberAddMember*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetRegisterList(struct soap *soap, struct __ns1__AdminGetRegisterList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetRegisterList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetRegisterList(struct soap *soap, const struct __ns1__AdminGetRegisterList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetRegisterList(soap, &a->ns1__AdminGetRegisterList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetRegisterList(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetRegisterList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetRegisterList(soap, "ns1:AdminGetRegisterList", -1, &a->ns1__AdminGetRegisterList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetRegisterList * SOAP_FMAC4 soap_in___ns1__AdminGetRegisterList(struct soap *soap, const char *tag, struct __ns1__AdminGetRegisterList *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetRegisterList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetRegisterList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetRegisterList, sizeof(struct __ns1__AdminGetRegisterList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetRegisterList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetRegisterList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetRegisterList(soap, "ns1:AdminGetRegisterList", &a->ns1__AdminGetRegisterList, ""))
				{	soap_flag_ns1__AdminGetRegisterList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetRegisterList(struct soap *soap, const struct __ns1__AdminGetRegisterList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetRegisterList(soap, tag?tag:"-ns1:AdminGetRegisterList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetRegisterList * SOAP_FMAC4 soap_get___ns1__AdminGetRegisterList(struct soap *soap, struct __ns1__AdminGetRegisterList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetRegisterList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetRegisterList * SOAP_FMAC2 soap_instantiate___ns1__AdminGetRegisterList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetRegisterList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetRegisterList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetRegisterList);
		if (size)
			*size = sizeof(struct __ns1__AdminGetRegisterList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetRegisterList, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetRegisterList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetRegisterList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetRegisterList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetRegisterList %p -> %p\n", q, p));
	*(struct __ns1__AdminGetRegisterList*)p = *(struct __ns1__AdminGetRegisterList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetModifyList(struct soap *soap, struct __ns1__AdminGetModifyList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetModifyList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetModifyList(struct soap *soap, const struct __ns1__AdminGetModifyList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetModifyList(soap, &a->ns1__AdminGetModifyList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetModifyList(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetModifyList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetModifyList(soap, "ns1:AdminGetModifyList", -1, &a->ns1__AdminGetModifyList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetModifyList * SOAP_FMAC4 soap_in___ns1__AdminGetModifyList(struct soap *soap, const char *tag, struct __ns1__AdminGetModifyList *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetModifyList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetModifyList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetModifyList, sizeof(struct __ns1__AdminGetModifyList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetModifyList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetModifyList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetModifyList(soap, "ns1:AdminGetModifyList", &a->ns1__AdminGetModifyList, ""))
				{	soap_flag_ns1__AdminGetModifyList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetModifyList(struct soap *soap, const struct __ns1__AdminGetModifyList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetModifyList(soap, tag?tag:"-ns1:AdminGetModifyList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetModifyList * SOAP_FMAC4 soap_get___ns1__AdminGetModifyList(struct soap *soap, struct __ns1__AdminGetModifyList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetModifyList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetModifyList * SOAP_FMAC2 soap_instantiate___ns1__AdminGetModifyList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetModifyList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetModifyList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetModifyList);
		if (size)
			*size = sizeof(struct __ns1__AdminGetModifyList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetModifyList, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetModifyList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetModifyList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetModifyList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetModifyList %p -> %p\n", q, p));
	*(struct __ns1__AdminGetModifyList*)p = *(struct __ns1__AdminGetModifyList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetReportFaultList(struct soap *soap, struct __ns1__AdminGetReportFaultList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetReportFaultList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetReportFaultList(struct soap *soap, const struct __ns1__AdminGetReportFaultList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetReportFaultList(soap, &a->ns1__AdminGetReportFaultList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetReportFaultList(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetReportFaultList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetReportFaultList(soap, "ns1:AdminGetReportFaultList", -1, &a->ns1__AdminGetReportFaultList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetReportFaultList * SOAP_FMAC4 soap_in___ns1__AdminGetReportFaultList(struct soap *soap, const char *tag, struct __ns1__AdminGetReportFaultList *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetReportFaultList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetReportFaultList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetReportFaultList, sizeof(struct __ns1__AdminGetReportFaultList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetReportFaultList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetReportFaultList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetReportFaultList(soap, "ns1:AdminGetReportFaultList", &a->ns1__AdminGetReportFaultList, ""))
				{	soap_flag_ns1__AdminGetReportFaultList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetReportFaultList(struct soap *soap, const struct __ns1__AdminGetReportFaultList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetReportFaultList(soap, tag?tag:"-ns1:AdminGetReportFaultList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetReportFaultList * SOAP_FMAC4 soap_get___ns1__AdminGetReportFaultList(struct soap *soap, struct __ns1__AdminGetReportFaultList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetReportFaultList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetReportFaultList * SOAP_FMAC2 soap_instantiate___ns1__AdminGetReportFaultList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetReportFaultList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetReportFaultList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetReportFaultList);
		if (size)
			*size = sizeof(struct __ns1__AdminGetReportFaultList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetReportFaultList, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetReportFaultList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetReportFaultList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetReportFaultList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetReportFaultList %p -> %p\n", q, p));
	*(struct __ns1__AdminGetReportFaultList*)p = *(struct __ns1__AdminGetReportFaultList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetLyricListByID(struct soap *soap, struct __ns1__AdminGetLyricListByID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetLyricListByID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetLyricListByID(struct soap *soap, const struct __ns1__AdminGetLyricListByID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetLyricListByID(soap, &a->ns1__AdminGetLyricListByID);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetLyricListByID(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetLyricListByID *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetLyricListByID(soap, "ns1:AdminGetLyricListByID", -1, &a->ns1__AdminGetLyricListByID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetLyricListByID * SOAP_FMAC4 soap_in___ns1__AdminGetLyricListByID(struct soap *soap, const char *tag, struct __ns1__AdminGetLyricListByID *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetLyricListByID = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetLyricListByID *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetLyricListByID, sizeof(struct __ns1__AdminGetLyricListByID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetLyricListByID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetLyricListByID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetLyricListByID(soap, "ns1:AdminGetLyricListByID", &a->ns1__AdminGetLyricListByID, ""))
				{	soap_flag_ns1__AdminGetLyricListByID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetLyricListByID(struct soap *soap, const struct __ns1__AdminGetLyricListByID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetLyricListByID(soap, tag?tag:"-ns1:AdminGetLyricListByID", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetLyricListByID * SOAP_FMAC4 soap_get___ns1__AdminGetLyricListByID(struct soap *soap, struct __ns1__AdminGetLyricListByID *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetLyricListByID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetLyricListByID * SOAP_FMAC2 soap_instantiate___ns1__AdminGetLyricListByID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetLyricListByID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetLyricListByID, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetLyricListByID);
		if (size)
			*size = sizeof(struct __ns1__AdminGetLyricListByID);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetLyricListByID, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetLyricListByID);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetLyricListByID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetLyricListByID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetLyricListByID %p -> %p\n", q, p));
	*(struct __ns1__AdminGetLyricListByID*)p = *(struct __ns1__AdminGetLyricListByID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AdminGetLyricList(struct soap *soap, struct __ns1__AdminGetLyricList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AdminGetLyricList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AdminGetLyricList(struct soap *soap, const struct __ns1__AdminGetLyricList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AdminGetLyricList(soap, &a->ns1__AdminGetLyricList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AdminGetLyricList(struct soap *soap, const char *tag, int id, const struct __ns1__AdminGetLyricList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AdminGetLyricList(soap, "ns1:AdminGetLyricList", -1, &a->ns1__AdminGetLyricList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetLyricList * SOAP_FMAC4 soap_in___ns1__AdminGetLyricList(struct soap *soap, const char *tag, struct __ns1__AdminGetLyricList *a, const char *type)
{
	size_t soap_flag_ns1__AdminGetLyricList = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AdminGetLyricList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AdminGetLyricList, sizeof(struct __ns1__AdminGetLyricList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AdminGetLyricList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AdminGetLyricList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AdminGetLyricList(soap, "ns1:AdminGetLyricList", &a->ns1__AdminGetLyricList, ""))
				{	soap_flag_ns1__AdminGetLyricList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AdminGetLyricList(struct soap *soap, const struct __ns1__AdminGetLyricList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AdminGetLyricList(soap, tag?tag:"-ns1:AdminGetLyricList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AdminGetLyricList * SOAP_FMAC4 soap_get___ns1__AdminGetLyricList(struct soap *soap, struct __ns1__AdminGetLyricList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AdminGetLyricList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AdminGetLyricList * SOAP_FMAC2 soap_instantiate___ns1__AdminGetLyricList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AdminGetLyricList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AdminGetLyricList, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AdminGetLyricList);
		if (size)
			*size = sizeof(struct __ns1__AdminGetLyricList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AdminGetLyricList, n);
		if (size)
			*size = n * sizeof(struct __ns1__AdminGetLyricList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AdminGetLyricList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AdminGetLyricList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AdminGetLyricList %p -> %p\n", q, p));
	*(struct __ns1__AdminGetLyricList*)p = *(struct __ns1__AdminGetLyricList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSongID(struct soap *soap, struct __ns1__GetSongID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetSongID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSongID(struct soap *soap, const struct __ns1__GetSongID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetSongID(soap, &a->ns1__GetSongID);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSongID(struct soap *soap, const char *tag, int id, const struct __ns1__GetSongID *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetSongID(soap, "ns1:GetSongID", -1, &a->ns1__GetSongID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetSongID * SOAP_FMAC4 soap_in___ns1__GetSongID(struct soap *soap, const char *tag, struct __ns1__GetSongID *a, const char *type)
{
	size_t soap_flag_ns1__GetSongID = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetSongID *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetSongID, sizeof(struct __ns1__GetSongID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetSongID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetSongID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetSongID(soap, "ns1:GetSongID", &a->ns1__GetSongID, ""))
				{	soap_flag_ns1__GetSongID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSongID(struct soap *soap, const struct __ns1__GetSongID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetSongID(soap, tag?tag:"-ns1:GetSongID", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetSongID * SOAP_FMAC4 soap_get___ns1__GetSongID(struct soap *soap, struct __ns1__GetSongID *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetSongID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetSongID * SOAP_FMAC2 soap_instantiate___ns1__GetSongID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetSongID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetSongID, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetSongID);
		if (size)
			*size = sizeof(struct __ns1__GetSongID);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetSongID, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetSongID);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetSongID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetSongID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetSongID %p -> %p\n", q, p));
	*(struct __ns1__GetSongID*)p = *(struct __ns1__GetSongID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLyric8(struct soap *soap, struct __ns1__GetLyric8 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetLyric8 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLyric8(struct soap *soap, const struct __ns1__GetLyric8 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetLyric8(soap, &a->ns1__GetLyric8);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLyric8(struct soap *soap, const char *tag, int id, const struct __ns1__GetLyric8 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetLyric8(soap, "ns1:GetLyric8", -1, &a->ns1__GetLyric8, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric8 * SOAP_FMAC4 soap_in___ns1__GetLyric8(struct soap *soap, const char *tag, struct __ns1__GetLyric8 *a, const char *type)
{
	size_t soap_flag_ns1__GetLyric8 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetLyric8 *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLyric8, sizeof(struct __ns1__GetLyric8), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLyric8(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetLyric8 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetLyric8(soap, "ns1:GetLyric8", &a->ns1__GetLyric8, ""))
				{	soap_flag_ns1__GetLyric8--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLyric8(struct soap *soap, const struct __ns1__GetLyric8 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLyric8(soap, tag?tag:"-ns1:GetLyric8", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric8 * SOAP_FMAC4 soap_get___ns1__GetLyric8(struct soap *soap, struct __ns1__GetLyric8 *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLyric8(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLyric8 * SOAP_FMAC2 soap_instantiate___ns1__GetLyric8(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLyric8(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLyric8, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLyric8);
		if (size)
			*size = sizeof(struct __ns1__GetLyric8);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetLyric8, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetLyric8);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetLyric8*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLyric8(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLyric8 %p -> %p\n", q, p));
	*(struct __ns1__GetLyric8*)p = *(struct __ns1__GetLyric8*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLyric7(struct soap *soap, struct __ns1__GetLyric7 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetLyric7 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLyric7(struct soap *soap, const struct __ns1__GetLyric7 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetLyric7(soap, &a->ns1__GetLyric7);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLyric7(struct soap *soap, const char *tag, int id, const struct __ns1__GetLyric7 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetLyric7(soap, "ns1:GetLyric7", -1, &a->ns1__GetLyric7, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric7 * SOAP_FMAC4 soap_in___ns1__GetLyric7(struct soap *soap, const char *tag, struct __ns1__GetLyric7 *a, const char *type)
{
	size_t soap_flag_ns1__GetLyric7 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetLyric7 *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLyric7, sizeof(struct __ns1__GetLyric7), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLyric7(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetLyric7 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetLyric7(soap, "ns1:GetLyric7", &a->ns1__GetLyric7, ""))
				{	soap_flag_ns1__GetLyric7--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLyric7(struct soap *soap, const struct __ns1__GetLyric7 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLyric7(soap, tag?tag:"-ns1:GetLyric7", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric7 * SOAP_FMAC4 soap_get___ns1__GetLyric7(struct soap *soap, struct __ns1__GetLyric7 *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLyric7(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLyric7 * SOAP_FMAC2 soap_instantiate___ns1__GetLyric7(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLyric7(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLyric7, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLyric7);
		if (size)
			*size = sizeof(struct __ns1__GetLyric7);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetLyric7, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetLyric7);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetLyric7*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLyric7(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLyric7 %p -> %p\n", q, p));
	*(struct __ns1__GetLyric7*)p = *(struct __ns1__GetLyric7*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLyric6(struct soap *soap, struct __ns1__GetLyric6 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetLyric6 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLyric6(struct soap *soap, const struct __ns1__GetLyric6 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetLyric6(soap, &a->ns1__GetLyric6);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLyric6(struct soap *soap, const char *tag, int id, const struct __ns1__GetLyric6 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetLyric6(soap, "ns1:GetLyric6", -1, &a->ns1__GetLyric6, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric6 * SOAP_FMAC4 soap_in___ns1__GetLyric6(struct soap *soap, const char *tag, struct __ns1__GetLyric6 *a, const char *type)
{
	size_t soap_flag_ns1__GetLyric6 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetLyric6 *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLyric6, sizeof(struct __ns1__GetLyric6), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLyric6(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetLyric6 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetLyric6(soap, "ns1:GetLyric6", &a->ns1__GetLyric6, ""))
				{	soap_flag_ns1__GetLyric6--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLyric6(struct soap *soap, const struct __ns1__GetLyric6 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLyric6(soap, tag?tag:"-ns1:GetLyric6", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric6 * SOAP_FMAC4 soap_get___ns1__GetLyric6(struct soap *soap, struct __ns1__GetLyric6 *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLyric6(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLyric6 * SOAP_FMAC2 soap_instantiate___ns1__GetLyric6(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLyric6(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLyric6, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLyric6);
		if (size)
			*size = sizeof(struct __ns1__GetLyric6);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetLyric6, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetLyric6);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetLyric6*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLyric6(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLyric6 %p -> %p\n", q, p));
	*(struct __ns1__GetLyric6*)p = *(struct __ns1__GetLyric6*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLyric5(struct soap *soap, struct __ns1__GetLyric5 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetLyric5 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLyric5(struct soap *soap, const struct __ns1__GetLyric5 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetLyric5(soap, &a->ns1__GetLyric5);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLyric5(struct soap *soap, const char *tag, int id, const struct __ns1__GetLyric5 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetLyric5(soap, "ns1:GetLyric5", -1, &a->ns1__GetLyric5, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric5 * SOAP_FMAC4 soap_in___ns1__GetLyric5(struct soap *soap, const char *tag, struct __ns1__GetLyric5 *a, const char *type)
{
	size_t soap_flag_ns1__GetLyric5 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetLyric5 *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLyric5, sizeof(struct __ns1__GetLyric5), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLyric5(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetLyric5 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetLyric5(soap, "ns1:GetLyric5", &a->ns1__GetLyric5, ""))
				{	soap_flag_ns1__GetLyric5--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLyric5(struct soap *soap, const struct __ns1__GetLyric5 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLyric5(soap, tag?tag:"-ns1:GetLyric5", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric5 * SOAP_FMAC4 soap_get___ns1__GetLyric5(struct soap *soap, struct __ns1__GetLyric5 *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLyric5(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLyric5 * SOAP_FMAC2 soap_instantiate___ns1__GetLyric5(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLyric5(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLyric5, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLyric5);
		if (size)
			*size = sizeof(struct __ns1__GetLyric5);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetLyric5, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetLyric5);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetLyric5*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLyric5(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLyric5 %p -> %p\n", q, p));
	*(struct __ns1__GetLyric5*)p = *(struct __ns1__GetLyric5*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLyric4(struct soap *soap, struct __ns1__GetLyric4 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetLyric4 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLyric4(struct soap *soap, const struct __ns1__GetLyric4 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetLyric4(soap, &a->ns1__GetLyric4);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLyric4(struct soap *soap, const char *tag, int id, const struct __ns1__GetLyric4 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetLyric4(soap, "ns1:GetLyric4", -1, &a->ns1__GetLyric4, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric4 * SOAP_FMAC4 soap_in___ns1__GetLyric4(struct soap *soap, const char *tag, struct __ns1__GetLyric4 *a, const char *type)
{
	size_t soap_flag_ns1__GetLyric4 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetLyric4 *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLyric4, sizeof(struct __ns1__GetLyric4), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLyric4(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetLyric4 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetLyric4(soap, "ns1:GetLyric4", &a->ns1__GetLyric4, ""))
				{	soap_flag_ns1__GetLyric4--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLyric4(struct soap *soap, const struct __ns1__GetLyric4 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLyric4(soap, tag?tag:"-ns1:GetLyric4", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric4 * SOAP_FMAC4 soap_get___ns1__GetLyric4(struct soap *soap, struct __ns1__GetLyric4 *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLyric4(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLyric4 * SOAP_FMAC2 soap_instantiate___ns1__GetLyric4(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLyric4(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLyric4, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLyric4);
		if (size)
			*size = sizeof(struct __ns1__GetLyric4);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetLyric4, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetLyric4);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetLyric4*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLyric4(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLyric4 %p -> %p\n", q, p));
	*(struct __ns1__GetLyric4*)p = *(struct __ns1__GetLyric4*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLyric3(struct soap *soap, struct __ns1__GetLyric3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetLyric3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLyric3(struct soap *soap, const struct __ns1__GetLyric3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetLyric3(soap, &a->ns1__GetLyric3);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLyric3(struct soap *soap, const char *tag, int id, const struct __ns1__GetLyric3 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetLyric3(soap, "ns1:GetLyric3", -1, &a->ns1__GetLyric3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric3 * SOAP_FMAC4 soap_in___ns1__GetLyric3(struct soap *soap, const char *tag, struct __ns1__GetLyric3 *a, const char *type)
{
	size_t soap_flag_ns1__GetLyric3 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetLyric3 *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLyric3, sizeof(struct __ns1__GetLyric3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLyric3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetLyric3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetLyric3(soap, "ns1:GetLyric3", &a->ns1__GetLyric3, ""))
				{	soap_flag_ns1__GetLyric3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLyric3(struct soap *soap, const struct __ns1__GetLyric3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLyric3(soap, tag?tag:"-ns1:GetLyric3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLyric3 * SOAP_FMAC4 soap_get___ns1__GetLyric3(struct soap *soap, struct __ns1__GetLyric3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLyric3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLyric3 * SOAP_FMAC2 soap_instantiate___ns1__GetLyric3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLyric3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLyric3, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLyric3);
		if (size)
			*size = sizeof(struct __ns1__GetLyric3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetLyric3, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetLyric3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetLyric3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLyric3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLyric3 %p -> %p\n", q, p));
	*(struct __ns1__GetLyric3*)p = *(struct __ns1__GetLyric3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__IsReportedFaultLyric(struct soap *soap, struct __ns1__IsReportedFaultLyric *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__IsReportedFaultLyric = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__IsReportedFaultLyric(struct soap *soap, const struct __ns1__IsReportedFaultLyric *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__IsReportedFaultLyric(soap, &a->ns1__IsReportedFaultLyric);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__IsReportedFaultLyric(struct soap *soap, const char *tag, int id, const struct __ns1__IsReportedFaultLyric *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__IsReportedFaultLyric(soap, "ns1:IsReportedFaultLyric", -1, &a->ns1__IsReportedFaultLyric, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__IsReportedFaultLyric * SOAP_FMAC4 soap_in___ns1__IsReportedFaultLyric(struct soap *soap, const char *tag, struct __ns1__IsReportedFaultLyric *a, const char *type)
{
	size_t soap_flag_ns1__IsReportedFaultLyric = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__IsReportedFaultLyric *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__IsReportedFaultLyric, sizeof(struct __ns1__IsReportedFaultLyric), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__IsReportedFaultLyric(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__IsReportedFaultLyric && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__IsReportedFaultLyric(soap, "ns1:IsReportedFaultLyric", &a->ns1__IsReportedFaultLyric, ""))
				{	soap_flag_ns1__IsReportedFaultLyric--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__IsReportedFaultLyric(struct soap *soap, const struct __ns1__IsReportedFaultLyric *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__IsReportedFaultLyric(soap, tag?tag:"-ns1:IsReportedFaultLyric", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__IsReportedFaultLyric * SOAP_FMAC4 soap_get___ns1__IsReportedFaultLyric(struct soap *soap, struct __ns1__IsReportedFaultLyric *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__IsReportedFaultLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__IsReportedFaultLyric * SOAP_FMAC2 soap_instantiate___ns1__IsReportedFaultLyric(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__IsReportedFaultLyric(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__IsReportedFaultLyric, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__IsReportedFaultLyric);
		if (size)
			*size = sizeof(struct __ns1__IsReportedFaultLyric);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__IsReportedFaultLyric, n);
		if (size)
			*size = n * sizeof(struct __ns1__IsReportedFaultLyric);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__IsReportedFaultLyric*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__IsReportedFaultLyric(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__IsReportedFaultLyric %p -> %p\n", q, p));
	*(struct __ns1__IsReportedFaultLyric*)p = *(struct __ns1__IsReportedFaultLyric*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__IsReportedRecommendationLyric(struct soap *soap, struct __ns1__IsReportedRecommendationLyric *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__IsReportedRecommendationLyric = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__IsReportedRecommendationLyric(struct soap *soap, const struct __ns1__IsReportedRecommendationLyric *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__IsReportedRecommendationLyric(soap, &a->ns1__IsReportedRecommendationLyric);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__IsReportedRecommendationLyric(struct soap *soap, const char *tag, int id, const struct __ns1__IsReportedRecommendationLyric *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__IsReportedRecommendationLyric(soap, "ns1:IsReportedRecommendationLyric", -1, &a->ns1__IsReportedRecommendationLyric, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__IsReportedRecommendationLyric * SOAP_FMAC4 soap_in___ns1__IsReportedRecommendationLyric(struct soap *soap, const char *tag, struct __ns1__IsReportedRecommendationLyric *a, const char *type)
{
	size_t soap_flag_ns1__IsReportedRecommendationLyric = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__IsReportedRecommendationLyric *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__IsReportedRecommendationLyric, sizeof(struct __ns1__IsReportedRecommendationLyric), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__IsReportedRecommendationLyric(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__IsReportedRecommendationLyric && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__IsReportedRecommendationLyric(soap, "ns1:IsReportedRecommendationLyric", &a->ns1__IsReportedRecommendationLyric, ""))
				{	soap_flag_ns1__IsReportedRecommendationLyric--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__IsReportedRecommendationLyric(struct soap *soap, const struct __ns1__IsReportedRecommendationLyric *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__IsReportedRecommendationLyric(soap, tag?tag:"-ns1:IsReportedRecommendationLyric", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__IsReportedRecommendationLyric * SOAP_FMAC4 soap_get___ns1__IsReportedRecommendationLyric(struct soap *soap, struct __ns1__IsReportedRecommendationLyric *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__IsReportedRecommendationLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__IsReportedRecommendationLyric * SOAP_FMAC2 soap_instantiate___ns1__IsReportedRecommendationLyric(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__IsReportedRecommendationLyric(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__IsReportedRecommendationLyric, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__IsReportedRecommendationLyric);
		if (size)
			*size = sizeof(struct __ns1__IsReportedRecommendationLyric);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__IsReportedRecommendationLyric, n);
		if (size)
			*size = n * sizeof(struct __ns1__IsReportedRecommendationLyric);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__IsReportedRecommendationLyric*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__IsReportedRecommendationLyric(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__IsReportedRecommendationLyric %p -> %p\n", q, p));
	*(struct __ns1__IsReportedRecommendationLyric*)p = *(struct __ns1__IsReportedRecommendationLyric*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReportRecommendationLyric(struct soap *soap, struct __ns1__ReportRecommendationLyric *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__ReportRecommendationLyric = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReportRecommendationLyric(struct soap *soap, const struct __ns1__ReportRecommendationLyric *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ReportRecommendationLyric(soap, &a->ns1__ReportRecommendationLyric);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReportRecommendationLyric(struct soap *soap, const char *tag, int id, const struct __ns1__ReportRecommendationLyric *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__ReportRecommendationLyric(soap, "ns1:ReportRecommendationLyric", -1, &a->ns1__ReportRecommendationLyric, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ReportRecommendationLyric * SOAP_FMAC4 soap_in___ns1__ReportRecommendationLyric(struct soap *soap, const char *tag, struct __ns1__ReportRecommendationLyric *a, const char *type)
{
	size_t soap_flag_ns1__ReportRecommendationLyric = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__ReportRecommendationLyric *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__ReportRecommendationLyric, sizeof(struct __ns1__ReportRecommendationLyric), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__ReportRecommendationLyric(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__ReportRecommendationLyric && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__ReportRecommendationLyric(soap, "ns1:ReportRecommendationLyric", &a->ns1__ReportRecommendationLyric, ""))
				{	soap_flag_ns1__ReportRecommendationLyric--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReportRecommendationLyric(struct soap *soap, const struct __ns1__ReportRecommendationLyric *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__ReportRecommendationLyric(soap, tag?tag:"-ns1:ReportRecommendationLyric", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ReportRecommendationLyric * SOAP_FMAC4 soap_get___ns1__ReportRecommendationLyric(struct soap *soap, struct __ns1__ReportRecommendationLyric *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__ReportRecommendationLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__ReportRecommendationLyric * SOAP_FMAC2 soap_instantiate___ns1__ReportRecommendationLyric(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__ReportRecommendationLyric(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__ReportRecommendationLyric, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__ReportRecommendationLyric);
		if (size)
			*size = sizeof(struct __ns1__ReportRecommendationLyric);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__ReportRecommendationLyric, n);
		if (size)
			*size = n * sizeof(struct __ns1__ReportRecommendationLyric);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__ReportRecommendationLyric*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__ReportRecommendationLyric(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__ReportRecommendationLyric %p -> %p\n", q, p));
	*(struct __ns1__ReportRecommendationLyric*)p = *(struct __ns1__ReportRecommendationLyric*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReportFaultLyric2(struct soap *soap, struct __ns1__ReportFaultLyric2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__ReportFaultLyric2 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReportFaultLyric2(struct soap *soap, const struct __ns1__ReportFaultLyric2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ReportFaultLyric2(soap, &a->ns1__ReportFaultLyric2);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReportFaultLyric2(struct soap *soap, const char *tag, int id, const struct __ns1__ReportFaultLyric2 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__ReportFaultLyric2(soap, "ns1:ReportFaultLyric2", -1, &a->ns1__ReportFaultLyric2, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ReportFaultLyric2 * SOAP_FMAC4 soap_in___ns1__ReportFaultLyric2(struct soap *soap, const char *tag, struct __ns1__ReportFaultLyric2 *a, const char *type)
{
	size_t soap_flag_ns1__ReportFaultLyric2 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__ReportFaultLyric2 *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__ReportFaultLyric2, sizeof(struct __ns1__ReportFaultLyric2), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__ReportFaultLyric2(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__ReportFaultLyric2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__ReportFaultLyric2(soap, "ns1:ReportFaultLyric2", &a->ns1__ReportFaultLyric2, ""))
				{	soap_flag_ns1__ReportFaultLyric2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReportFaultLyric2(struct soap *soap, const struct __ns1__ReportFaultLyric2 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__ReportFaultLyric2(soap, tag?tag:"-ns1:ReportFaultLyric2", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ReportFaultLyric2 * SOAP_FMAC4 soap_get___ns1__ReportFaultLyric2(struct soap *soap, struct __ns1__ReportFaultLyric2 *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__ReportFaultLyric2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__ReportFaultLyric2 * SOAP_FMAC2 soap_instantiate___ns1__ReportFaultLyric2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__ReportFaultLyric2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__ReportFaultLyric2, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__ReportFaultLyric2);
		if (size)
			*size = sizeof(struct __ns1__ReportFaultLyric2);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__ReportFaultLyric2, n);
		if (size)
			*size = n * sizeof(struct __ns1__ReportFaultLyric2);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__ReportFaultLyric2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__ReportFaultLyric2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__ReportFaultLyric2 %p -> %p\n", q, p));
	*(struct __ns1__ReportFaultLyric2*)p = *(struct __ns1__ReportFaultLyric2*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReportFaultLyricWithComment(struct soap *soap, struct __ns1__ReportFaultLyricWithComment *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__ReportFaultLyricWithComment = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReportFaultLyricWithComment(struct soap *soap, const struct __ns1__ReportFaultLyricWithComment *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ReportFaultLyricWithComment(soap, &a->ns1__ReportFaultLyricWithComment);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReportFaultLyricWithComment(struct soap *soap, const char *tag, int id, const struct __ns1__ReportFaultLyricWithComment *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__ReportFaultLyricWithComment(soap, "ns1:ReportFaultLyricWithComment", -1, &a->ns1__ReportFaultLyricWithComment, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ReportFaultLyricWithComment * SOAP_FMAC4 soap_in___ns1__ReportFaultLyricWithComment(struct soap *soap, const char *tag, struct __ns1__ReportFaultLyricWithComment *a, const char *type)
{
	size_t soap_flag_ns1__ReportFaultLyricWithComment = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__ReportFaultLyricWithComment *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__ReportFaultLyricWithComment, sizeof(struct __ns1__ReportFaultLyricWithComment), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__ReportFaultLyricWithComment(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__ReportFaultLyricWithComment && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__ReportFaultLyricWithComment(soap, "ns1:ReportFaultLyricWithComment", &a->ns1__ReportFaultLyricWithComment, ""))
				{	soap_flag_ns1__ReportFaultLyricWithComment--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReportFaultLyricWithComment(struct soap *soap, const struct __ns1__ReportFaultLyricWithComment *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__ReportFaultLyricWithComment(soap, tag?tag:"-ns1:ReportFaultLyricWithComment", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ReportFaultLyricWithComment * SOAP_FMAC4 soap_get___ns1__ReportFaultLyricWithComment(struct soap *soap, struct __ns1__ReportFaultLyricWithComment *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__ReportFaultLyricWithComment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__ReportFaultLyricWithComment * SOAP_FMAC2 soap_instantiate___ns1__ReportFaultLyricWithComment(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__ReportFaultLyricWithComment(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__ReportFaultLyricWithComment, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__ReportFaultLyricWithComment);
		if (size)
			*size = sizeof(struct __ns1__ReportFaultLyricWithComment);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__ReportFaultLyricWithComment, n);
		if (size)
			*size = n * sizeof(struct __ns1__ReportFaultLyricWithComment);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__ReportFaultLyricWithComment*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__ReportFaultLyricWithComment(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__ReportFaultLyricWithComment %p -> %p\n", q, p));
	*(struct __ns1__ReportFaultLyricWithComment*)p = *(struct __ns1__ReportFaultLyricWithComment*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadLyric(struct soap *soap, struct __ns1__UploadLyric *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__UploadLyric = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadLyric(struct soap *soap, const struct __ns1__UploadLyric *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__UploadLyric(soap, &a->ns1__UploadLyric);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadLyric(struct soap *soap, const char *tag, int id, const struct __ns1__UploadLyric *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__UploadLyric(soap, "ns1:UploadLyric", -1, &a->ns1__UploadLyric, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__UploadLyric * SOAP_FMAC4 soap_in___ns1__UploadLyric(struct soap *soap, const char *tag, struct __ns1__UploadLyric *a, const char *type)
{
	size_t soap_flag_ns1__UploadLyric = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__UploadLyric *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__UploadLyric, sizeof(struct __ns1__UploadLyric), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__UploadLyric(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__UploadLyric && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__UploadLyric(soap, "ns1:UploadLyric", &a->ns1__UploadLyric, ""))
				{	soap_flag_ns1__UploadLyric--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadLyric(struct soap *soap, const struct __ns1__UploadLyric *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__UploadLyric(soap, tag?tag:"-ns1:UploadLyric", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__UploadLyric * SOAP_FMAC4 soap_get___ns1__UploadLyric(struct soap *soap, struct __ns1__UploadLyric *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__UploadLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__UploadLyric * SOAP_FMAC2 soap_instantiate___ns1__UploadLyric(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__UploadLyric(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__UploadLyric, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__UploadLyric);
		if (size)
			*size = sizeof(struct __ns1__UploadLyric);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__UploadLyric, n);
		if (size)
			*size = n * sizeof(struct __ns1__UploadLyric);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__UploadLyric*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__UploadLyric(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__UploadLyric %p -> %p\n", q, p));
	*(struct __ns1__UploadLyric*)p = *(struct __ns1__UploadLyric*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetResembleLyric2CountTest(struct soap *soap, struct __ns1__GetResembleLyric2CountTest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetResembleLyric2CountTest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetResembleLyric2CountTest(struct soap *soap, const struct __ns1__GetResembleLyric2CountTest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetResembleLyric2CountTest(soap, &a->ns1__GetResembleLyric2CountTest);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetResembleLyric2CountTest(struct soap *soap, const char *tag, int id, const struct __ns1__GetResembleLyric2CountTest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetResembleLyric2CountTest(soap, "ns1:GetResembleLyric2CountTest", -1, &a->ns1__GetResembleLyric2CountTest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyric2CountTest * SOAP_FMAC4 soap_in___ns1__GetResembleLyric2CountTest(struct soap *soap, const char *tag, struct __ns1__GetResembleLyric2CountTest *a, const char *type)
{
	size_t soap_flag_ns1__GetResembleLyric2CountTest = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetResembleLyric2CountTest *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetResembleLyric2CountTest, sizeof(struct __ns1__GetResembleLyric2CountTest), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetResembleLyric2CountTest(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetResembleLyric2CountTest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetResembleLyric2CountTest(soap, "ns1:GetResembleLyric2CountTest", &a->ns1__GetResembleLyric2CountTest, ""))
				{	soap_flag_ns1__GetResembleLyric2CountTest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetResembleLyric2CountTest(struct soap *soap, const struct __ns1__GetResembleLyric2CountTest *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetResembleLyric2CountTest(soap, tag?tag:"-ns1:GetResembleLyric2CountTest", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyric2CountTest * SOAP_FMAC4 soap_get___ns1__GetResembleLyric2CountTest(struct soap *soap, struct __ns1__GetResembleLyric2CountTest *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetResembleLyric2CountTest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetResembleLyric2CountTest * SOAP_FMAC2 soap_instantiate___ns1__GetResembleLyric2CountTest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetResembleLyric2CountTest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetResembleLyric2CountTest, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetResembleLyric2CountTest);
		if (size)
			*size = sizeof(struct __ns1__GetResembleLyric2CountTest);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetResembleLyric2CountTest, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetResembleLyric2CountTest);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetResembleLyric2CountTest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetResembleLyric2CountTest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetResembleLyric2CountTest %p -> %p\n", q, p));
	*(struct __ns1__GetResembleLyric2CountTest*)p = *(struct __ns1__GetResembleLyric2CountTest*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetResembleLyric2Count(struct soap *soap, struct __ns1__GetResembleLyric2Count *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetResembleLyric2Count = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetResembleLyric2Count(struct soap *soap, const struct __ns1__GetResembleLyric2Count *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetResembleLyric2Count(soap, &a->ns1__GetResembleLyric2Count);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetResembleLyric2Count(struct soap *soap, const char *tag, int id, const struct __ns1__GetResembleLyric2Count *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetResembleLyric2Count(soap, "ns1:GetResembleLyric2Count", -1, &a->ns1__GetResembleLyric2Count, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyric2Count * SOAP_FMAC4 soap_in___ns1__GetResembleLyric2Count(struct soap *soap, const char *tag, struct __ns1__GetResembleLyric2Count *a, const char *type)
{
	size_t soap_flag_ns1__GetResembleLyric2Count = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetResembleLyric2Count *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetResembleLyric2Count, sizeof(struct __ns1__GetResembleLyric2Count), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetResembleLyric2Count(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetResembleLyric2Count && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetResembleLyric2Count(soap, "ns1:GetResembleLyric2Count", &a->ns1__GetResembleLyric2Count, ""))
				{	soap_flag_ns1__GetResembleLyric2Count--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetResembleLyric2Count(struct soap *soap, const struct __ns1__GetResembleLyric2Count *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetResembleLyric2Count(soap, tag?tag:"-ns1:GetResembleLyric2Count", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyric2Count * SOAP_FMAC4 soap_get___ns1__GetResembleLyric2Count(struct soap *soap, struct __ns1__GetResembleLyric2Count *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetResembleLyric2Count(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetResembleLyric2Count * SOAP_FMAC2 soap_instantiate___ns1__GetResembleLyric2Count(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetResembleLyric2Count(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetResembleLyric2Count, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetResembleLyric2Count);
		if (size)
			*size = sizeof(struct __ns1__GetResembleLyric2Count);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetResembleLyric2Count, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetResembleLyric2Count);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetResembleLyric2Count*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetResembleLyric2Count(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetResembleLyric2Count %p -> %p\n", q, p));
	*(struct __ns1__GetResembleLyric2Count*)p = *(struct __ns1__GetResembleLyric2Count*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetResembleLyric3(struct soap *soap, struct __ns1__GetResembleLyric3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetResembleLyric3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetResembleLyric3(struct soap *soap, const struct __ns1__GetResembleLyric3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetResembleLyric3(soap, &a->ns1__GetResembleLyric3);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetResembleLyric3(struct soap *soap, const char *tag, int id, const struct __ns1__GetResembleLyric3 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetResembleLyric3(soap, "ns1:GetResembleLyric3", -1, &a->ns1__GetResembleLyric3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyric3 * SOAP_FMAC4 soap_in___ns1__GetResembleLyric3(struct soap *soap, const char *tag, struct __ns1__GetResembleLyric3 *a, const char *type)
{
	size_t soap_flag_ns1__GetResembleLyric3 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetResembleLyric3 *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetResembleLyric3, sizeof(struct __ns1__GetResembleLyric3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetResembleLyric3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetResembleLyric3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetResembleLyric3(soap, "ns1:GetResembleLyric3", &a->ns1__GetResembleLyric3, ""))
				{	soap_flag_ns1__GetResembleLyric3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetResembleLyric3(struct soap *soap, const struct __ns1__GetResembleLyric3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetResembleLyric3(soap, tag?tag:"-ns1:GetResembleLyric3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyric3 * SOAP_FMAC4 soap_get___ns1__GetResembleLyric3(struct soap *soap, struct __ns1__GetResembleLyric3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetResembleLyric3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetResembleLyric3 * SOAP_FMAC2 soap_instantiate___ns1__GetResembleLyric3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetResembleLyric3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetResembleLyric3, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetResembleLyric3);
		if (size)
			*size = sizeof(struct __ns1__GetResembleLyric3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetResembleLyric3, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetResembleLyric3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetResembleLyric3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetResembleLyric3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetResembleLyric3 %p -> %p\n", q, p));
	*(struct __ns1__GetResembleLyric3*)p = *(struct __ns1__GetResembleLyric3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetResembleLyric2(struct soap *soap, struct __ns1__GetResembleLyric2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetResembleLyric2 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetResembleLyric2(struct soap *soap, const struct __ns1__GetResembleLyric2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetResembleLyric2(soap, &a->ns1__GetResembleLyric2);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetResembleLyric2(struct soap *soap, const char *tag, int id, const struct __ns1__GetResembleLyric2 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetResembleLyric2(soap, "ns1:GetResembleLyric2", -1, &a->ns1__GetResembleLyric2, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyric2 * SOAP_FMAC4 soap_in___ns1__GetResembleLyric2(struct soap *soap, const char *tag, struct __ns1__GetResembleLyric2 *a, const char *type)
{
	size_t soap_flag_ns1__GetResembleLyric2 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetResembleLyric2 *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetResembleLyric2, sizeof(struct __ns1__GetResembleLyric2), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetResembleLyric2(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetResembleLyric2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetResembleLyric2(soap, "ns1:GetResembleLyric2", &a->ns1__GetResembleLyric2, ""))
				{	soap_flag_ns1__GetResembleLyric2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetResembleLyric2(struct soap *soap, const struct __ns1__GetResembleLyric2 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetResembleLyric2(soap, tag?tag:"-ns1:GetResembleLyric2", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetResembleLyric2 * SOAP_FMAC4 soap_get___ns1__GetResembleLyric2(struct soap *soap, struct __ns1__GetResembleLyric2 *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetResembleLyric2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetResembleLyric2 * SOAP_FMAC2 soap_instantiate___ns1__GetResembleLyric2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetResembleLyric2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetResembleLyric2, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetResembleLyric2);
		if (size)
			*size = sizeof(struct __ns1__GetResembleLyric2);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetResembleLyric2, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetResembleLyric2);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetResembleLyric2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetResembleLyric2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetResembleLyric2 %p -> %p\n", q, p));
	*(struct __ns1__GetResembleLyric2*)p = *(struct __ns1__GetResembleLyric2*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetLinkLyric(struct soap *soap, struct __ns1__SetLinkLyric *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetLinkLyric = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetLinkLyric(struct soap *soap, const struct __ns1__SetLinkLyric *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__SetLinkLyric(soap, &a->ns1__SetLinkLyric);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetLinkLyric(struct soap *soap, const char *tag, int id, const struct __ns1__SetLinkLyric *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__SetLinkLyric(soap, "ns1:SetLinkLyric", -1, &a->ns1__SetLinkLyric, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetLinkLyric * SOAP_FMAC4 soap_in___ns1__SetLinkLyric(struct soap *soap, const char *tag, struct __ns1__SetLinkLyric *a, const char *type)
{
	size_t soap_flag_ns1__SetLinkLyric = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__SetLinkLyric *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetLinkLyric, sizeof(struct __ns1__SetLinkLyric), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetLinkLyric(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetLinkLyric && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetLinkLyric(soap, "ns1:SetLinkLyric", &a->ns1__SetLinkLyric, ""))
				{	soap_flag_ns1__SetLinkLyric--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetLinkLyric(struct soap *soap, const struct __ns1__SetLinkLyric *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SetLinkLyric(soap, tag?tag:"-ns1:SetLinkLyric", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetLinkLyric * SOAP_FMAC4 soap_get___ns1__SetLinkLyric(struct soap *soap, struct __ns1__SetLinkLyric *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetLinkLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetLinkLyric * SOAP_FMAC2 soap_instantiate___ns1__SetLinkLyric(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetLinkLyric(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetLinkLyric, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetLinkLyric);
		if (size)
			*size = sizeof(struct __ns1__SetLinkLyric);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__SetLinkLyric, n);
		if (size)
			*size = n * sizeof(struct __ns1__SetLinkLyric);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__SetLinkLyric*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetLinkLyric(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetLinkLyric %p -> %p\n", q, p));
	*(struct __ns1__SetLinkLyric*)p = *(struct __ns1__SetLinkLyric*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSyncLyricBySearch(struct soap *soap, struct __ns1__GetSyncLyricBySearch *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetSyncLyricBySearch = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSyncLyricBySearch(struct soap *soap, const struct __ns1__GetSyncLyricBySearch *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetSyncLyricBySearch(soap, &a->ns1__GetSyncLyricBySearch);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSyncLyricBySearch(struct soap *soap, const char *tag, int id, const struct __ns1__GetSyncLyricBySearch *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetSyncLyricBySearch(soap, "ns1:GetSyncLyricBySearch", -1, &a->ns1__GetSyncLyricBySearch, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetSyncLyricBySearch * SOAP_FMAC4 soap_in___ns1__GetSyncLyricBySearch(struct soap *soap, const char *tag, struct __ns1__GetSyncLyricBySearch *a, const char *type)
{
	size_t soap_flag_ns1__GetSyncLyricBySearch = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetSyncLyricBySearch *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetSyncLyricBySearch, sizeof(struct __ns1__GetSyncLyricBySearch), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetSyncLyricBySearch(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetSyncLyricBySearch && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetSyncLyricBySearch(soap, "ns1:GetSyncLyricBySearch", &a->ns1__GetSyncLyricBySearch, ""))
				{	soap_flag_ns1__GetSyncLyricBySearch--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSyncLyricBySearch(struct soap *soap, const struct __ns1__GetSyncLyricBySearch *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetSyncLyricBySearch(soap, tag?tag:"-ns1:GetSyncLyricBySearch", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetSyncLyricBySearch * SOAP_FMAC4 soap_get___ns1__GetSyncLyricBySearch(struct soap *soap, struct __ns1__GetSyncLyricBySearch *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetSyncLyricBySearch(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetSyncLyricBySearch * SOAP_FMAC2 soap_instantiate___ns1__GetSyncLyricBySearch(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetSyncLyricBySearch(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetSyncLyricBySearch, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetSyncLyricBySearch);
		if (size)
			*size = sizeof(struct __ns1__GetSyncLyricBySearch);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetSyncLyricBySearch, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetSyncLyricBySearch);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetSyncLyricBySearch*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetSyncLyricBySearch(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetSyncLyricBySearch %p -> %p\n", q, p));
	*(struct __ns1__GetSyncLyricBySearch*)p = *(struct __ns1__GetSyncLyricBySearch*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMurekaInfo(struct soap *soap, struct __ns1__GetMurekaInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetMurekaInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMurekaInfo(struct soap *soap, const struct __ns1__GetMurekaInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetMurekaInfo(soap, &a->ns1__GetMurekaInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMurekaInfo(struct soap *soap, const char *tag, int id, const struct __ns1__GetMurekaInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetMurekaInfo(soap, "ns1:GetMurekaInfo", -1, &a->ns1__GetMurekaInfo, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetMurekaInfo * SOAP_FMAC4 soap_in___ns1__GetMurekaInfo(struct soap *soap, const char *tag, struct __ns1__GetMurekaInfo *a, const char *type)
{
	size_t soap_flag_ns1__GetMurekaInfo = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetMurekaInfo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetMurekaInfo, sizeof(struct __ns1__GetMurekaInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetMurekaInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetMurekaInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetMurekaInfo(soap, "ns1:GetMurekaInfo", &a->ns1__GetMurekaInfo, ""))
				{	soap_flag_ns1__GetMurekaInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMurekaInfo(struct soap *soap, const struct __ns1__GetMurekaInfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetMurekaInfo(soap, tag?tag:"-ns1:GetMurekaInfo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetMurekaInfo * SOAP_FMAC4 soap_get___ns1__GetMurekaInfo(struct soap *soap, struct __ns1__GetMurekaInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetMurekaInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetMurekaInfo * SOAP_FMAC2 soap_instantiate___ns1__GetMurekaInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetMurekaInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetMurekaInfo, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetMurekaInfo);
		if (size)
			*size = sizeof(struct __ns1__GetMurekaInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetMurekaInfo, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetMurekaInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetMurekaInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetMurekaInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetMurekaInfo %p -> %p\n", q, p));
	*(struct __ns1__GetMurekaInfo*)p = *(struct __ns1__GetMurekaInfo*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminGetLatestLyricID(struct soap *soap, _ns1__AdminGetLatestLyricID *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminGetLatestLyricID))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminGetLatestLyricID(struct soap *soap, const char *tag, int id, _ns1__AdminGetLatestLyricID *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminGetLatestLyricID);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminGetLatestLyricID ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminGetLatestLyricID(struct soap *soap, const char *tag, _ns1__AdminGetLatestLyricID **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminGetLatestLyricID **)soap_malloc(soap, sizeof(_ns1__AdminGetLatestLyricID *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminGetLatestLyricID *)soap_instantiate__ns1__AdminGetLatestLyricID(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminGetLatestLyricID ** p = (_ns1__AdminGetLatestLyricID **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminGetLatestLyricID, sizeof(_ns1__AdminGetLatestLyricID), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminGetLatestLyricID(struct soap *soap, _ns1__AdminGetLatestLyricID *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminGetLatestLyricID);
	if (soap_out_PointerTo_ns1__AdminGetLatestLyricID(soap, tag?tag:"ns1:AdminGetLatestLyricID", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminGetLatestLyricID ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminGetLatestLyricID(struct soap *soap, _ns1__AdminGetLatestLyricID **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminGetLatestLyricID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminDeleteLyrics(struct soap *soap, _ns1__AdminDeleteLyrics *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminDeleteLyrics))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminDeleteLyrics(struct soap *soap, const char *tag, int id, _ns1__AdminDeleteLyrics *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminDeleteLyrics);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminDeleteLyrics ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminDeleteLyrics(struct soap *soap, const char *tag, _ns1__AdminDeleteLyrics **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminDeleteLyrics **)soap_malloc(soap, sizeof(_ns1__AdminDeleteLyrics *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminDeleteLyrics *)soap_instantiate__ns1__AdminDeleteLyrics(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminDeleteLyrics ** p = (_ns1__AdminDeleteLyrics **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminDeleteLyrics, sizeof(_ns1__AdminDeleteLyrics), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminDeleteLyrics(struct soap *soap, _ns1__AdminDeleteLyrics *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminDeleteLyrics);
	if (soap_out_PointerTo_ns1__AdminDeleteLyrics(soap, tag?tag:"ns1:AdminDeleteLyrics", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminDeleteLyrics ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminDeleteLyrics(struct soap *soap, _ns1__AdminDeleteLyrics **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminDeleteLyrics(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminGetLyrics(struct soap *soap, _ns1__AdminGetLyrics *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminGetLyrics))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminGetLyrics(struct soap *soap, const char *tag, int id, _ns1__AdminGetLyrics *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminGetLyrics);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminGetLyrics ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminGetLyrics(struct soap *soap, const char *tag, _ns1__AdminGetLyrics **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminGetLyrics **)soap_malloc(soap, sizeof(_ns1__AdminGetLyrics *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminGetLyrics *)soap_instantiate__ns1__AdminGetLyrics(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminGetLyrics ** p = (_ns1__AdminGetLyrics **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminGetLyrics, sizeof(_ns1__AdminGetLyrics), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminGetLyrics(struct soap *soap, _ns1__AdminGetLyrics *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminGetLyrics);
	if (soap_out_PointerTo_ns1__AdminGetLyrics(soap, tag?tag:"ns1:AdminGetLyrics", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminGetLyrics ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminGetLyrics(struct soap *soap, _ns1__AdminGetLyrics **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminGetLyrics(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminLoginLyricMonitor(struct soap *soap, _ns1__AdminLoginLyricMonitor *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminLoginLyricMonitor))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminLoginLyricMonitor(struct soap *soap, const char *tag, int id, _ns1__AdminLoginLyricMonitor *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminLoginLyricMonitor);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminLoginLyricMonitor ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminLoginLyricMonitor(struct soap *soap, const char *tag, _ns1__AdminLoginLyricMonitor **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminLoginLyricMonitor **)soap_malloc(soap, sizeof(_ns1__AdminLoginLyricMonitor *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminLoginLyricMonitor *)soap_instantiate__ns1__AdminLoginLyricMonitor(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminLoginLyricMonitor ** p = (_ns1__AdminLoginLyricMonitor **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminLoginLyricMonitor, sizeof(_ns1__AdminLoginLyricMonitor), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminLoginLyricMonitor(struct soap *soap, _ns1__AdminLoginLyricMonitor *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminLoginLyricMonitor);
	if (soap_out_PointerTo_ns1__AdminLoginLyricMonitor(soap, tag?tag:"ns1:AdminLoginLyricMonitor", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminLoginLyricMonitor ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminLoginLyricMonitor(struct soap *soap, _ns1__AdminLoginLyricMonitor **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminLoginLyricMonitor(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetSearchLyricCount(struct soap *soap, _ns1__GetSearchLyricCount *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetSearchLyricCount))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetSearchLyricCount(struct soap *soap, const char *tag, int id, _ns1__GetSearchLyricCount *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetSearchLyricCount);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetSearchLyricCount ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetSearchLyricCount(struct soap *soap, const char *tag, _ns1__GetSearchLyricCount **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetSearchLyricCount **)soap_malloc(soap, sizeof(_ns1__GetSearchLyricCount *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetSearchLyricCount *)soap_instantiate__ns1__GetSearchLyricCount(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetSearchLyricCount ** p = (_ns1__GetSearchLyricCount **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetSearchLyricCount, sizeof(_ns1__GetSearchLyricCount), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetSearchLyricCount(struct soap *soap, _ns1__GetSearchLyricCount *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetSearchLyricCount);
	if (soap_out_PointerTo_ns1__GetSearchLyricCount(soap, tag?tag:"ns1:GetSearchLyricCount", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetSearchLyricCount ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetSearchLyricCount(struct soap *soap, _ns1__GetSearchLyricCount **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetSearchLyricCount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminLoginRightsJPN(struct soap *soap, _ns1__AdminLoginRightsJPN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminLoginRightsJPN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminLoginRightsJPN(struct soap *soap, const char *tag, int id, _ns1__AdminLoginRightsJPN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminLoginRightsJPN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminLoginRightsJPN ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminLoginRightsJPN(struct soap *soap, const char *tag, _ns1__AdminLoginRightsJPN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminLoginRightsJPN **)soap_malloc(soap, sizeof(_ns1__AdminLoginRightsJPN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminLoginRightsJPN *)soap_instantiate__ns1__AdminLoginRightsJPN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminLoginRightsJPN ** p = (_ns1__AdminLoginRightsJPN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminLoginRightsJPN, sizeof(_ns1__AdminLoginRightsJPN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminLoginRightsJPN(struct soap *soap, _ns1__AdminLoginRightsJPN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminLoginRightsJPN);
	if (soap_out_PointerTo_ns1__AdminLoginRightsJPN(soap, tag?tag:"ns1:AdminLoginRightsJPN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminLoginRightsJPN ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminLoginRightsJPN(struct soap *soap, _ns1__AdminLoginRightsJPN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminLoginRightsJPN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminJPNSearchRightsInfoList(struct soap *soap, _ns1__AdminJPNSearchRightsInfoList *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminJPNSearchRightsInfoList))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminJPNSearchRightsInfoList(struct soap *soap, const char *tag, int id, _ns1__AdminJPNSearchRightsInfoList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminJPNSearchRightsInfoList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminJPNSearchRightsInfoList ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminJPNSearchRightsInfoList(struct soap *soap, const char *tag, _ns1__AdminJPNSearchRightsInfoList **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminJPNSearchRightsInfoList **)soap_malloc(soap, sizeof(_ns1__AdminJPNSearchRightsInfoList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminJPNSearchRightsInfoList *)soap_instantiate__ns1__AdminJPNSearchRightsInfoList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminJPNSearchRightsInfoList ** p = (_ns1__AdminJPNSearchRightsInfoList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminJPNSearchRightsInfoList, sizeof(_ns1__AdminJPNSearchRightsInfoList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminJPNSearchRightsInfoList(struct soap *soap, _ns1__AdminJPNSearchRightsInfoList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminJPNSearchRightsInfoList);
	if (soap_out_PointerTo_ns1__AdminJPNSearchRightsInfoList(soap, tag?tag:"ns1:AdminJPNSearchRightsInfoList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminJPNSearchRightsInfoList ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminJPNSearchRightsInfoList(struct soap *soap, _ns1__AdminJPNSearchRightsInfoList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminJPNSearchRightsInfoList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminJPNSetRightsInfo(struct soap *soap, _ns1__AdminJPNSetRightsInfo *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminJPNSetRightsInfo))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminJPNSetRightsInfo(struct soap *soap, const char *tag, int id, _ns1__AdminJPNSetRightsInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminJPNSetRightsInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminJPNSetRightsInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminJPNSetRightsInfo(struct soap *soap, const char *tag, _ns1__AdminJPNSetRightsInfo **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminJPNSetRightsInfo **)soap_malloc(soap, sizeof(_ns1__AdminJPNSetRightsInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminJPNSetRightsInfo *)soap_instantiate__ns1__AdminJPNSetRightsInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminJPNSetRightsInfo ** p = (_ns1__AdminJPNSetRightsInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminJPNSetRightsInfo, sizeof(_ns1__AdminJPNSetRightsInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminJPNSetRightsInfo(struct soap *soap, _ns1__AdminJPNSetRightsInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminJPNSetRightsInfo);
	if (soap_out_PointerTo_ns1__AdminJPNSetRightsInfo(soap, tag?tag:"ns1:AdminJPNSetRightsInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminJPNSetRightsInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminJPNSetRightsInfo(struct soap *soap, _ns1__AdminJPNSetRightsInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminJPNSetRightsInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID(struct soap *soap, _ns1__AdminJPNGetRightsInfoByLyricID *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricID))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID(struct soap *soap, const char *tag, int id, _ns1__AdminJPNGetRightsInfoByLyricID *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricID);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminJPNGetRightsInfoByLyricID ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID(struct soap *soap, const char *tag, _ns1__AdminJPNGetRightsInfoByLyricID **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminJPNGetRightsInfoByLyricID **)soap_malloc(soap, sizeof(_ns1__AdminJPNGetRightsInfoByLyricID *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminJPNGetRightsInfoByLyricID *)soap_instantiate__ns1__AdminJPNGetRightsInfoByLyricID(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminJPNGetRightsInfoByLyricID ** p = (_ns1__AdminJPNGetRightsInfoByLyricID **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByLyricID, sizeof(_ns1__AdminJPNGetRightsInfoByLyricID), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID(struct soap *soap, _ns1__AdminJPNGetRightsInfoByLyricID *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID);
	if (soap_out_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID(soap, tag?tag:"ns1:AdminJPNGetRightsInfoByLyricID", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminJPNGetRightsInfoByLyricID ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID(struct soap *soap, _ns1__AdminJPNGetRightsInfoByLyricID **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminJPNGetRightsInfoByLyricID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID(struct soap *soap, _ns1__AdminJPNGetRightsInfoByModifyID *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyID))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID(struct soap *soap, const char *tag, int id, _ns1__AdminJPNGetRightsInfoByModifyID *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyID);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminJPNGetRightsInfoByModifyID ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID(struct soap *soap, const char *tag, _ns1__AdminJPNGetRightsInfoByModifyID **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminJPNGetRightsInfoByModifyID **)soap_malloc(soap, sizeof(_ns1__AdminJPNGetRightsInfoByModifyID *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminJPNGetRightsInfoByModifyID *)soap_instantiate__ns1__AdminJPNGetRightsInfoByModifyID(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminJPNGetRightsInfoByModifyID ** p = (_ns1__AdminJPNGetRightsInfoByModifyID **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminJPNGetRightsInfoByModifyID, sizeof(_ns1__AdminJPNGetRightsInfoByModifyID), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID(struct soap *soap, _ns1__AdminJPNGetRightsInfoByModifyID *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID);
	if (soap_out_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID(soap, tag?tag:"ns1:AdminJPNGetRightsInfoByModifyID", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminJPNGetRightsInfoByModifyID ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID(struct soap *soap, _ns1__AdminJPNGetRightsInfoByModifyID **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminJPNGetRightsInfoByModifyID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetLyricByID2(struct soap *soap, _ns1__GetLyricByID2 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetLyricByID2))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetLyricByID2(struct soap *soap, const char *tag, int id, _ns1__GetLyricByID2 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetLyricByID2);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetLyricByID2 ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetLyricByID2(struct soap *soap, const char *tag, _ns1__GetLyricByID2 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetLyricByID2 **)soap_malloc(soap, sizeof(_ns1__GetLyricByID2 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetLyricByID2 *)soap_instantiate__ns1__GetLyricByID2(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetLyricByID2 ** p = (_ns1__GetLyricByID2 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetLyricByID2, sizeof(_ns1__GetLyricByID2), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetLyricByID2(struct soap *soap, _ns1__GetLyricByID2 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetLyricByID2);
	if (soap_out_PointerTo_ns1__GetLyricByID2(soap, tag?tag:"ns1:GetLyricByID2", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetLyricByID2 ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetLyricByID2(struct soap *soap, _ns1__GetLyricByID2 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetLyricByID2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetLyricByID(struct soap *soap, _ns1__GetLyricByID *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetLyricByID))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetLyricByID(struct soap *soap, const char *tag, int id, _ns1__GetLyricByID *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetLyricByID);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetLyricByID ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetLyricByID(struct soap *soap, const char *tag, _ns1__GetLyricByID **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetLyricByID **)soap_malloc(soap, sizeof(_ns1__GetLyricByID *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetLyricByID *)soap_instantiate__ns1__GetLyricByID(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetLyricByID ** p = (_ns1__GetLyricByID **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetLyricByID, sizeof(_ns1__GetLyricByID), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetLyricByID(struct soap *soap, _ns1__GetLyricByID *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetLyricByID);
	if (soap_out_PointerTo_ns1__GetLyricByID(soap, tag?tag:"ns1:GetLyricByID", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetLyricByID ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetLyricByID(struct soap *soap, _ns1__GetLyricByID **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetLyricByID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetResembleLyricList2(struct soap *soap, _ns1__GetResembleLyricList2 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetResembleLyricList2))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetResembleLyricList2(struct soap *soap, const char *tag, int id, _ns1__GetResembleLyricList2 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetResembleLyricList2);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetResembleLyricList2 ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetResembleLyricList2(struct soap *soap, const char *tag, _ns1__GetResembleLyricList2 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetResembleLyricList2 **)soap_malloc(soap, sizeof(_ns1__GetResembleLyricList2 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetResembleLyricList2 *)soap_instantiate__ns1__GetResembleLyricList2(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetResembleLyricList2 ** p = (_ns1__GetResembleLyricList2 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetResembleLyricList2, sizeof(_ns1__GetResembleLyricList2), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetResembleLyricList2(struct soap *soap, _ns1__GetResembleLyricList2 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetResembleLyricList2);
	if (soap_out_PointerTo_ns1__GetResembleLyricList2(soap, tag?tag:"ns1:GetResembleLyricList2", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetResembleLyricList2 ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetResembleLyricList2(struct soap *soap, _ns1__GetResembleLyricList2 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetResembleLyricList2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetResembleLyricList(struct soap *soap, _ns1__GetResembleLyricList *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetResembleLyricList))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetResembleLyricList(struct soap *soap, const char *tag, int id, _ns1__GetResembleLyricList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetResembleLyricList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetResembleLyricList ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetResembleLyricList(struct soap *soap, const char *tag, _ns1__GetResembleLyricList **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetResembleLyricList **)soap_malloc(soap, sizeof(_ns1__GetResembleLyricList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetResembleLyricList *)soap_instantiate__ns1__GetResembleLyricList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetResembleLyricList ** p = (_ns1__GetResembleLyricList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetResembleLyricList, sizeof(_ns1__GetResembleLyricList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetResembleLyricList(struct soap *soap, _ns1__GetResembleLyricList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetResembleLyricList);
	if (soap_out_PointerTo_ns1__GetResembleLyricList(soap, tag?tag:"ns1:GetResembleLyricList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetResembleLyricList ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetResembleLyricList(struct soap *soap, _ns1__GetResembleLyricList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetResembleLyricList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UploadForeignLyric(struct soap *soap, _ns1__UploadForeignLyric *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__UploadForeignLyric))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UploadForeignLyric(struct soap *soap, const char *tag, int id, _ns1__UploadForeignLyric *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__UploadForeignLyric);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__UploadForeignLyric ** SOAP_FMAC4 soap_in_PointerTo_ns1__UploadForeignLyric(struct soap *soap, const char *tag, _ns1__UploadForeignLyric **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__UploadForeignLyric **)soap_malloc(soap, sizeof(_ns1__UploadForeignLyric *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__UploadForeignLyric *)soap_instantiate__ns1__UploadForeignLyric(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__UploadForeignLyric ** p = (_ns1__UploadForeignLyric **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__UploadForeignLyric, sizeof(_ns1__UploadForeignLyric), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UploadForeignLyric(struct soap *soap, _ns1__UploadForeignLyric *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__UploadForeignLyric);
	if (soap_out_PointerTo_ns1__UploadForeignLyric(soap, tag?tag:"ns1:UploadForeignLyric", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__UploadForeignLyric ** SOAP_FMAC4 soap_get_PointerTo_ns1__UploadForeignLyric(struct soap *soap, _ns1__UploadForeignLyric **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__UploadForeignLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetBroadcastingList2(struct soap *soap, _ns1__GetBroadcastingList2 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetBroadcastingList2))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetBroadcastingList2(struct soap *soap, const char *tag, int id, _ns1__GetBroadcastingList2 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetBroadcastingList2);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetBroadcastingList2 ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetBroadcastingList2(struct soap *soap, const char *tag, _ns1__GetBroadcastingList2 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetBroadcastingList2 **)soap_malloc(soap, sizeof(_ns1__GetBroadcastingList2 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetBroadcastingList2 *)soap_instantiate__ns1__GetBroadcastingList2(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetBroadcastingList2 ** p = (_ns1__GetBroadcastingList2 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetBroadcastingList2, sizeof(_ns1__GetBroadcastingList2), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetBroadcastingList2(struct soap *soap, _ns1__GetBroadcastingList2 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetBroadcastingList2);
	if (soap_out_PointerTo_ns1__GetBroadcastingList2(soap, tag?tag:"ns1:GetBroadcastingList2", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetBroadcastingList2 ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetBroadcastingList2(struct soap *soap, _ns1__GetBroadcastingList2 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetBroadcastingList2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetBroadcastingList(struct soap *soap, _ns1__GetBroadcastingList *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetBroadcastingList))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetBroadcastingList(struct soap *soap, const char *tag, int id, _ns1__GetBroadcastingList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetBroadcastingList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetBroadcastingList ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetBroadcastingList(struct soap *soap, const char *tag, _ns1__GetBroadcastingList **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetBroadcastingList **)soap_malloc(soap, sizeof(_ns1__GetBroadcastingList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetBroadcastingList *)soap_instantiate__ns1__GetBroadcastingList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetBroadcastingList ** p = (_ns1__GetBroadcastingList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetBroadcastingList, sizeof(_ns1__GetBroadcastingList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetBroadcastingList(struct soap *soap, _ns1__GetBroadcastingList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetBroadcastingList);
	if (soap_out_PointerTo_ns1__GetBroadcastingList(soap, tag?tag:"ns1:GetBroadcastingList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetBroadcastingList ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetBroadcastingList(struct soap *soap, _ns1__GetBroadcastingList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetBroadcastingList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CastGetExMetaDataList3(struct soap *soap, _ns1__CastGetExMetaDataList3 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CastGetExMetaDataList3))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CastGetExMetaDataList3(struct soap *soap, const char *tag, int id, _ns1__CastGetExMetaDataList3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CastGetExMetaDataList3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataList3 ** SOAP_FMAC4 soap_in_PointerTo_ns1__CastGetExMetaDataList3(struct soap *soap, const char *tag, _ns1__CastGetExMetaDataList3 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CastGetExMetaDataList3 **)soap_malloc(soap, sizeof(_ns1__CastGetExMetaDataList3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CastGetExMetaDataList3 *)soap_instantiate__ns1__CastGetExMetaDataList3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CastGetExMetaDataList3 ** p = (_ns1__CastGetExMetaDataList3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CastGetExMetaDataList3, sizeof(_ns1__CastGetExMetaDataList3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CastGetExMetaDataList3(struct soap *soap, _ns1__CastGetExMetaDataList3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__CastGetExMetaDataList3);
	if (soap_out_PointerTo_ns1__CastGetExMetaDataList3(soap, tag?tag:"ns1:CastGetExMetaDataList3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataList3 ** SOAP_FMAC4 soap_get_PointerTo_ns1__CastGetExMetaDataList3(struct soap *soap, _ns1__CastGetExMetaDataList3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CastGetExMetaDataList3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CastGetExMetaDataList2(struct soap *soap, _ns1__CastGetExMetaDataList2 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CastGetExMetaDataList2))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CastGetExMetaDataList2(struct soap *soap, const char *tag, int id, _ns1__CastGetExMetaDataList2 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CastGetExMetaDataList2);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataList2 ** SOAP_FMAC4 soap_in_PointerTo_ns1__CastGetExMetaDataList2(struct soap *soap, const char *tag, _ns1__CastGetExMetaDataList2 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CastGetExMetaDataList2 **)soap_malloc(soap, sizeof(_ns1__CastGetExMetaDataList2 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CastGetExMetaDataList2 *)soap_instantiate__ns1__CastGetExMetaDataList2(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CastGetExMetaDataList2 ** p = (_ns1__CastGetExMetaDataList2 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CastGetExMetaDataList2, sizeof(_ns1__CastGetExMetaDataList2), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CastGetExMetaDataList2(struct soap *soap, _ns1__CastGetExMetaDataList2 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__CastGetExMetaDataList2);
	if (soap_out_PointerTo_ns1__CastGetExMetaDataList2(soap, tag?tag:"ns1:CastGetExMetaDataList2", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataList2 ** SOAP_FMAC4 soap_get_PointerTo_ns1__CastGetExMetaDataList2(struct soap *soap, _ns1__CastGetExMetaDataList2 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CastGetExMetaDataList2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CastGetExMetaDataList(struct soap *soap, _ns1__CastGetExMetaDataList *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CastGetExMetaDataList))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CastGetExMetaDataList(struct soap *soap, const char *tag, int id, _ns1__CastGetExMetaDataList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CastGetExMetaDataList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataList ** SOAP_FMAC4 soap_in_PointerTo_ns1__CastGetExMetaDataList(struct soap *soap, const char *tag, _ns1__CastGetExMetaDataList **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CastGetExMetaDataList **)soap_malloc(soap, sizeof(_ns1__CastGetExMetaDataList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CastGetExMetaDataList *)soap_instantiate__ns1__CastGetExMetaDataList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CastGetExMetaDataList ** p = (_ns1__CastGetExMetaDataList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CastGetExMetaDataList, sizeof(_ns1__CastGetExMetaDataList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CastGetExMetaDataList(struct soap *soap, _ns1__CastGetExMetaDataList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__CastGetExMetaDataList);
	if (soap_out_PointerTo_ns1__CastGetExMetaDataList(soap, tag?tag:"ns1:CastGetExMetaDataList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CastGetExMetaDataList ** SOAP_FMAC4 soap_get_PointerTo_ns1__CastGetExMetaDataList(struct soap *soap, _ns1__CastGetExMetaDataList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CastGetExMetaDataList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CastGetExMetaData(struct soap *soap, _ns1__CastGetExMetaData *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CastGetExMetaData))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CastGetExMetaData(struct soap *soap, const char *tag, int id, _ns1__CastGetExMetaData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CastGetExMetaData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CastGetExMetaData ** SOAP_FMAC4 soap_in_PointerTo_ns1__CastGetExMetaData(struct soap *soap, const char *tag, _ns1__CastGetExMetaData **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CastGetExMetaData **)soap_malloc(soap, sizeof(_ns1__CastGetExMetaData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CastGetExMetaData *)soap_instantiate__ns1__CastGetExMetaData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CastGetExMetaData ** p = (_ns1__CastGetExMetaData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CastGetExMetaData, sizeof(_ns1__CastGetExMetaData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CastGetExMetaData(struct soap *soap, _ns1__CastGetExMetaData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__CastGetExMetaData);
	if (soap_out_PointerTo_ns1__CastGetExMetaData(soap, tag?tag:"ns1:CastGetExMetaData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CastGetExMetaData ** SOAP_FMAC4 soap_get_PointerTo_ns1__CastGetExMetaData(struct soap *soap, _ns1__CastGetExMetaData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CastGetExMetaData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CastRemoveExMetaData(struct soap *soap, _ns1__CastRemoveExMetaData *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CastRemoveExMetaData))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CastRemoveExMetaData(struct soap *soap, const char *tag, int id, _ns1__CastRemoveExMetaData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CastRemoveExMetaData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CastRemoveExMetaData ** SOAP_FMAC4 soap_in_PointerTo_ns1__CastRemoveExMetaData(struct soap *soap, const char *tag, _ns1__CastRemoveExMetaData **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CastRemoveExMetaData **)soap_malloc(soap, sizeof(_ns1__CastRemoveExMetaData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CastRemoveExMetaData *)soap_instantiate__ns1__CastRemoveExMetaData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CastRemoveExMetaData ** p = (_ns1__CastRemoveExMetaData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CastRemoveExMetaData, sizeof(_ns1__CastRemoveExMetaData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CastRemoveExMetaData(struct soap *soap, _ns1__CastRemoveExMetaData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__CastRemoveExMetaData);
	if (soap_out_PointerTo_ns1__CastRemoveExMetaData(soap, tag?tag:"ns1:CastRemoveExMetaData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CastRemoveExMetaData ** SOAP_FMAC4 soap_get_PointerTo_ns1__CastRemoveExMetaData(struct soap *soap, _ns1__CastRemoveExMetaData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CastRemoveExMetaData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CastUploadExMetaData3(struct soap *soap, _ns1__CastUploadExMetaData3 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CastUploadExMetaData3))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CastUploadExMetaData3(struct soap *soap, const char *tag, int id, _ns1__CastUploadExMetaData3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CastUploadExMetaData3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CastUploadExMetaData3 ** SOAP_FMAC4 soap_in_PointerTo_ns1__CastUploadExMetaData3(struct soap *soap, const char *tag, _ns1__CastUploadExMetaData3 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CastUploadExMetaData3 **)soap_malloc(soap, sizeof(_ns1__CastUploadExMetaData3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CastUploadExMetaData3 *)soap_instantiate__ns1__CastUploadExMetaData3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CastUploadExMetaData3 ** p = (_ns1__CastUploadExMetaData3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CastUploadExMetaData3, sizeof(_ns1__CastUploadExMetaData3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CastUploadExMetaData3(struct soap *soap, _ns1__CastUploadExMetaData3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__CastUploadExMetaData3);
	if (soap_out_PointerTo_ns1__CastUploadExMetaData3(soap, tag?tag:"ns1:CastUploadExMetaData3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CastUploadExMetaData3 ** SOAP_FMAC4 soap_get_PointerTo_ns1__CastUploadExMetaData3(struct soap *soap, _ns1__CastUploadExMetaData3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CastUploadExMetaData3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CastUploadExMetaData2(struct soap *soap, _ns1__CastUploadExMetaData2 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CastUploadExMetaData2))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CastUploadExMetaData2(struct soap *soap, const char *tag, int id, _ns1__CastUploadExMetaData2 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CastUploadExMetaData2);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CastUploadExMetaData2 ** SOAP_FMAC4 soap_in_PointerTo_ns1__CastUploadExMetaData2(struct soap *soap, const char *tag, _ns1__CastUploadExMetaData2 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CastUploadExMetaData2 **)soap_malloc(soap, sizeof(_ns1__CastUploadExMetaData2 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CastUploadExMetaData2 *)soap_instantiate__ns1__CastUploadExMetaData2(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CastUploadExMetaData2 ** p = (_ns1__CastUploadExMetaData2 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CastUploadExMetaData2, sizeof(_ns1__CastUploadExMetaData2), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CastUploadExMetaData2(struct soap *soap, _ns1__CastUploadExMetaData2 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__CastUploadExMetaData2);
	if (soap_out_PointerTo_ns1__CastUploadExMetaData2(soap, tag?tag:"ns1:CastUploadExMetaData2", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CastUploadExMetaData2 ** SOAP_FMAC4 soap_get_PointerTo_ns1__CastUploadExMetaData2(struct soap *soap, _ns1__CastUploadExMetaData2 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CastUploadExMetaData2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CastUploadExMetaData(struct soap *soap, _ns1__CastUploadExMetaData *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CastUploadExMetaData))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CastUploadExMetaData(struct soap *soap, const char *tag, int id, _ns1__CastUploadExMetaData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CastUploadExMetaData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CastUploadExMetaData ** SOAP_FMAC4 soap_in_PointerTo_ns1__CastUploadExMetaData(struct soap *soap, const char *tag, _ns1__CastUploadExMetaData **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CastUploadExMetaData **)soap_malloc(soap, sizeof(_ns1__CastUploadExMetaData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CastUploadExMetaData *)soap_instantiate__ns1__CastUploadExMetaData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CastUploadExMetaData ** p = (_ns1__CastUploadExMetaData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CastUploadExMetaData, sizeof(_ns1__CastUploadExMetaData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CastUploadExMetaData(struct soap *soap, _ns1__CastUploadExMetaData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__CastUploadExMetaData);
	if (soap_out_PointerTo_ns1__CastUploadExMetaData(soap, tag?tag:"ns1:CastUploadExMetaData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CastUploadExMetaData ** SOAP_FMAC4 soap_get_PointerTo_ns1__CastUploadExMetaData(struct soap *soap, _ns1__CastUploadExMetaData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CastUploadExMetaData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminGetAlbaStatistic(struct soap *soap, _ns1__AdminGetAlbaStatistic *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminGetAlbaStatistic))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminGetAlbaStatistic(struct soap *soap, const char *tag, int id, _ns1__AdminGetAlbaStatistic *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminGetAlbaStatistic);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminGetAlbaStatistic ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminGetAlbaStatistic(struct soap *soap, const char *tag, _ns1__AdminGetAlbaStatistic **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminGetAlbaStatistic **)soap_malloc(soap, sizeof(_ns1__AdminGetAlbaStatistic *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminGetAlbaStatistic *)soap_instantiate__ns1__AdminGetAlbaStatistic(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminGetAlbaStatistic ** p = (_ns1__AdminGetAlbaStatistic **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminGetAlbaStatistic, sizeof(_ns1__AdminGetAlbaStatistic), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminGetAlbaStatistic(struct soap *soap, _ns1__AdminGetAlbaStatistic *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminGetAlbaStatistic);
	if (soap_out_PointerTo_ns1__AdminGetAlbaStatistic(soap, tag?tag:"ns1:AdminGetAlbaStatistic", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminGetAlbaStatistic ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminGetAlbaStatistic(struct soap *soap, _ns1__AdminGetAlbaStatistic **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminGetAlbaStatistic(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminGetCountReport(struct soap *soap, _ns1__AdminGetCountReport *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminGetCountReport))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminGetCountReport(struct soap *soap, const char *tag, int id, _ns1__AdminGetCountReport *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminGetCountReport);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminGetCountReport ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminGetCountReport(struct soap *soap, const char *tag, _ns1__AdminGetCountReport **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminGetCountReport **)soap_malloc(soap, sizeof(_ns1__AdminGetCountReport *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminGetCountReport *)soap_instantiate__ns1__AdminGetCountReport(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminGetCountReport ** p = (_ns1__AdminGetCountReport **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminGetCountReport, sizeof(_ns1__AdminGetCountReport), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminGetCountReport(struct soap *soap, _ns1__AdminGetCountReport *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminGetCountReport);
	if (soap_out_PointerTo_ns1__AdminGetCountReport(soap, tag?tag:"ns1:AdminGetCountReport", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminGetCountReport ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminGetCountReport(struct soap *soap, _ns1__AdminGetCountReport **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminGetCountReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminGetCountModify(struct soap *soap, _ns1__AdminGetCountModify *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminGetCountModify))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminGetCountModify(struct soap *soap, const char *tag, int id, _ns1__AdminGetCountModify *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminGetCountModify);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminGetCountModify ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminGetCountModify(struct soap *soap, const char *tag, _ns1__AdminGetCountModify **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminGetCountModify **)soap_malloc(soap, sizeof(_ns1__AdminGetCountModify *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminGetCountModify *)soap_instantiate__ns1__AdminGetCountModify(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminGetCountModify ** p = (_ns1__AdminGetCountModify **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminGetCountModify, sizeof(_ns1__AdminGetCountModify), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminGetCountModify(struct soap *soap, _ns1__AdminGetCountModify *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminGetCountModify);
	if (soap_out_PointerTo_ns1__AdminGetCountModify(soap, tag?tag:"ns1:AdminGetCountModify", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminGetCountModify ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminGetCountModify(struct soap *soap, _ns1__AdminGetCountModify **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminGetCountModify(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminGetCountLyric(struct soap *soap, _ns1__AdminGetCountLyric *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminGetCountLyric))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminGetCountLyric(struct soap *soap, const char *tag, int id, _ns1__AdminGetCountLyric *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminGetCountLyric);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminGetCountLyric ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminGetCountLyric(struct soap *soap, const char *tag, _ns1__AdminGetCountLyric **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminGetCountLyric **)soap_malloc(soap, sizeof(_ns1__AdminGetCountLyric *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminGetCountLyric *)soap_instantiate__ns1__AdminGetCountLyric(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminGetCountLyric ** p = (_ns1__AdminGetCountLyric **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminGetCountLyric, sizeof(_ns1__AdminGetCountLyric), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminGetCountLyric(struct soap *soap, _ns1__AdminGetCountLyric *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminGetCountLyric);
	if (soap_out_PointerTo_ns1__AdminGetCountLyric(soap, tag?tag:"ns1:AdminGetCountLyric", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminGetCountLyric ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminGetCountLyric(struct soap *soap, _ns1__AdminGetCountLyric **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminGetCountLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminGetCountChecksum(struct soap *soap, _ns1__AdminGetCountChecksum *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminGetCountChecksum))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminGetCountChecksum(struct soap *soap, const char *tag, int id, _ns1__AdminGetCountChecksum *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminGetCountChecksum);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminGetCountChecksum ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminGetCountChecksum(struct soap *soap, const char *tag, _ns1__AdminGetCountChecksum **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminGetCountChecksum **)soap_malloc(soap, sizeof(_ns1__AdminGetCountChecksum *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminGetCountChecksum *)soap_instantiate__ns1__AdminGetCountChecksum(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminGetCountChecksum ** p = (_ns1__AdminGetCountChecksum **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminGetCountChecksum, sizeof(_ns1__AdminGetCountChecksum), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminGetCountChecksum(struct soap *soap, _ns1__AdminGetCountChecksum *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminGetCountChecksum);
	if (soap_out_PointerTo_ns1__AdminGetCountChecksum(soap, tag?tag:"ns1:AdminGetCountChecksum", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminGetCountChecksum ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminGetCountChecksum(struct soap *soap, _ns1__AdminGetCountChecksum **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminGetCountChecksum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminGetCountInRegister(struct soap *soap, _ns1__AdminGetCountInRegister *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminGetCountInRegister))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminGetCountInRegister(struct soap *soap, const char *tag, int id, _ns1__AdminGetCountInRegister *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminGetCountInRegister);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminGetCountInRegister ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminGetCountInRegister(struct soap *soap, const char *tag, _ns1__AdminGetCountInRegister **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminGetCountInRegister **)soap_malloc(soap, sizeof(_ns1__AdminGetCountInRegister *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminGetCountInRegister *)soap_instantiate__ns1__AdminGetCountInRegister(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminGetCountInRegister ** p = (_ns1__AdminGetCountInRegister **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminGetCountInRegister, sizeof(_ns1__AdminGetCountInRegister), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminGetCountInRegister(struct soap *soap, _ns1__AdminGetCountInRegister *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminGetCountInRegister);
	if (soap_out_PointerTo_ns1__AdminGetCountInRegister(soap, tag?tag:"ns1:AdminGetCountInRegister", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminGetCountInRegister ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminGetCountInRegister(struct soap *soap, _ns1__AdminGetCountInRegister **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminGetCountInRegister(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminReportBlackList(struct soap *soap, _ns1__AdminReportBlackList *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminReportBlackList))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminReportBlackList(struct soap *soap, const char *tag, int id, _ns1__AdminReportBlackList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminReportBlackList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminReportBlackList ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminReportBlackList(struct soap *soap, const char *tag, _ns1__AdminReportBlackList **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminReportBlackList **)soap_malloc(soap, sizeof(_ns1__AdminReportBlackList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminReportBlackList *)soap_instantiate__ns1__AdminReportBlackList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminReportBlackList ** p = (_ns1__AdminReportBlackList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminReportBlackList, sizeof(_ns1__AdminReportBlackList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminReportBlackList(struct soap *soap, _ns1__AdminReportBlackList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminReportBlackList);
	if (soap_out_PointerTo_ns1__AdminReportBlackList(soap, tag?tag:"ns1:AdminReportBlackList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminReportBlackList ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminReportBlackList(struct soap *soap, _ns1__AdminReportBlackList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminReportBlackList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminAdmitModifyLyric(struct soap *soap, _ns1__AdminAdmitModifyLyric *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminAdmitModifyLyric))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminAdmitModifyLyric(struct soap *soap, const char *tag, int id, _ns1__AdminAdmitModifyLyric *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminAdmitModifyLyric);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminAdmitModifyLyric ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminAdmitModifyLyric(struct soap *soap, const char *tag, _ns1__AdminAdmitModifyLyric **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminAdmitModifyLyric **)soap_malloc(soap, sizeof(_ns1__AdminAdmitModifyLyric *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminAdmitModifyLyric *)soap_instantiate__ns1__AdminAdmitModifyLyric(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminAdmitModifyLyric ** p = (_ns1__AdminAdmitModifyLyric **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminAdmitModifyLyric, sizeof(_ns1__AdminAdmitModifyLyric), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminAdmitModifyLyric(struct soap *soap, _ns1__AdminAdmitModifyLyric *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminAdmitModifyLyric);
	if (soap_out_PointerTo_ns1__AdminAdmitModifyLyric(soap, tag?tag:"ns1:AdminAdmitModifyLyric", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminAdmitModifyLyric ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminAdmitModifyLyric(struct soap *soap, _ns1__AdminAdmitModifyLyric **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminAdmitModifyLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminDeleteRecord(struct soap *soap, _ns1__AdminDeleteRecord *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminDeleteRecord))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminDeleteRecord(struct soap *soap, const char *tag, int id, _ns1__AdminDeleteRecord *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminDeleteRecord);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminDeleteRecord ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminDeleteRecord(struct soap *soap, const char *tag, _ns1__AdminDeleteRecord **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminDeleteRecord **)soap_malloc(soap, sizeof(_ns1__AdminDeleteRecord *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminDeleteRecord *)soap_instantiate__ns1__AdminDeleteRecord(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminDeleteRecord ** p = (_ns1__AdminDeleteRecord **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminDeleteRecord, sizeof(_ns1__AdminDeleteRecord), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminDeleteRecord(struct soap *soap, _ns1__AdminDeleteRecord *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminDeleteRecord);
	if (soap_out_PointerTo_ns1__AdminDeleteRecord(soap, tag?tag:"ns1:AdminDeleteRecord", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminDeleteRecord ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminDeleteRecord(struct soap *soap, _ns1__AdminDeleteRecord **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminDeleteRecord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MemberGetMemberLicenseList(struct soap *soap, _ns1__MemberGetMemberLicenseList *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__MemberGetMemberLicenseList))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MemberGetMemberLicenseList(struct soap *soap, const char *tag, int id, _ns1__MemberGetMemberLicenseList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__MemberGetMemberLicenseList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__MemberGetMemberLicenseList ** SOAP_FMAC4 soap_in_PointerTo_ns1__MemberGetMemberLicenseList(struct soap *soap, const char *tag, _ns1__MemberGetMemberLicenseList **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__MemberGetMemberLicenseList **)soap_malloc(soap, sizeof(_ns1__MemberGetMemberLicenseList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__MemberGetMemberLicenseList *)soap_instantiate__ns1__MemberGetMemberLicenseList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__MemberGetMemberLicenseList ** p = (_ns1__MemberGetMemberLicenseList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__MemberGetMemberLicenseList, sizeof(_ns1__MemberGetMemberLicenseList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MemberGetMemberLicenseList(struct soap *soap, _ns1__MemberGetMemberLicenseList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__MemberGetMemberLicenseList);
	if (soap_out_PointerTo_ns1__MemberGetMemberLicenseList(soap, tag?tag:"ns1:MemberGetMemberLicenseList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__MemberGetMemberLicenseList ** SOAP_FMAC4 soap_get_PointerTo_ns1__MemberGetMemberLicenseList(struct soap *soap, _ns1__MemberGetMemberLicenseList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__MemberGetMemberLicenseList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MemberGetMemberList(struct soap *soap, _ns1__MemberGetMemberList *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__MemberGetMemberList))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MemberGetMemberList(struct soap *soap, const char *tag, int id, _ns1__MemberGetMemberList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__MemberGetMemberList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__MemberGetMemberList ** SOAP_FMAC4 soap_in_PointerTo_ns1__MemberGetMemberList(struct soap *soap, const char *tag, _ns1__MemberGetMemberList **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__MemberGetMemberList **)soap_malloc(soap, sizeof(_ns1__MemberGetMemberList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__MemberGetMemberList *)soap_instantiate__ns1__MemberGetMemberList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__MemberGetMemberList ** p = (_ns1__MemberGetMemberList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__MemberGetMemberList, sizeof(_ns1__MemberGetMemberList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MemberGetMemberList(struct soap *soap, _ns1__MemberGetMemberList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__MemberGetMemberList);
	if (soap_out_PointerTo_ns1__MemberGetMemberList(soap, tag?tag:"ns1:MemberGetMemberList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__MemberGetMemberList ** SOAP_FMAC4 soap_get_PointerTo_ns1__MemberGetMemberList(struct soap *soap, _ns1__MemberGetMemberList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__MemberGetMemberList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MemberModifyMemberLicense(struct soap *soap, _ns1__MemberModifyMemberLicense *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__MemberModifyMemberLicense))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MemberModifyMemberLicense(struct soap *soap, const char *tag, int id, _ns1__MemberModifyMemberLicense *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__MemberModifyMemberLicense);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__MemberModifyMemberLicense ** SOAP_FMAC4 soap_in_PointerTo_ns1__MemberModifyMemberLicense(struct soap *soap, const char *tag, _ns1__MemberModifyMemberLicense **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__MemberModifyMemberLicense **)soap_malloc(soap, sizeof(_ns1__MemberModifyMemberLicense *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__MemberModifyMemberLicense *)soap_instantiate__ns1__MemberModifyMemberLicense(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__MemberModifyMemberLicense ** p = (_ns1__MemberModifyMemberLicense **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__MemberModifyMemberLicense, sizeof(_ns1__MemberModifyMemberLicense), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MemberModifyMemberLicense(struct soap *soap, _ns1__MemberModifyMemberLicense *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__MemberModifyMemberLicense);
	if (soap_out_PointerTo_ns1__MemberModifyMemberLicense(soap, tag?tag:"ns1:MemberModifyMemberLicense", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__MemberModifyMemberLicense ** SOAP_FMAC4 soap_get_PointerTo_ns1__MemberModifyMemberLicense(struct soap *soap, _ns1__MemberModifyMemberLicense **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__MemberModifyMemberLicense(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MemberApplyRegistration(struct soap *soap, _ns1__MemberApplyRegistration *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__MemberApplyRegistration))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MemberApplyRegistration(struct soap *soap, const char *tag, int id, _ns1__MemberApplyRegistration *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__MemberApplyRegistration);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__MemberApplyRegistration ** SOAP_FMAC4 soap_in_PointerTo_ns1__MemberApplyRegistration(struct soap *soap, const char *tag, _ns1__MemberApplyRegistration **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__MemberApplyRegistration **)soap_malloc(soap, sizeof(_ns1__MemberApplyRegistration *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__MemberApplyRegistration *)soap_instantiate__ns1__MemberApplyRegistration(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__MemberApplyRegistration ** p = (_ns1__MemberApplyRegistration **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__MemberApplyRegistration, sizeof(_ns1__MemberApplyRegistration), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MemberApplyRegistration(struct soap *soap, _ns1__MemberApplyRegistration *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__MemberApplyRegistration);
	if (soap_out_PointerTo_ns1__MemberApplyRegistration(soap, tag?tag:"ns1:MemberApplyRegistration", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__MemberApplyRegistration ** SOAP_FMAC4 soap_get_PointerTo_ns1__MemberApplyRegistration(struct soap *soap, _ns1__MemberApplyRegistration **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__MemberApplyRegistration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MemberLogout(struct soap *soap, _ns1__MemberLogout *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__MemberLogout))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MemberLogout(struct soap *soap, const char *tag, int id, _ns1__MemberLogout *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__MemberLogout);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__MemberLogout ** SOAP_FMAC4 soap_in_PointerTo_ns1__MemberLogout(struct soap *soap, const char *tag, _ns1__MemberLogout **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__MemberLogout **)soap_malloc(soap, sizeof(_ns1__MemberLogout *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__MemberLogout *)soap_instantiate__ns1__MemberLogout(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__MemberLogout ** p = (_ns1__MemberLogout **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__MemberLogout, sizeof(_ns1__MemberLogout), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MemberLogout(struct soap *soap, _ns1__MemberLogout *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__MemberLogout);
	if (soap_out_PointerTo_ns1__MemberLogout(soap, tag?tag:"ns1:MemberLogout", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__MemberLogout ** SOAP_FMAC4 soap_get_PointerTo_ns1__MemberLogout(struct soap *soap, _ns1__MemberLogout **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__MemberLogout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MemberLogin(struct soap *soap, _ns1__MemberLogin *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__MemberLogin))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MemberLogin(struct soap *soap, const char *tag, int id, _ns1__MemberLogin *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__MemberLogin);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__MemberLogin ** SOAP_FMAC4 soap_in_PointerTo_ns1__MemberLogin(struct soap *soap, const char *tag, _ns1__MemberLogin **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__MemberLogin **)soap_malloc(soap, sizeof(_ns1__MemberLogin *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__MemberLogin *)soap_instantiate__ns1__MemberLogin(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__MemberLogin ** p = (_ns1__MemberLogin **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__MemberLogin, sizeof(_ns1__MemberLogin), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MemberLogin(struct soap *soap, _ns1__MemberLogin *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__MemberLogin);
	if (soap_out_PointerTo_ns1__MemberLogin(soap, tag?tag:"ns1:MemberLogin", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__MemberLogin ** SOAP_FMAC4 soap_get_PointerTo_ns1__MemberLogin(struct soap *soap, _ns1__MemberLogin **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__MemberLogin(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MemberRemoveMember(struct soap *soap, _ns1__MemberRemoveMember *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__MemberRemoveMember))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MemberRemoveMember(struct soap *soap, const char *tag, int id, _ns1__MemberRemoveMember *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__MemberRemoveMember);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__MemberRemoveMember ** SOAP_FMAC4 soap_in_PointerTo_ns1__MemberRemoveMember(struct soap *soap, const char *tag, _ns1__MemberRemoveMember **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__MemberRemoveMember **)soap_malloc(soap, sizeof(_ns1__MemberRemoveMember *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__MemberRemoveMember *)soap_instantiate__ns1__MemberRemoveMember(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__MemberRemoveMember ** p = (_ns1__MemberRemoveMember **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__MemberRemoveMember, sizeof(_ns1__MemberRemoveMember), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MemberRemoveMember(struct soap *soap, _ns1__MemberRemoveMember *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__MemberRemoveMember);
	if (soap_out_PointerTo_ns1__MemberRemoveMember(soap, tag?tag:"ns1:MemberRemoveMember", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__MemberRemoveMember ** SOAP_FMAC4 soap_get_PointerTo_ns1__MemberRemoveMember(struct soap *soap, _ns1__MemberRemoveMember **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__MemberRemoveMember(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MemberModifyMember(struct soap *soap, _ns1__MemberModifyMember *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__MemberModifyMember))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MemberModifyMember(struct soap *soap, const char *tag, int id, _ns1__MemberModifyMember *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__MemberModifyMember);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__MemberModifyMember ** SOAP_FMAC4 soap_in_PointerTo_ns1__MemberModifyMember(struct soap *soap, const char *tag, _ns1__MemberModifyMember **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__MemberModifyMember **)soap_malloc(soap, sizeof(_ns1__MemberModifyMember *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__MemberModifyMember *)soap_instantiate__ns1__MemberModifyMember(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__MemberModifyMember ** p = (_ns1__MemberModifyMember **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__MemberModifyMember, sizeof(_ns1__MemberModifyMember), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MemberModifyMember(struct soap *soap, _ns1__MemberModifyMember *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__MemberModifyMember);
	if (soap_out_PointerTo_ns1__MemberModifyMember(soap, tag?tag:"ns1:MemberModifyMember", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__MemberModifyMember ** SOAP_FMAC4 soap_get_PointerTo_ns1__MemberModifyMember(struct soap *soap, _ns1__MemberModifyMember **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__MemberModifyMember(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MemberAddMember(struct soap *soap, _ns1__MemberAddMember *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__MemberAddMember))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MemberAddMember(struct soap *soap, const char *tag, int id, _ns1__MemberAddMember *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__MemberAddMember);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__MemberAddMember ** SOAP_FMAC4 soap_in_PointerTo_ns1__MemberAddMember(struct soap *soap, const char *tag, _ns1__MemberAddMember **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__MemberAddMember **)soap_malloc(soap, sizeof(_ns1__MemberAddMember *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__MemberAddMember *)soap_instantiate__ns1__MemberAddMember(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__MemberAddMember ** p = (_ns1__MemberAddMember **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__MemberAddMember, sizeof(_ns1__MemberAddMember), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MemberAddMember(struct soap *soap, _ns1__MemberAddMember *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__MemberAddMember);
	if (soap_out_PointerTo_ns1__MemberAddMember(soap, tag?tag:"ns1:MemberAddMember", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__MemberAddMember ** SOAP_FMAC4 soap_get_PointerTo_ns1__MemberAddMember(struct soap *soap, _ns1__MemberAddMember **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__MemberAddMember(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminGetRegisterList(struct soap *soap, _ns1__AdminGetRegisterList *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminGetRegisterList))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminGetRegisterList(struct soap *soap, const char *tag, int id, _ns1__AdminGetRegisterList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminGetRegisterList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminGetRegisterList ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminGetRegisterList(struct soap *soap, const char *tag, _ns1__AdminGetRegisterList **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminGetRegisterList **)soap_malloc(soap, sizeof(_ns1__AdminGetRegisterList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminGetRegisterList *)soap_instantiate__ns1__AdminGetRegisterList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminGetRegisterList ** p = (_ns1__AdminGetRegisterList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminGetRegisterList, sizeof(_ns1__AdminGetRegisterList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminGetRegisterList(struct soap *soap, _ns1__AdminGetRegisterList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminGetRegisterList);
	if (soap_out_PointerTo_ns1__AdminGetRegisterList(soap, tag?tag:"ns1:AdminGetRegisterList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminGetRegisterList ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminGetRegisterList(struct soap *soap, _ns1__AdminGetRegisterList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminGetRegisterList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminGetModifyList(struct soap *soap, _ns1__AdminGetModifyList *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminGetModifyList))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminGetModifyList(struct soap *soap, const char *tag, int id, _ns1__AdminGetModifyList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminGetModifyList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminGetModifyList ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminGetModifyList(struct soap *soap, const char *tag, _ns1__AdminGetModifyList **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminGetModifyList **)soap_malloc(soap, sizeof(_ns1__AdminGetModifyList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminGetModifyList *)soap_instantiate__ns1__AdminGetModifyList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminGetModifyList ** p = (_ns1__AdminGetModifyList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminGetModifyList, sizeof(_ns1__AdminGetModifyList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminGetModifyList(struct soap *soap, _ns1__AdminGetModifyList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminGetModifyList);
	if (soap_out_PointerTo_ns1__AdminGetModifyList(soap, tag?tag:"ns1:AdminGetModifyList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminGetModifyList ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminGetModifyList(struct soap *soap, _ns1__AdminGetModifyList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminGetModifyList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminGetReportFaultList(struct soap *soap, _ns1__AdminGetReportFaultList *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminGetReportFaultList))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminGetReportFaultList(struct soap *soap, const char *tag, int id, _ns1__AdminGetReportFaultList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminGetReportFaultList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminGetReportFaultList ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminGetReportFaultList(struct soap *soap, const char *tag, _ns1__AdminGetReportFaultList **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminGetReportFaultList **)soap_malloc(soap, sizeof(_ns1__AdminGetReportFaultList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminGetReportFaultList *)soap_instantiate__ns1__AdminGetReportFaultList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminGetReportFaultList ** p = (_ns1__AdminGetReportFaultList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminGetReportFaultList, sizeof(_ns1__AdminGetReportFaultList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminGetReportFaultList(struct soap *soap, _ns1__AdminGetReportFaultList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminGetReportFaultList);
	if (soap_out_PointerTo_ns1__AdminGetReportFaultList(soap, tag?tag:"ns1:AdminGetReportFaultList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminGetReportFaultList ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminGetReportFaultList(struct soap *soap, _ns1__AdminGetReportFaultList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminGetReportFaultList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminGetLyricListByID(struct soap *soap, _ns1__AdminGetLyricListByID *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminGetLyricListByID))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminGetLyricListByID(struct soap *soap, const char *tag, int id, _ns1__AdminGetLyricListByID *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminGetLyricListByID);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminGetLyricListByID ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminGetLyricListByID(struct soap *soap, const char *tag, _ns1__AdminGetLyricListByID **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminGetLyricListByID **)soap_malloc(soap, sizeof(_ns1__AdminGetLyricListByID *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminGetLyricListByID *)soap_instantiate__ns1__AdminGetLyricListByID(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminGetLyricListByID ** p = (_ns1__AdminGetLyricListByID **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminGetLyricListByID, sizeof(_ns1__AdminGetLyricListByID), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminGetLyricListByID(struct soap *soap, _ns1__AdminGetLyricListByID *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminGetLyricListByID);
	if (soap_out_PointerTo_ns1__AdminGetLyricListByID(soap, tag?tag:"ns1:AdminGetLyricListByID", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminGetLyricListByID ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminGetLyricListByID(struct soap *soap, _ns1__AdminGetLyricListByID **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminGetLyricListByID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AdminGetLyricList(struct soap *soap, _ns1__AdminGetLyricList *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AdminGetLyricList))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AdminGetLyricList(struct soap *soap, const char *tag, int id, _ns1__AdminGetLyricList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AdminGetLyricList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AdminGetLyricList ** SOAP_FMAC4 soap_in_PointerTo_ns1__AdminGetLyricList(struct soap *soap, const char *tag, _ns1__AdminGetLyricList **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AdminGetLyricList **)soap_malloc(soap, sizeof(_ns1__AdminGetLyricList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AdminGetLyricList *)soap_instantiate__ns1__AdminGetLyricList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AdminGetLyricList ** p = (_ns1__AdminGetLyricList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AdminGetLyricList, sizeof(_ns1__AdminGetLyricList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AdminGetLyricList(struct soap *soap, _ns1__AdminGetLyricList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AdminGetLyricList);
	if (soap_out_PointerTo_ns1__AdminGetLyricList(soap, tag?tag:"ns1:AdminGetLyricList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AdminGetLyricList ** SOAP_FMAC4 soap_get_PointerTo_ns1__AdminGetLyricList(struct soap *soap, _ns1__AdminGetLyricList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AdminGetLyricList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetSongID(struct soap *soap, _ns1__GetSongID *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetSongID))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetSongID(struct soap *soap, const char *tag, int id, _ns1__GetSongID *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetSongID);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetSongID ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetSongID(struct soap *soap, const char *tag, _ns1__GetSongID **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetSongID **)soap_malloc(soap, sizeof(_ns1__GetSongID *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetSongID *)soap_instantiate__ns1__GetSongID(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetSongID ** p = (_ns1__GetSongID **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetSongID, sizeof(_ns1__GetSongID), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetSongID(struct soap *soap, _ns1__GetSongID *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetSongID);
	if (soap_out_PointerTo_ns1__GetSongID(soap, tag?tag:"ns1:GetSongID", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetSongID ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetSongID(struct soap *soap, _ns1__GetSongID **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetSongID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetLyric8(struct soap *soap, _ns1__GetLyric8 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetLyric8))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetLyric8(struct soap *soap, const char *tag, int id, _ns1__GetLyric8 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetLyric8);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetLyric8 ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetLyric8(struct soap *soap, const char *tag, _ns1__GetLyric8 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetLyric8 **)soap_malloc(soap, sizeof(_ns1__GetLyric8 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetLyric8 *)soap_instantiate__ns1__GetLyric8(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetLyric8 ** p = (_ns1__GetLyric8 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetLyric8, sizeof(_ns1__GetLyric8), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetLyric8(struct soap *soap, _ns1__GetLyric8 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetLyric8);
	if (soap_out_PointerTo_ns1__GetLyric8(soap, tag?tag:"ns1:GetLyric8", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetLyric8 ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetLyric8(struct soap *soap, _ns1__GetLyric8 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetLyric8(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetLyric7(struct soap *soap, _ns1__GetLyric7 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetLyric7))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetLyric7(struct soap *soap, const char *tag, int id, _ns1__GetLyric7 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetLyric7);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetLyric7 ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetLyric7(struct soap *soap, const char *tag, _ns1__GetLyric7 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetLyric7 **)soap_malloc(soap, sizeof(_ns1__GetLyric7 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetLyric7 *)soap_instantiate__ns1__GetLyric7(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetLyric7 ** p = (_ns1__GetLyric7 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetLyric7, sizeof(_ns1__GetLyric7), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetLyric7(struct soap *soap, _ns1__GetLyric7 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetLyric7);
	if (soap_out_PointerTo_ns1__GetLyric7(soap, tag?tag:"ns1:GetLyric7", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetLyric7 ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetLyric7(struct soap *soap, _ns1__GetLyric7 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetLyric7(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetLyric6(struct soap *soap, _ns1__GetLyric6 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetLyric6))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetLyric6(struct soap *soap, const char *tag, int id, _ns1__GetLyric6 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetLyric6);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetLyric6 ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetLyric6(struct soap *soap, const char *tag, _ns1__GetLyric6 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetLyric6 **)soap_malloc(soap, sizeof(_ns1__GetLyric6 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetLyric6 *)soap_instantiate__ns1__GetLyric6(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetLyric6 ** p = (_ns1__GetLyric6 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetLyric6, sizeof(_ns1__GetLyric6), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetLyric6(struct soap *soap, _ns1__GetLyric6 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetLyric6);
	if (soap_out_PointerTo_ns1__GetLyric6(soap, tag?tag:"ns1:GetLyric6", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetLyric6 ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetLyric6(struct soap *soap, _ns1__GetLyric6 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetLyric6(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetLyric5(struct soap *soap, _ns1__GetLyric5 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetLyric5))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetLyric5(struct soap *soap, const char *tag, int id, _ns1__GetLyric5 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetLyric5);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetLyric5 ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetLyric5(struct soap *soap, const char *tag, _ns1__GetLyric5 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetLyric5 **)soap_malloc(soap, sizeof(_ns1__GetLyric5 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetLyric5 *)soap_instantiate__ns1__GetLyric5(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetLyric5 ** p = (_ns1__GetLyric5 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetLyric5, sizeof(_ns1__GetLyric5), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetLyric5(struct soap *soap, _ns1__GetLyric5 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetLyric5);
	if (soap_out_PointerTo_ns1__GetLyric5(soap, tag?tag:"ns1:GetLyric5", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetLyric5 ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetLyric5(struct soap *soap, _ns1__GetLyric5 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetLyric5(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetLyric4(struct soap *soap, _ns1__GetLyric4 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetLyric4))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetLyric4(struct soap *soap, const char *tag, int id, _ns1__GetLyric4 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetLyric4);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetLyric4 ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetLyric4(struct soap *soap, const char *tag, _ns1__GetLyric4 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetLyric4 **)soap_malloc(soap, sizeof(_ns1__GetLyric4 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetLyric4 *)soap_instantiate__ns1__GetLyric4(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetLyric4 ** p = (_ns1__GetLyric4 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetLyric4, sizeof(_ns1__GetLyric4), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetLyric4(struct soap *soap, _ns1__GetLyric4 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetLyric4);
	if (soap_out_PointerTo_ns1__GetLyric4(soap, tag?tag:"ns1:GetLyric4", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetLyric4 ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetLyric4(struct soap *soap, _ns1__GetLyric4 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetLyric4(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetLyric3(struct soap *soap, _ns1__GetLyric3 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetLyric3))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetLyric3(struct soap *soap, const char *tag, int id, _ns1__GetLyric3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetLyric3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetLyric3 ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetLyric3(struct soap *soap, const char *tag, _ns1__GetLyric3 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetLyric3 **)soap_malloc(soap, sizeof(_ns1__GetLyric3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetLyric3 *)soap_instantiate__ns1__GetLyric3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetLyric3 ** p = (_ns1__GetLyric3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetLyric3, sizeof(_ns1__GetLyric3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetLyric3(struct soap *soap, _ns1__GetLyric3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetLyric3);
	if (soap_out_PointerTo_ns1__GetLyric3(soap, tag?tag:"ns1:GetLyric3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetLyric3 ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetLyric3(struct soap *soap, _ns1__GetLyric3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetLyric3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__IsReportedFaultLyric(struct soap *soap, _ns1__IsReportedFaultLyric *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__IsReportedFaultLyric))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__IsReportedFaultLyric(struct soap *soap, const char *tag, int id, _ns1__IsReportedFaultLyric *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__IsReportedFaultLyric);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__IsReportedFaultLyric ** SOAP_FMAC4 soap_in_PointerTo_ns1__IsReportedFaultLyric(struct soap *soap, const char *tag, _ns1__IsReportedFaultLyric **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__IsReportedFaultLyric **)soap_malloc(soap, sizeof(_ns1__IsReportedFaultLyric *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__IsReportedFaultLyric *)soap_instantiate__ns1__IsReportedFaultLyric(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__IsReportedFaultLyric ** p = (_ns1__IsReportedFaultLyric **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__IsReportedFaultLyric, sizeof(_ns1__IsReportedFaultLyric), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__IsReportedFaultLyric(struct soap *soap, _ns1__IsReportedFaultLyric *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__IsReportedFaultLyric);
	if (soap_out_PointerTo_ns1__IsReportedFaultLyric(soap, tag?tag:"ns1:IsReportedFaultLyric", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__IsReportedFaultLyric ** SOAP_FMAC4 soap_get_PointerTo_ns1__IsReportedFaultLyric(struct soap *soap, _ns1__IsReportedFaultLyric **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__IsReportedFaultLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__IsReportedRecommendationLyric(struct soap *soap, _ns1__IsReportedRecommendationLyric *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__IsReportedRecommendationLyric))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__IsReportedRecommendationLyric(struct soap *soap, const char *tag, int id, _ns1__IsReportedRecommendationLyric *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__IsReportedRecommendationLyric);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__IsReportedRecommendationLyric ** SOAP_FMAC4 soap_in_PointerTo_ns1__IsReportedRecommendationLyric(struct soap *soap, const char *tag, _ns1__IsReportedRecommendationLyric **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__IsReportedRecommendationLyric **)soap_malloc(soap, sizeof(_ns1__IsReportedRecommendationLyric *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__IsReportedRecommendationLyric *)soap_instantiate__ns1__IsReportedRecommendationLyric(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__IsReportedRecommendationLyric ** p = (_ns1__IsReportedRecommendationLyric **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__IsReportedRecommendationLyric, sizeof(_ns1__IsReportedRecommendationLyric), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__IsReportedRecommendationLyric(struct soap *soap, _ns1__IsReportedRecommendationLyric *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__IsReportedRecommendationLyric);
	if (soap_out_PointerTo_ns1__IsReportedRecommendationLyric(soap, tag?tag:"ns1:IsReportedRecommendationLyric", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__IsReportedRecommendationLyric ** SOAP_FMAC4 soap_get_PointerTo_ns1__IsReportedRecommendationLyric(struct soap *soap, _ns1__IsReportedRecommendationLyric **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__IsReportedRecommendationLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ReportRecommendationLyric(struct soap *soap, _ns1__ReportRecommendationLyric *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ReportRecommendationLyric))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ReportRecommendationLyric(struct soap *soap, const char *tag, int id, _ns1__ReportRecommendationLyric *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ReportRecommendationLyric);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__ReportRecommendationLyric ** SOAP_FMAC4 soap_in_PointerTo_ns1__ReportRecommendationLyric(struct soap *soap, const char *tag, _ns1__ReportRecommendationLyric **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ReportRecommendationLyric **)soap_malloc(soap, sizeof(_ns1__ReportRecommendationLyric *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ReportRecommendationLyric *)soap_instantiate__ns1__ReportRecommendationLyric(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__ReportRecommendationLyric ** p = (_ns1__ReportRecommendationLyric **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ReportRecommendationLyric, sizeof(_ns1__ReportRecommendationLyric), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ReportRecommendationLyric(struct soap *soap, _ns1__ReportRecommendationLyric *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__ReportRecommendationLyric);
	if (soap_out_PointerTo_ns1__ReportRecommendationLyric(soap, tag?tag:"ns1:ReportRecommendationLyric", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__ReportRecommendationLyric ** SOAP_FMAC4 soap_get_PointerTo_ns1__ReportRecommendationLyric(struct soap *soap, _ns1__ReportRecommendationLyric **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ReportRecommendationLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ReportFaultLyric2(struct soap *soap, _ns1__ReportFaultLyric2 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ReportFaultLyric2))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ReportFaultLyric2(struct soap *soap, const char *tag, int id, _ns1__ReportFaultLyric2 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ReportFaultLyric2);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__ReportFaultLyric2 ** SOAP_FMAC4 soap_in_PointerTo_ns1__ReportFaultLyric2(struct soap *soap, const char *tag, _ns1__ReportFaultLyric2 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ReportFaultLyric2 **)soap_malloc(soap, sizeof(_ns1__ReportFaultLyric2 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ReportFaultLyric2 *)soap_instantiate__ns1__ReportFaultLyric2(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__ReportFaultLyric2 ** p = (_ns1__ReportFaultLyric2 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ReportFaultLyric2, sizeof(_ns1__ReportFaultLyric2), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ReportFaultLyric2(struct soap *soap, _ns1__ReportFaultLyric2 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__ReportFaultLyric2);
	if (soap_out_PointerTo_ns1__ReportFaultLyric2(soap, tag?tag:"ns1:ReportFaultLyric2", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__ReportFaultLyric2 ** SOAP_FMAC4 soap_get_PointerTo_ns1__ReportFaultLyric2(struct soap *soap, _ns1__ReportFaultLyric2 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ReportFaultLyric2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ReportFaultLyricWithComment(struct soap *soap, _ns1__ReportFaultLyricWithComment *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ReportFaultLyricWithComment))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ReportFaultLyricWithComment(struct soap *soap, const char *tag, int id, _ns1__ReportFaultLyricWithComment *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ReportFaultLyricWithComment);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__ReportFaultLyricWithComment ** SOAP_FMAC4 soap_in_PointerTo_ns1__ReportFaultLyricWithComment(struct soap *soap, const char *tag, _ns1__ReportFaultLyricWithComment **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ReportFaultLyricWithComment **)soap_malloc(soap, sizeof(_ns1__ReportFaultLyricWithComment *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ReportFaultLyricWithComment *)soap_instantiate__ns1__ReportFaultLyricWithComment(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__ReportFaultLyricWithComment ** p = (_ns1__ReportFaultLyricWithComment **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ReportFaultLyricWithComment, sizeof(_ns1__ReportFaultLyricWithComment), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ReportFaultLyricWithComment(struct soap *soap, _ns1__ReportFaultLyricWithComment *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__ReportFaultLyricWithComment);
	if (soap_out_PointerTo_ns1__ReportFaultLyricWithComment(soap, tag?tag:"ns1:ReportFaultLyricWithComment", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__ReportFaultLyricWithComment ** SOAP_FMAC4 soap_get_PointerTo_ns1__ReportFaultLyricWithComment(struct soap *soap, _ns1__ReportFaultLyricWithComment **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ReportFaultLyricWithComment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UploadLyric(struct soap *soap, _ns1__UploadLyric *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__UploadLyric))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UploadLyric(struct soap *soap, const char *tag, int id, _ns1__UploadLyric *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__UploadLyric);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__UploadLyric ** SOAP_FMAC4 soap_in_PointerTo_ns1__UploadLyric(struct soap *soap, const char *tag, _ns1__UploadLyric **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__UploadLyric **)soap_malloc(soap, sizeof(_ns1__UploadLyric *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__UploadLyric *)soap_instantiate__ns1__UploadLyric(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__UploadLyric ** p = (_ns1__UploadLyric **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__UploadLyric, sizeof(_ns1__UploadLyric), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UploadLyric(struct soap *soap, _ns1__UploadLyric *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__UploadLyric);
	if (soap_out_PointerTo_ns1__UploadLyric(soap, tag?tag:"ns1:UploadLyric", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__UploadLyric ** SOAP_FMAC4 soap_get_PointerTo_ns1__UploadLyric(struct soap *soap, _ns1__UploadLyric **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__UploadLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetResembleLyric2CountTest(struct soap *soap, _ns1__GetResembleLyric2CountTest *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetResembleLyric2CountTest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetResembleLyric2CountTest(struct soap *soap, const char *tag, int id, _ns1__GetResembleLyric2CountTest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetResembleLyric2CountTest);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric2CountTest ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetResembleLyric2CountTest(struct soap *soap, const char *tag, _ns1__GetResembleLyric2CountTest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetResembleLyric2CountTest **)soap_malloc(soap, sizeof(_ns1__GetResembleLyric2CountTest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetResembleLyric2CountTest *)soap_instantiate__ns1__GetResembleLyric2CountTest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetResembleLyric2CountTest ** p = (_ns1__GetResembleLyric2CountTest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetResembleLyric2CountTest, sizeof(_ns1__GetResembleLyric2CountTest), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetResembleLyric2CountTest(struct soap *soap, _ns1__GetResembleLyric2CountTest *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetResembleLyric2CountTest);
	if (soap_out_PointerTo_ns1__GetResembleLyric2CountTest(soap, tag?tag:"ns1:GetResembleLyric2CountTest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetResembleLyric2CountTest ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetResembleLyric2CountTest(struct soap *soap, _ns1__GetResembleLyric2CountTest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetResembleLyric2CountTest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetResembleLyric2Count(struct soap *soap, _ns1__GetResembleLyric2Count *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetResembleLyric2Count))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetResembleLyric2Count(struct soap *soap, const char *tag, int id, _ns1__GetResembleLyric2Count *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetResembleLyric2Count);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric2Count ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetResembleLyric2Count(struct soap *soap, const char *tag, _ns1__GetResembleLyric2Count **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetResembleLyric2Count **)soap_malloc(soap, sizeof(_ns1__GetResembleLyric2Count *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetResembleLyric2Count *)soap_instantiate__ns1__GetResembleLyric2Count(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetResembleLyric2Count ** p = (_ns1__GetResembleLyric2Count **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetResembleLyric2Count, sizeof(_ns1__GetResembleLyric2Count), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetResembleLyric2Count(struct soap *soap, _ns1__GetResembleLyric2Count *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetResembleLyric2Count);
	if (soap_out_PointerTo_ns1__GetResembleLyric2Count(soap, tag?tag:"ns1:GetResembleLyric2Count", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetResembleLyric2Count ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetResembleLyric2Count(struct soap *soap, _ns1__GetResembleLyric2Count **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetResembleLyric2Count(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetResembleLyric3(struct soap *soap, _ns1__GetResembleLyric3 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetResembleLyric3))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetResembleLyric3(struct soap *soap, const char *tag, int id, _ns1__GetResembleLyric3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetResembleLyric3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric3 ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetResembleLyric3(struct soap *soap, const char *tag, _ns1__GetResembleLyric3 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetResembleLyric3 **)soap_malloc(soap, sizeof(_ns1__GetResembleLyric3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetResembleLyric3 *)soap_instantiate__ns1__GetResembleLyric3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetResembleLyric3 ** p = (_ns1__GetResembleLyric3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetResembleLyric3, sizeof(_ns1__GetResembleLyric3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetResembleLyric3(struct soap *soap, _ns1__GetResembleLyric3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetResembleLyric3);
	if (soap_out_PointerTo_ns1__GetResembleLyric3(soap, tag?tag:"ns1:GetResembleLyric3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetResembleLyric3 ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetResembleLyric3(struct soap *soap, _ns1__GetResembleLyric3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetResembleLyric3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetResembleLyric2(struct soap *soap, _ns1__GetResembleLyric2 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetResembleLyric2))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetResembleLyric2(struct soap *soap, const char *tag, int id, _ns1__GetResembleLyric2 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetResembleLyric2);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetResembleLyric2 ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetResembleLyric2(struct soap *soap, const char *tag, _ns1__GetResembleLyric2 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetResembleLyric2 **)soap_malloc(soap, sizeof(_ns1__GetResembleLyric2 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetResembleLyric2 *)soap_instantiate__ns1__GetResembleLyric2(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetResembleLyric2 ** p = (_ns1__GetResembleLyric2 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetResembleLyric2, sizeof(_ns1__GetResembleLyric2), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetResembleLyric2(struct soap *soap, _ns1__GetResembleLyric2 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetResembleLyric2);
	if (soap_out_PointerTo_ns1__GetResembleLyric2(soap, tag?tag:"ns1:GetResembleLyric2", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetResembleLyric2 ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetResembleLyric2(struct soap *soap, _ns1__GetResembleLyric2 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetResembleLyric2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetLinkLyric(struct soap *soap, _ns1__SetLinkLyric *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetLinkLyric))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetLinkLyric(struct soap *soap, const char *tag, int id, _ns1__SetLinkLyric *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetLinkLyric);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetLinkLyric ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetLinkLyric(struct soap *soap, const char *tag, _ns1__SetLinkLyric **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetLinkLyric **)soap_malloc(soap, sizeof(_ns1__SetLinkLyric *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetLinkLyric *)soap_instantiate__ns1__SetLinkLyric(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetLinkLyric ** p = (_ns1__SetLinkLyric **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetLinkLyric, sizeof(_ns1__SetLinkLyric), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetLinkLyric(struct soap *soap, _ns1__SetLinkLyric *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__SetLinkLyric);
	if (soap_out_PointerTo_ns1__SetLinkLyric(soap, tag?tag:"ns1:SetLinkLyric", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetLinkLyric ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetLinkLyric(struct soap *soap, _ns1__SetLinkLyric **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetLinkLyric(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetSyncLyricBySearch(struct soap *soap, _ns1__GetSyncLyricBySearch *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetSyncLyricBySearch))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetSyncLyricBySearch(struct soap *soap, const char *tag, int id, _ns1__GetSyncLyricBySearch *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetSyncLyricBySearch);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetSyncLyricBySearch ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetSyncLyricBySearch(struct soap *soap, const char *tag, _ns1__GetSyncLyricBySearch **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetSyncLyricBySearch **)soap_malloc(soap, sizeof(_ns1__GetSyncLyricBySearch *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetSyncLyricBySearch *)soap_instantiate__ns1__GetSyncLyricBySearch(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetSyncLyricBySearch ** p = (_ns1__GetSyncLyricBySearch **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetSyncLyricBySearch, sizeof(_ns1__GetSyncLyricBySearch), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetSyncLyricBySearch(struct soap *soap, _ns1__GetSyncLyricBySearch *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetSyncLyricBySearch);
	if (soap_out_PointerTo_ns1__GetSyncLyricBySearch(soap, tag?tag:"ns1:GetSyncLyricBySearch", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetSyncLyricBySearch ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetSyncLyricBySearch(struct soap *soap, _ns1__GetSyncLyricBySearch **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetSyncLyricBySearch(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetMurekaInfo(struct soap *soap, _ns1__GetMurekaInfo *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetMurekaInfo))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetMurekaInfo(struct soap *soap, const char *tag, int id, _ns1__GetMurekaInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetMurekaInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetMurekaInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetMurekaInfo(struct soap *soap, const char *tag, _ns1__GetMurekaInfo **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetMurekaInfo **)soap_malloc(soap, sizeof(_ns1__GetMurekaInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetMurekaInfo *)soap_instantiate__ns1__GetMurekaInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetMurekaInfo ** p = (_ns1__GetMurekaInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetMurekaInfo, sizeof(_ns1__GetMurekaInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetMurekaInfo(struct soap *soap, _ns1__GetMurekaInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetMurekaInfo);
	if (soap_out_PointerTo_ns1__GetMurekaInfo(soap, tag?tag:"ns1:GetMurekaInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetMurekaInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetMurekaInfo(struct soap *soap, _ns1__GetMurekaInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetMurekaInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, const char *tag, int id, ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, const char *tag, ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT **)soap_malloc(soap, sizeof(ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT *)soap_instantiate_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT ** p = (ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT, sizeof(ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT);
	if (soap_out_PointerTons1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, tag?tag:"ns1:ArrayOfST_LYRIC_DELETE_RESULT", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, ns1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfInt(struct soap *soap, ns1__ArrayOfInt *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfInt))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfInt(struct soap *soap, const char *tag, int id, ns1__ArrayOfInt *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfInt);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfInt ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfInt(struct soap *soap, const char *tag, ns1__ArrayOfInt **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfInt **)soap_malloc(soap, sizeof(ns1__ArrayOfInt *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfInt *)soap_instantiate_ns1__ArrayOfInt(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfInt ** p = (ns1__ArrayOfInt **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfInt, sizeof(ns1__ArrayOfInt), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfInt(struct soap *soap, ns1__ArrayOfInt *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ArrayOfInt);
	if (soap_out_PointerTons1__ArrayOfInt(soap, tag?tag:"ns1:ArrayOfInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfInt ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfInt(struct soap *soap, ns1__ArrayOfInt **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, const char *tag, int id, ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, const char *tag, ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR **)soap_malloc(soap, sizeof(ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR *)soap_instantiate_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR ** p = (ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR, sizeof(ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR);
	if (soap_out_PointerTons1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(soap, tag?tag:"ns1:ArrayOfST_LYRIC_FORMONITOR", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, ns1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfST_USCORELYRIC_USCOREFORMONITOR(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a)
{
#ifndef WITH_NOIDREF
	if (*a)
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap *soap, const char *tag, int id, xsd__base64Binary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)(void*)&(*a)->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__base64Binary **)soap_malloc(soap, sizeof(xsd__base64Binary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__base64Binary *)soap_instantiate_xsd__base64Binary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	xsd__base64Binary ** p = (xsd__base64Binary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToxsd__base64Binary);
	if (soap_out_PointerToxsd__base64Binary(soap, tag?tag:"xsd:base64Binary", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, const char *tag, int id, ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN **)soap_malloc(soap, sizeof(ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN *)soap_instantiate_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN ** p = (ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN, sizeof(ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN);
	if (soap_out_PointerTons1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(soap, tag?tag:"ns1:ArrayOfST_RIGHTSINFO_JPN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, ns1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfST_USCORERIGHTSINFO_USCOREJPN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCORELYRICINFO(struct soap *soap, ns1__ST_USCORELYRICINFO *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCORELYRICINFO))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCORELYRICINFO(struct soap *soap, const char *tag, int id, ns1__ST_USCORELYRICINFO *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCORELYRICINFO);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCORELYRICINFO ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCORELYRICINFO(struct soap *soap, const char *tag, ns1__ST_USCORELYRICINFO **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCORELYRICINFO **)soap_malloc(soap, sizeof(ns1__ST_USCORELYRICINFO *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCORELYRICINFO *)soap_instantiate_ns1__ST_USCORELYRICINFO(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCORELYRICINFO ** p = (ns1__ST_USCORELYRICINFO **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCORELYRICINFO, sizeof(ns1__ST_USCORELYRICINFO), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCORELYRICINFO(struct soap *soap, ns1__ST_USCORELYRICINFO *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCORELYRICINFO);
	if (soap_out_PointerTons1__ST_USCORELYRICINFO(soap, tag?tag:"ns1:ST_LYRICINFO", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCORELYRICINFO ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCORELYRICINFO(struct soap *soap, ns1__ST_USCORELYRICINFO **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCORELYRICINFO(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, const char *tag, int id, ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, const char *tag, ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST **)soap_malloc(soap, sizeof(ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST *)soap_instantiate_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST ** p = (ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST, sizeof(ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST);
	if (soap_out_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(soap, tag?tag:"ns1:ArrayOfST_SEARCHLYRIC_LIST", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, ns1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfST_USCORESEARCHLYRIC_USCORELIST(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__UploadForeignLyricInfo(struct soap *soap, ns1__UploadForeignLyricInfo *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__UploadForeignLyricInfo))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__UploadForeignLyricInfo(struct soap *soap, const char *tag, int id, ns1__UploadForeignLyricInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__UploadForeignLyricInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__UploadForeignLyricInfo ** SOAP_FMAC4 soap_in_PointerTons1__UploadForeignLyricInfo(struct soap *soap, const char *tag, ns1__UploadForeignLyricInfo **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__UploadForeignLyricInfo **)soap_malloc(soap, sizeof(ns1__UploadForeignLyricInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__UploadForeignLyricInfo *)soap_instantiate_ns1__UploadForeignLyricInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__UploadForeignLyricInfo ** p = (ns1__UploadForeignLyricInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__UploadForeignLyricInfo, sizeof(ns1__UploadForeignLyricInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__UploadForeignLyricInfo(struct soap *soap, ns1__UploadForeignLyricInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__UploadForeignLyricInfo);
	if (soap_out_PointerTons1__UploadForeignLyricInfo(soap, tag?tag:"ns1:UploadForeignLyricInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__UploadForeignLyricInfo ** SOAP_FMAC4 soap_get_PointerTons1__UploadForeignLyricInfo(struct soap *soap, ns1__UploadForeignLyricInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__UploadForeignLyricInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfGetBroadcastingListReturn(struct soap *soap, ns1__ArrayOfGetBroadcastingListReturn *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfGetBroadcastingListReturn))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfGetBroadcastingListReturn(struct soap *soap, const char *tag, int id, ns1__ArrayOfGetBroadcastingListReturn *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfGetBroadcastingListReturn);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfGetBroadcastingListReturn ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfGetBroadcastingListReturn(struct soap *soap, const char *tag, ns1__ArrayOfGetBroadcastingListReturn **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfGetBroadcastingListReturn **)soap_malloc(soap, sizeof(ns1__ArrayOfGetBroadcastingListReturn *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfGetBroadcastingListReturn *)soap_instantiate_ns1__ArrayOfGetBroadcastingListReturn(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfGetBroadcastingListReturn ** p = (ns1__ArrayOfGetBroadcastingListReturn **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfGetBroadcastingListReturn, sizeof(ns1__ArrayOfGetBroadcastingListReturn), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfGetBroadcastingListReturn(struct soap *soap, ns1__ArrayOfGetBroadcastingListReturn *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ArrayOfGetBroadcastingListReturn);
	if (soap_out_PointerTons1__ArrayOfGetBroadcastingListReturn(soap, tag?tag:"ns1:ArrayOfGetBroadcastingListReturn", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfGetBroadcastingListReturn ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfGetBroadcastingListReturn(struct soap *soap, ns1__ArrayOfGetBroadcastingListReturn **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfGetBroadcastingListReturn(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *)soap_instantiate_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN ** p = (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN, sizeof(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN);
	if (soap_out_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, tag?tag:"ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST3_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *)soap_instantiate_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN ** p = (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN, sizeof(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN);
	if (soap_out_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, tag?tag:"ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST2_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *)soap_instantiate_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN ** p = (ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN, sizeof(ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN);
	if (soap_out_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, tag?tag:"ns1:ArrayOfST_CAST_GET_EX_METADATA_LIST_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN *)soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN ** p = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(soap, tag?tag:"ns1:ST_CAST_GET_EX_METADATA_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY *)soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY ** p = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, tag?tag:"ns1:ST_CAST_GET_EX_METADATA_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY *)soap_instantiate_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY ** p = (ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY, sizeof(ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, tag?tag:"ns1:ST_CAST_REMOVE_EX_METADATA_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCORECAST_USCOREREMOVE_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY *)soap_instantiate_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY ** p = (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY, sizeof(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(soap, tag?tag:"ns1:ST_CAST_UPLOAD_EX_METADATA3_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA3_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY *)soap_instantiate_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY ** p = (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY, sizeof(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(soap, tag?tag:"ns1:ST_CAST_UPLOAD_EX_METADATA2_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA2_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY *)soap_instantiate_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY ** p = (ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY, sizeof(ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, tag?tag:"ns1:ST_CAST_UPLOAD_EX_METADATA_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(struct soap *soap, ns1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCORECAST_USCOREUPLOAD_USCOREEX_USCOREMETADATA_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *)soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN ** p = (ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN, sizeof(ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN);
	if (soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, tag?tag:"ns1:ArrayOfST_GET_ALBA_STATISTIC_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY ** p = (ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(soap, tag?tag:"ns1:ST_GET_ALBA_STATISTIC_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN *)soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN ** p = (ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(soap, tag?tag:"ns1:ST_GET_COUNT_REPORT_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY ** p = (ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(soap, tag?tag:"ns1:ST_GET_COUNT_REPORT_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREREPORT_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN *)soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN ** p = (ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(soap, tag?tag:"ns1:ST_GET_COUNT_MODIFY_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY ** p = (ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(soap, tag?tag:"ns1:ST_GET_COUNT_MODIFY_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREMODIFY_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN *)soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN ** p = (ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(soap, tag?tag:"ns1:ST_GET_COUNT_LYRIC_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORELYRIC_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN *)soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN ** p = (ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(soap, tag?tag:"ns1:ST_GET_COUNT_CHECKSUM_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCORECHECKSUM_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN *)soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN ** p = (ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(soap, tag?tag:"ns1:ST_GET_COUNT_IN_REGISTER_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY ** p = (ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(soap, tag?tag:"ns1:ST_GET_COUNT_IN_REGISTER_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORECOUNT_USCOREIN_USCOREREGISTER_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY ** p = (ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY, sizeof(ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(soap, tag?tag:"ns1:ST_REPORT_BLACKLIST_REPORT_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREREPORT_USCOREBLACKLIST_USCOREREPORT_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY ** p = (ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY, sizeof(ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(soap, tag?tag:"ns1:ST_ADMIT_MODIFY_LYRIC_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREADMIT_USCOREMODIFY_USCORELYRIC_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(struct soap *soap, ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY ** p = (ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY, sizeof(ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(struct soap *soap, ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(soap, tag?tag:"ns1:ST_DELETE_RECORD_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(struct soap *soap, ns1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREDELETE_USCORERECORD_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *)soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN ** p = (ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN, sizeof(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN);
	if (soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, tag?tag:"ns1:ArrayOfST_GET_MEMBER_LICENSE_LIST_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY ** p = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(soap, tag?tag:"ns1:ST_GET_MEMBER_LICENSE_LIST_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *)soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN ** p = (ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN, sizeof(ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN);
	if (soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, tag?tag:"ns1:ArrayOfST_GET_MEMBER_LIST_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY ** p = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(soap, tag?tag:"ns1:ST_GET_MEMBER_LIST_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY ** p = (ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY, sizeof(ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(soap, tag?tag:"ns1:ST_MODIFY_MEMBER_LICENSE_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREMODIFY_USCOREMEMBER_USCORELICENSE_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(struct soap *soap, ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY ** p = (ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY, sizeof(ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(struct soap *soap, ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(soap, tag?tag:"ns1:ST_APPLY_REGISTRATION_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(struct soap *soap, ns1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREAPPLY_USCOREREGISTRATION_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY ** p = (ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY, sizeof(ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(soap, tag?tag:"ns1:ST_MEMBER_LOGOUT_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREMEMBER_USCORELOGOUT_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY ** p = (ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY, sizeof(ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(soap, tag?tag:"ns1:ST_MEMBER_LOGIN_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREMEMBER_USCORELOGIN_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY ** p = (ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY, sizeof(ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(soap, tag?tag:"ns1:ST_MEMBER_REMOVEMEMBER_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREMEMBER_USCOREREMOVEMEMBER_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY ** p = (ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY, sizeof(ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(soap, tag?tag:"ns1:ST_MEMBER_MODIFYMEMBER_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREMEMBER_USCOREMODIFYMEMBER_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY ** p = (ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY, sizeof(ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(soap, tag?tag:"ns1:ST_MEMBER_ADDMEMBER_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(struct soap *soap, ns1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREMEMBER_USCOREADDMEMBER_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *)soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN ** p = (ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN, sizeof(ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN);
	if (soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, tag?tag:"ns1:ArrayOfST_GET_REGISTER_LIST_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY ** p = (ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(soap, tag?tag:"ns1:ST_GET_REGISTER_LIST_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *)soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN ** p = (ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN, sizeof(ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN);
	if (soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, tag?tag:"ns1:ArrayOfST_GET_MODIFY_LIST_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY ** p = (ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(soap, tag?tag:"ns1:ST_GET_MODIFY_LIST_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *)soap_instantiate_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN ** p = (ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN, sizeof(ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN);
	if (soap_out_PointerTons1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, tag?tag:"ns1:ArrayOfST_GET_REPORTFAULT_LIST_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *)soap_instantiate_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN ** p = (ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN, sizeof(ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN);
	if (soap_out_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, tag?tag:"ns1:ArrayOfST_GET_LYRIC_LIST_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY ** p = (ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(soap, tag?tag:"ns1:ST_GET_LYRIC_LIST_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY ** p = (ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, tag?tag:"ns1:ST_GET_LYRIC5_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN *)soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN ** p = (ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(soap, tag?tag:"ns1:ST_GET_LYRIC4_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC4_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY ** p = (ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(soap, tag?tag:"ns1:ST_GET_LYRIC4_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC4_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN *)soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN ** p = (ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(soap, tag?tag:"ns1:ST_GET_LYRIC3_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC3_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY ** p = (ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(soap, tag?tag:"ns1:ST_GET_LYRIC3_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC3_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY ** p = (ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY, sizeof(ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(soap, tag?tag:"ns1:ST_IS_REPORTED_FAULT_LYRIC_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCOREFAULT_USCORELYRIC_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY ** p = (ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY, sizeof(ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, tag?tag:"ns1:ST_IS_REPORTED_RECOMMENDATION_LYRIC_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREIS_USCOREREPORTED_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY ** p = (ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY, sizeof(ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, tag?tag:"ns1:ST_REPORT_RECOMMENDATION_LYRIC_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREREPORT_USCORERECOMMENDATION_USCORELYRIC_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(struct soap *soap, ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY ** p = (ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY, sizeof(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(struct soap *soap, ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(soap, tag?tag:"ns1:ST_REPORT_FAULT_LYRIC2_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(struct soap *soap, ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC2_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY ** p = (ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY, sizeof(ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(soap, tag?tag:"ns1:ST_REPORT_FAULT_LYRIC_WITH_COMMENT_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREREPORT_USCOREFAULT_USCORELYRIC_USCOREWITH_USCORECOMMENT_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY ** p = (ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY, sizeof(ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(soap, tag?tag:"ns1:ST_UPLOAD_LYRIC_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(struct soap *soap, ns1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREUPLOAD_USCORELYRIC_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN *)soap_instantiate_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN ** p = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(soap, tag?tag:"ns1:ST_GET_RESEMBLELYRIC2_COUNT_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY ** p = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(soap, tag?tag:"ns1:ST_GET_RESEMBLELYRIC2_COUNT_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORECOUNT_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, const char *tag, ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *)soap_instantiate_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN ** p = (ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN, sizeof(ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN);
	if (soap_out_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, tag?tag:"ns1:ArrayOfST_GET_RESEMBLELYRIC2_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, ns1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY *)soap_instantiate_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY ** p = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY, sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(soap, tag?tag:"ns1:ST_GET_RESEMBLELYRIC2_QUERY", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(struct soap *soap, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCOREQUERY(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN *)soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN ** p = (ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, tag?tag:"ns1:ST_GET_LYRIC5_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC5_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC5_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREMUREKAINFO_USCORESERVICE(struct soap *soap, ns1__ST_USCOREMUREKAINFO_USCORESERVICE *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREMUREKAINFO_USCORESERVICE))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREMUREKAINFO_USCORESERVICE(struct soap *soap, const char *tag, int id, ns1__ST_USCOREMUREKAINFO_USCORESERVICE *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREMUREKAINFO_USCORESERVICE);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREMUREKAINFO_USCORESERVICE ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREMUREKAINFO_USCORESERVICE(struct soap *soap, const char *tag, ns1__ST_USCOREMUREKAINFO_USCORESERVICE **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREMUREKAINFO_USCORESERVICE **)soap_malloc(soap, sizeof(ns1__ST_USCOREMUREKAINFO_USCORESERVICE *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREMUREKAINFO_USCORESERVICE *)soap_instantiate_ns1__ST_USCOREMUREKAINFO_USCORESERVICE(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREMUREKAINFO_USCORESERVICE ** p = (ns1__ST_USCOREMUREKAINFO_USCORESERVICE **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREMUREKAINFO_USCORESERVICE, sizeof(ns1__ST_USCOREMUREKAINFO_USCORESERVICE), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREMUREKAINFO_USCORESERVICE(struct soap *soap, ns1__ST_USCOREMUREKAINFO_USCORESERVICE *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREMUREKAINFO_USCORESERVICE);
	if (soap_out_PointerTons1__ST_USCOREMUREKAINFO_USCORESERVICE(soap, tag?tag:"ns1:ST_MUREKAINFO_SERVICE", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREMUREKAINFO_USCORESERVICE ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREMUREKAINFO_USCORESERVICE(struct soap *soap, ns1__ST_USCOREMUREKAINFO_USCORESERVICE **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREMUREKAINFO_USCORESERVICE(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, const char *tag, int id, ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, const char *tag, ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT **)soap_malloc(soap, sizeof(ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT *)soap_instantiate_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT ** p = (ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT, sizeof(ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT);
	if (soap_out_PointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, tag?tag:"ns1:ST_LYRIC_DELETE_RESULT", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, ns1__ST_USCORELYRIC_USCOREFORMONITOR *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREFORMONITOR))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, const char *tag, int id, ns1__ST_USCORELYRIC_USCOREFORMONITOR *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREFORMONITOR);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCORELYRIC_USCOREFORMONITOR ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, const char *tag, ns1__ST_USCORELYRIC_USCOREFORMONITOR **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCORELYRIC_USCOREFORMONITOR **)soap_malloc(soap, sizeof(ns1__ST_USCORELYRIC_USCOREFORMONITOR *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCORELYRIC_USCOREFORMONITOR *)soap_instantiate_ns1__ST_USCORELYRIC_USCOREFORMONITOR(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCORELYRIC_USCOREFORMONITOR ** p = (ns1__ST_USCORELYRIC_USCOREFORMONITOR **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREFORMONITOR, sizeof(ns1__ST_USCORELYRIC_USCOREFORMONITOR), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, ns1__ST_USCORELYRIC_USCOREFORMONITOR *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCORELYRIC_USCOREFORMONITOR);
	if (soap_out_PointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(soap, tag?tag:"ns1:ST_LYRIC_FORMONITOR", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCORELYRIC_USCOREFORMONITOR ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, ns1__ST_USCORELYRIC_USCOREFORMONITOR **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, ns1__ST_USCORERIGHTSINFO_USCOREJPN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCORERIGHTSINFO_USCOREJPN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, const char *tag, int id, ns1__ST_USCORERIGHTSINFO_USCOREJPN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCORERIGHTSINFO_USCOREJPN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCORERIGHTSINFO_USCOREJPN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, const char *tag, ns1__ST_USCORERIGHTSINFO_USCOREJPN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCORERIGHTSINFO_USCOREJPN **)soap_malloc(soap, sizeof(ns1__ST_USCORERIGHTSINFO_USCOREJPN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCORERIGHTSINFO_USCOREJPN *)soap_instantiate_ns1__ST_USCORERIGHTSINFO_USCOREJPN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCORERIGHTSINFO_USCOREJPN ** p = (ns1__ST_USCORERIGHTSINFO_USCOREJPN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCORERIGHTSINFO_USCOREJPN, sizeof(ns1__ST_USCORERIGHTSINFO_USCOREJPN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, ns1__ST_USCORERIGHTSINFO_USCOREJPN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN);
	if (soap_out_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, tag?tag:"ns1:ST_RIGHTSINFO_JPN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCORERIGHTSINFO_USCOREJPN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, ns1__ST_USCORERIGHTSINFO_USCOREJPN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, ns1__ST_USCORESEARCHLYRIC_USCORELIST *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCORESEARCHLYRIC_USCORELIST))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, const char *tag, int id, ns1__ST_USCORESEARCHLYRIC_USCORELIST *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCORESEARCHLYRIC_USCORELIST);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCORESEARCHLYRIC_USCORELIST ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, const char *tag, ns1__ST_USCORESEARCHLYRIC_USCORELIST **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCORESEARCHLYRIC_USCORELIST **)soap_malloc(soap, sizeof(ns1__ST_USCORESEARCHLYRIC_USCORELIST *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCORESEARCHLYRIC_USCORELIST *)soap_instantiate_ns1__ST_USCORESEARCHLYRIC_USCORELIST(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCORESEARCHLYRIC_USCORELIST ** p = (ns1__ST_USCORESEARCHLYRIC_USCORELIST **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCORESEARCHLYRIC_USCORELIST, sizeof(ns1__ST_USCORESEARCHLYRIC_USCORELIST), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, ns1__ST_USCORESEARCHLYRIC_USCORELIST *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCORESEARCHLYRIC_USCORELIST);
	if (soap_out_PointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(soap, tag?tag:"ns1:ST_SEARCHLYRIC_LIST", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCORESEARCHLYRIC_USCORELIST ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, ns1__ST_USCORESEARCHLYRIC_USCORELIST **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetBroadcastingListReturn(struct soap *soap, ns1__GetBroadcastingListReturn *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__GetBroadcastingListReturn))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetBroadcastingListReturn(struct soap *soap, const char *tag, int id, ns1__GetBroadcastingListReturn *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__GetBroadcastingListReturn);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__GetBroadcastingListReturn ** SOAP_FMAC4 soap_in_PointerTons1__GetBroadcastingListReturn(struct soap *soap, const char *tag, ns1__GetBroadcastingListReturn **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__GetBroadcastingListReturn **)soap_malloc(soap, sizeof(ns1__GetBroadcastingListReturn *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__GetBroadcastingListReturn *)soap_instantiate_ns1__GetBroadcastingListReturn(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__GetBroadcastingListReturn ** p = (ns1__GetBroadcastingListReturn **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__GetBroadcastingListReturn, sizeof(ns1__GetBroadcastingListReturn), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetBroadcastingListReturn(struct soap *soap, ns1__GetBroadcastingListReturn *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__GetBroadcastingListReturn);
	if (soap_out_PointerTons1__GetBroadcastingListReturn(soap, tag?tag:"ns1:GetBroadcastingListReturn", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__GetBroadcastingListReturn ** SOAP_FMAC4 soap_get_PointerTons1__GetBroadcastingListReturn(struct soap *soap, ns1__GetBroadcastingListReturn **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__GetBroadcastingListReturn(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *)soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN ** p = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, tag?tag:"ns1:ST_CAST_GET_EX_METADATA_LIST3_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *)soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN ** p = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, tag?tag:"ns1:ST_CAST_GET_EX_METADATA_LIST2_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *)soap_instantiate_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN ** p = (ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, tag?tag:"ns1:ST_CAST_GET_EX_METADATA_LIST_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *)soap_instantiate_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN ** p = (ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, tag?tag:"ns1:ST_GET_ALBA_STATISTIC_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *)soap_instantiate_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN ** p = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, tag?tag:"ns1:ST_GET_MEMBER_LICENSE_LIST_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *)soap_instantiate_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN ** p = (ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, tag?tag:"ns1:ST_GET_MEMBER_LIST_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *)soap_instantiate_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN ** p = (ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, tag?tag:"ns1:ST_GET_REGISTER_LIST_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *)soap_instantiate_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN ** p = (ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, tag?tag:"ns1:ST_GET_MODIFY_LIST_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *)soap_instantiate_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN ** p = (ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, tag?tag:"ns1:ST_GET_REPORTFAULT_LIST_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *)soap_instantiate_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN ** p = (ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, tag?tag:"ns1:ST_GET_LYRIC_LIST_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, const char *tag, int id, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN ** SOAP_FMAC4 soap_in_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, const char *tag, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN **)soap_malloc(soap, sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *)soap_instantiate_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN ** p = (ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN);
	if (soap_out_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, tag?tag:"ns1:ST_GET_RESEMBLELYRIC2_RETURN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN ** SOAP_FMAC4 soap_get_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, std::vector<ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, const std::vector<ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, const char *tag, int id, const std::vector<ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, const char *tag, std::vector<ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT, sizeof(ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT), 1))
				break;
			if (!soap_in_PointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, tag, NULL, "ns1:ST_LYRIC_DELETE_RESULT"))
				break;
		}
		else if (!soap_in_PointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, tag, &n, "ns1:ST_LYRIC_DELETE_RESULT"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * >);
		if (size)
			*size = sizeof(std::vector<ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * > %p -> %p\n", q, p));
	*(std::vector<ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * >*)p = *(std::vector<ns1__ST_USCORELYRIC_USCOREDELETE_USCORERESULT * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap *soap, std::vector<int >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap *soap, const std::vector<int >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap *soap, const char *tag, int id, const std::vector<int >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<int >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_int(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<int >* SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap *soap, const char *tag, std::vector<int >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	int n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		soap_default_int(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_int, SOAP_TYPE_std__vectorTemplateOfint, sizeof(int), 0))
				break;
			if (!soap_in_int(soap, tag, NULL, "xsd:int"))
				break;
		}
		else if (!soap_in_int(soap, tag, &n, "xsd:int"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfint(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<int > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfint, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<int >);
		if (size)
			*size = sizeof(std::vector<int >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<int >, n);
		if (size)
			*size = n * sizeof(std::vector<int >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<int >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<int > %p -> %p\n", q, p));
	*(std::vector<int >*)p = *(std::vector<int >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, std::vector<ns1__ST_USCORELYRIC_USCOREFORMONITOR * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, const std::vector<ns1__ST_USCORELYRIC_USCOREFORMONITOR * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__ST_USCORELYRIC_USCOREFORMONITOR * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, const char *tag, int id, const std::vector<ns1__ST_USCORELYRIC_USCOREFORMONITOR * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__ST_USCORELYRIC_USCOREFORMONITOR * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__ST_USCORELYRIC_USCOREFORMONITOR * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, const char *tag, std::vector<ns1__ST_USCORELYRIC_USCOREFORMONITOR * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns1__ST_USCORELYRIC_USCOREFORMONITOR *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__ST_USCORELYRIC_USCOREFORMONITOR, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREFORMONITOR, sizeof(ns1__ST_USCORELYRIC_USCOREFORMONITOR), 1))
				break;
			if (!soap_in_PointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(soap, tag, NULL, "ns1:ST_LYRIC_FORMONITOR"))
				break;
		}
		else if (!soap_in_PointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(soap, tag, &n, "ns1:ST_LYRIC_FORMONITOR"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__ST_USCORELYRIC_USCOREFORMONITOR * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREFORMONITOR, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns1__ST_USCORELYRIC_USCOREFORMONITOR * >);
		if (size)
			*size = sizeof(std::vector<ns1__ST_USCORELYRIC_USCOREFORMONITOR * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns1__ST_USCORELYRIC_USCOREFORMONITOR * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns1__ST_USCORELYRIC_USCOREFORMONITOR * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns1__ST_USCORELYRIC_USCOREFORMONITOR * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__ST_USCORELYRIC_USCOREFORMONITOR(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__ST_USCORELYRIC_USCOREFORMONITOR * > %p -> %p\n", q, p));
	*(std::vector<ns1__ST_USCORELYRIC_USCOREFORMONITOR * >*)p = *(std::vector<ns1__ST_USCORELYRIC_USCOREFORMONITOR * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, std::vector<ns1__ST_USCORERIGHTSINFO_USCOREJPN * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, const std::vector<ns1__ST_USCORERIGHTSINFO_USCOREJPN * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__ST_USCORERIGHTSINFO_USCOREJPN * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, const char *tag, int id, const std::vector<ns1__ST_USCORERIGHTSINFO_USCOREJPN * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__ST_USCORERIGHTSINFO_USCOREJPN * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__ST_USCORERIGHTSINFO_USCOREJPN * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, const char *tag, std::vector<ns1__ST_USCORERIGHTSINFO_USCOREJPN * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns1__ST_USCORERIGHTSINFO_USCOREJPN *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__ST_USCORERIGHTSINFO_USCOREJPN, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORERIGHTSINFO_USCOREJPN, sizeof(ns1__ST_USCORERIGHTSINFO_USCOREJPN), 1))
				break;
			if (!soap_in_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, tag, NULL, "ns1:ST_RIGHTSINFO_JPN"))
				break;
		}
		else if (!soap_in_PointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, tag, &n, "ns1:ST_RIGHTSINFO_JPN"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__ST_USCORERIGHTSINFO_USCOREJPN * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORERIGHTSINFO_USCOREJPN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns1__ST_USCORERIGHTSINFO_USCOREJPN * >);
		if (size)
			*size = sizeof(std::vector<ns1__ST_USCORERIGHTSINFO_USCOREJPN * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns1__ST_USCORERIGHTSINFO_USCOREJPN * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns1__ST_USCORERIGHTSINFO_USCOREJPN * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns1__ST_USCORERIGHTSINFO_USCOREJPN * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__ST_USCORERIGHTSINFO_USCOREJPN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__ST_USCORERIGHTSINFO_USCOREJPN * > %p -> %p\n", q, p));
	*(std::vector<ns1__ST_USCORERIGHTSINFO_USCOREJPN * >*)p = *(std::vector<ns1__ST_USCORERIGHTSINFO_USCOREJPN * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, std::vector<ns1__ST_USCORESEARCHLYRIC_USCORELIST * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, const std::vector<ns1__ST_USCORESEARCHLYRIC_USCORELIST * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__ST_USCORESEARCHLYRIC_USCORELIST * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, const char *tag, int id, const std::vector<ns1__ST_USCORESEARCHLYRIC_USCORELIST * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__ST_USCORESEARCHLYRIC_USCORELIST * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__ST_USCORESEARCHLYRIC_USCORELIST * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, const char *tag, std::vector<ns1__ST_USCORESEARCHLYRIC_USCORELIST * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns1__ST_USCORESEARCHLYRIC_USCORELIST *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__ST_USCORESEARCHLYRIC_USCORELIST, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORESEARCHLYRIC_USCORELIST, sizeof(ns1__ST_USCORESEARCHLYRIC_USCORELIST), 1))
				break;
			if (!soap_in_PointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(soap, tag, NULL, "ns1:ST_SEARCHLYRIC_LIST"))
				break;
		}
		else if (!soap_in_PointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(soap, tag, &n, "ns1:ST_SEARCHLYRIC_LIST"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__ST_USCORESEARCHLYRIC_USCORELIST * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORESEARCHLYRIC_USCORELIST, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns1__ST_USCORESEARCHLYRIC_USCORELIST * >);
		if (size)
			*size = sizeof(std::vector<ns1__ST_USCORESEARCHLYRIC_USCORELIST * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns1__ST_USCORESEARCHLYRIC_USCORELIST * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns1__ST_USCORESEARCHLYRIC_USCORELIST * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns1__ST_USCORESEARCHLYRIC_USCORELIST * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__ST_USCORESEARCHLYRIC_USCORELIST(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__ST_USCORESEARCHLYRIC_USCORELIST * > %p -> %p\n", q, p));
	*(std::vector<ns1__ST_USCORESEARCHLYRIC_USCORELIST * >*)p = *(std::vector<ns1__ST_USCORESEARCHLYRIC_USCORELIST * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__GetBroadcastingListReturn(struct soap *soap, std::vector<ns1__GetBroadcastingListReturn * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__GetBroadcastingListReturn(struct soap *soap, const std::vector<ns1__GetBroadcastingListReturn * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__GetBroadcastingListReturn * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__GetBroadcastingListReturn(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__GetBroadcastingListReturn(struct soap *soap, const char *tag, int id, const std::vector<ns1__GetBroadcastingListReturn * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__GetBroadcastingListReturn * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__GetBroadcastingListReturn(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__GetBroadcastingListReturn * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__GetBroadcastingListReturn(struct soap *soap, const char *tag, std::vector<ns1__GetBroadcastingListReturn * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns1__GetBroadcastingListReturn *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__GetBroadcastingListReturn, SOAP_TYPE_std__vectorTemplateOfPointerTons1__GetBroadcastingListReturn, sizeof(ns1__GetBroadcastingListReturn), 1))
				break;
			if (!soap_in_PointerTons1__GetBroadcastingListReturn(soap, tag, NULL, "ns1:GetBroadcastingListReturn"))
				break;
		}
		else if (!soap_in_PointerTons1__GetBroadcastingListReturn(soap, tag, &n, "ns1:GetBroadcastingListReturn"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__GetBroadcastingListReturn(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__GetBroadcastingListReturn * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__GetBroadcastingListReturn(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__GetBroadcastingListReturn(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__GetBroadcastingListReturn, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns1__GetBroadcastingListReturn * >);
		if (size)
			*size = sizeof(std::vector<ns1__GetBroadcastingListReturn * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns1__GetBroadcastingListReturn * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns1__GetBroadcastingListReturn * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns1__GetBroadcastingListReturn * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__GetBroadcastingListReturn(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__GetBroadcastingListReturn * > %p -> %p\n", q, p));
	*(std::vector<ns1__GetBroadcastingListReturn * >*)p = *(std::vector<ns1__GetBroadcastingListReturn * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, const std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, const char *tag, int id, const std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, const char *tag, std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN), 1))
				break;
			if (!soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, tag, NULL, "ns1:ST_CAST_GET_EX_METADATA_LIST3_RETURN"))
				break;
		}
		else if (!soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, tag, &n, "ns1:ST_CAST_GET_EX_METADATA_LIST3_RETURN"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * >);
		if (size)
			*size = sizeof(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * > %p -> %p\n", q, p));
	*(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * >*)p = *(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST3_USCORERETURN * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, const std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, const char *tag, int id, const std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, const char *tag, std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN), 1))
				break;
			if (!soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, tag, NULL, "ns1:ST_CAST_GET_EX_METADATA_LIST2_RETURN"))
				break;
		}
		else if (!soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, tag, &n, "ns1:ST_CAST_GET_EX_METADATA_LIST2_RETURN"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * >);
		if (size)
			*size = sizeof(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * > %p -> %p\n", q, p));
	*(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * >*)p = *(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST2_USCORERETURN * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, const std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN), 1))
				break;
			if (!soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, tag, NULL, "ns1:ST_CAST_GET_EX_METADATA_LIST_RETURN"))
				break;
		}
		else if (!soap_in_PointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, tag, &n, "ns1:ST_CAST_GET_EX_METADATA_LIST_RETURN"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * >);
		if (size)
			*size = sizeof(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * > %p -> %p\n", q, p));
	*(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * >*)p = *(std::vector<ns1__ST_USCORECAST_USCOREGET_USCOREEX_USCOREMETADATA_USCORELIST_USCORERETURN * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, std::vector<ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, const std::vector<ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, const char *tag, int id, const std::vector<ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, const char *tag, std::vector<ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN), 1))
				break;
			if (!soap_in_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, tag, NULL, "ns1:ST_GET_ALBA_STATISTIC_RETURN"))
				break;
		}
		else if (!soap_in_PointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, tag, &n, "ns1:ST_GET_ALBA_STATISTIC_RETURN"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * >);
		if (size)
			*size = sizeof(std::vector<ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * > %p -> %p\n", q, p));
	*(std::vector<ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * >*)p = *(std::vector<ns1__ST_USCOREGET_USCOREALBA_USCORESTATISTIC_USCORERETURN * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, const std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN), 1))
				break;
			if (!soap_in_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, tag, NULL, "ns1:ST_GET_MEMBER_LICENSE_LIST_RETURN"))
				break;
		}
		else if (!soap_in_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, tag, &n, "ns1:ST_GET_MEMBER_LICENSE_LIST_RETURN"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * >);
		if (size)
			*size = sizeof(std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * > %p -> %p\n", q, p));
	*(std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * >*)p = *(std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELICENSE_USCORELIST_USCORERETURN * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, const std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN), 1))
				break;
			if (!soap_in_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, tag, NULL, "ns1:ST_GET_MEMBER_LIST_RETURN"))
				break;
		}
		else if (!soap_in_PointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, tag, &n, "ns1:ST_GET_MEMBER_LIST_RETURN"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * >);
		if (size)
			*size = sizeof(std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * > %p -> %p\n", q, p));
	*(std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * >*)p = *(std::vector<ns1__ST_USCOREGET_USCOREMEMBER_USCORELIST_USCORERETURN * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, std::vector<ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, const std::vector<ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const std::vector<ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, std::vector<ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN), 1))
				break;
			if (!soap_in_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, tag, NULL, "ns1:ST_GET_REGISTER_LIST_RETURN"))
				break;
		}
		else if (!soap_in_PointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, tag, &n, "ns1:ST_GET_REGISTER_LIST_RETURN"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * >);
		if (size)
			*size = sizeof(std::vector<ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * > %p -> %p\n", q, p));
	*(std::vector<ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * >*)p = *(std::vector<ns1__ST_USCOREGET_USCOREREGISTER_USCORELIST_USCORERETURN * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, std::vector<ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, const std::vector<ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const std::vector<ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, std::vector<ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN), 1))
				break;
			if (!soap_in_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, tag, NULL, "ns1:ST_GET_MODIFY_LIST_RETURN"))
				break;
		}
		else if (!soap_in_PointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, tag, &n, "ns1:ST_GET_MODIFY_LIST_RETURN"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * >);
		if (size)
			*size = sizeof(std::vector<ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * > %p -> %p\n", q, p));
	*(std::vector<ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * >*)p = *(std::vector<ns1__ST_USCOREGET_USCOREMODIFY_USCORELIST_USCORERETURN * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, std::vector<ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, const std::vector<ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const std::vector<ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, std::vector<ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN), 1))
				break;
			if (!soap_in_PointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, tag, NULL, "ns1:ST_GET_REPORTFAULT_LIST_RETURN"))
				break;
		}
		else if (!soap_in_PointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, tag, &n, "ns1:ST_GET_REPORTFAULT_LIST_RETURN"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * >);
		if (size)
			*size = sizeof(std::vector<ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * > %p -> %p\n", q, p));
	*(std::vector<ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * >*)p = *(std::vector<ns1__ST_USCOREGET_USCOREREPORTFAULT_USCORELIST_USCORERETURN * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, std::vector<ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, const std::vector<ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, int id, const std::vector<ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, const char *tag, std::vector<ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN), 1))
				break;
			if (!soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, tag, NULL, "ns1:ST_GET_LYRIC_LIST_RETURN"))
				break;
		}
		else if (!soap_in_PointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, tag, &n, "ns1:ST_GET_LYRIC_LIST_RETURN"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * >);
		if (size)
			*size = sizeof(std::vector<ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * > %p -> %p\n", q, p));
	*(std::vector<ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * >*)p = *(std::vector<ns1__ST_USCOREGET_USCORELYRIC_USCORELIST_USCORERETURN * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, std::vector<ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, const std::vector<ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, const char *tag, int id, const std::vector<ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, const char *tag, std::vector<ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN, sizeof(ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN), 1))
				break;
			if (!soap_in_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, tag, NULL, "ns1:ST_GET_RESEMBLELYRIC2_RETURN"))
				break;
		}
		else if (!soap_in_PointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, tag, &n, "ns1:ST_GET_RESEMBLELYRIC2_RETURN"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN, n, AlsongAPI_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * >);
		if (size)
			*size = sizeof(std::vector<ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * > %p -> %p\n", q, p));
	*(std::vector<ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * >*)p = *(std::vector<ns1__ST_USCOREGET_USCORERESEMBLELYRIC2_USCORERETURN * >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of AlsongAPIC.cpp */
